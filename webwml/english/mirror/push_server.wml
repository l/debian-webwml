#use wml::debian::template title="Setting up a push server"
#use wml::debian::toc

<p>Setting up a push server consists of two basic tasks: setting up rsync
access (for normal, "pull" mirroring) and setting up ssh trigger mechanism
(for "pushing" the pull mirroring).

<p><small>(For more information on what a push server is, please read
<a href="push_mirroring">the explanation of push mirroring</a>.)</small>

<toc-display />

<toc-add-entry name="rsync">Setting up rsync</toc-add-entry>

<p>Install <code>rsync</code> 2.1.1 or greater. If your site is running
Debian, just install the latest
<a href="http://packages.debian.org/stable/net/rsync">rsync</a> package.

<p>Create <code>rsyncd.conf</code> file and put something similar to this
in it:

<pre>
uid = nobody
gid = nogroup
max connections = 25
socket options = SO_KEEPALIVE

[debian]
  path = /srv/debian/mirror
  comment = The Debian Archive (~250 GB)
  auth users = authorized_account1,authorized_account2,authorized_accountN
  read only = true
  secrets file = /etc/rsyncd/debian.secrets
</pre>

<p>Add an entry for each site you are pushing to in the
<code>/etc/rsyncd/debian.secrets</code> file:

<pre>
authorized_account1:a_password
authorized_account2:another_password
authorized_accountN:password
</pre>

<p>You have now given the downstream mirrors access to the archive on your
machine.

<p>You will probably want to start the rsync daemon from inetd. To do this,
you have to add rsync service in <code>/etc/services</code> file (if it
isn't already there), like this:

<pre>
rsync           873/tcp
</pre>

To enable the daemon from inetd, add the following to your
<code>/etc/inetd.conf</code> file:

<pre>
rsync      stream      tcp         nowait      root /usr/bin/rsync rsyncd --daemon
</pre>

(Remember to send inetd an HUP signal to tell it to reread its config file
after modifying the file.)

<toc-add-entry name="sshtrigger">Setting up ssh trigger mechanism</toc-add-entry>

<p>Create a new ssh key for the account that you use to mirror Debian. Make
sure you don't overwrite your original ssh key by using the -f option, for
example:

<pre>
ssh-keygen -f ~/.ssh/identity.mysite
</pre>

<p>Make sure that the new public key (~/.ssh/identity.mysite.pub) contains
this at the beginning:

<pre>
no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty,command="~/sync &amp;"
</pre>

<p>You need to set up a script that will contact the downstream mirrors.
Create a file called <code>signal</code>, containing this:

<protect>
<pre>
#!/bin/sh

# This script is called to signal the remote host that it is time to
# mirror the archive.

echo Signalling $1
ssh -o"BatchMode yes" -o"user $2" "$1" -i $HOME/.ssh/identity.mysite sleep 1
</pre>
</protect>

<p>This script will login to a remote host using the special ssh key you
created above, provided that each downstream mirror operator adds that
key to their own ~/.ssh/authorized_keys (also replacing "sync" with
"ftpsync" or whatever their command to start the mirroring is called).
The script itself will not do anything useful remotely, the single command
will be run as specified by the key setting.</p>

<p>To actually signal the mirrors, you need to run <code>./signal
&lt;site&gt; &lt;username&gt;</code> after your own rsyncing is done.
Thus, as soon as your site is finished mirroring from your upstream site,
you will start pushing to those downstream from you.

<p>You can place these commands either at the end of your
<code>ftpsync</code> script, or if it's more convenient for you, in a new
script, and then run that script from <code>ftpsync</code>, for example:

<protect>
<pre>
#!/bin/sh

# This script is called by websync to signal the downstream mirrors.

./signal some.other.site archvsync
./signal and.another.site othersiteaccount
</pre>
</protect>

<p>If you have any trouble with this, <a href="mailto:mirrors@debian.org">
contact us</a>.
