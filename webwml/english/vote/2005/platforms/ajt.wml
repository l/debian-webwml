#use wml::debian::template title="Platform for Anthony Towns" BARETITLE="true" NOHEADER="true"
#include "$(ENGLISHDIR)/vote/style.inc"

    <h1 class="title">Platform for Anthony Towns</h1>

    <p>
      Hi. My name's Anthony Towns. I'm running for DPL this year. These
      are the things I'd like to work on.
    </p>

    <h2>Welcoming people to the project</h2>

    <p>
      I think it's important that the project accept contributions from
      as large and diverse a group of technically skilled people as we
      can manage. I think the best way to achieve this is:
    </p>

    <ol style=" list-style-type: lower-roman">
      <li>
        To have our lists filled with interesting technical
        discussions, that welcome intelligent contributions from
        new-comers, and don't waste a lot of time going over old
        ground or off-topic subjects.
      </li>
      <li>
        To have newcomers be invited to act as assistants to existing
        groups; and for helpers be treated like individuals, rather
        than a new build that needs a standardised test suite run over
        it.
      </li>
      <li>
        To have users be able to participate in the project in an
        acknowledged way, and thus able to be consulted on decisions
        directly, rather than to have their opinions guessed at by
        developers.
      </li>
      <li>
        To make our activities far more public, by doing things such
        as conducting more discussion on existing lists, creating
        temporary lists for quick discussions that are nevertheless
        permanently archived within Debian, and summarising
        discussions over IRC or in person to lists as a matter of
        routine.
      </li>
      <li>
        To actively try to include derivatives into the project,
        rather than passively hoping they'll contribute to us
        -- such as including projects like Knoppix, backports.org,
        Ubuntu, fink and others into the archive where possible; and
        otherwise helping relationships with folks like HP, Linspire,
        SkoleLinux and others.
      </li>
    </ol>

    <h2>Project Effectiveness</h2>

    <p>
      Although sometimes it's hard to tell, Debian actually has a
      purpose: namely to create a great free operating system. It's
      important for us to be effective in achieving that purpose --
      it's no good have the best design for an operating system, or
      the best policies for putting it together, or the best
      procedures for maintaining it if we don't ever get around to
      following the design, policies and procedures and implementing
      something. I think Debian's been falling behind in this
      department, and I think the way to resolve that is to work at
      actually making decisions and standing by them, rather than
      trying to maintain a fractured consensus by repeatedly having
      the same debates with new participants.</p>

    <p>Our mechanisms for making decisions are:</p>

    <ol style="list-style-type: lower-roman">
      <li>consensus on the mailing lists</li>
      <li>judgement of delegates and maintainers</li>
      <li>judgement of the technical ctte</li>
      <li>general resolution by the developers as a whole</li>
    </ol>

    <p>
      The first of these has been the key to Debian's success -- any
      decision that can more or less satisfy everyone in a diverse
      group is a pretty good one. It's not always possible to make a
      decision that way, of course; which is why we need the other
      options.  Unfortunately they're not working well at present.</p>

    <p>
      It's my belief that Debian could be improved here simply by
      giving delegates clear authority to make decisions over their
      areas of expertise, and accepting that others are expected to
      persuade or convince delegates and maintainers that something
      should be done in some particular way.</p>

    <p>
      Additionally, I think that the technical committee would serve
      the project better if it were composed of active members of key
      teams, rather than the current membership of wise elders; both
      as an indication of confidence in our delegates, and to ensure
      the technical committee's knowledge of Debian's processes is as
      current and complete as possible.
    </p>

    <h2>Distribution Quality</h2>

    <p>
      Finally, I think we could produce a substantially better
      distribution.  Much of that work has already been done by derivatives
      -- such as the init script speedups Ubuntu folks have worked on,
      or the LiveCD development Knoppix is famous for -- and we can
      gain those features just be working on better integration with
      derivatives; but there are other issues that, to my mind, Debian
      itself should be working on:</p>

    <ol style="list-style-type: lower-roman">
      <li>
        Better policy -- at present "policy" is fragmented between
        debian-policy, the Developers Reference, various subsystem
        specific documents, and word of mouth. I believe we should
        work on integrating that into a single package, if not a
        single document.
      </li>
      <li>
        Better QA -- having the full source code to all the software
        we use gives us the chance to excel in a bunch of "QA" type
        areas; I think we shouldn't just aim at grabbing all the cool
        software out there and putting it in a .deb, but that we
        should be filing off the rough edges too, by writing automated
        test suites for our packages, making sure everything is
        documented, and working towards zero defects in everything we
        ship.
      </li>
      <li>
        Better package selection -- a problem that every Debian user
        has faced and will probably face again is working out which
        packages they want installed; do you want ether-wake, or
        wakeonlan, eg? I think it's long past time we made some
        consistent progress in this area, addressing issues like
        package categorisation, package overlap, and accessibility of
        non-free or commercial packages.
      </li>
    </ol>

    <h2>Addenda</h2>

    <p>
      So, a couple of other notes, which you might or mightn't find
      relevant.
    </p>

    <p>
      I think the role of the DPL is, well, to lead the project: to
      find particular areas that the project should focus on, and to
      find areas where the project's being dysfunctional and help it
      sort itself out. The DPL really only has one power, and that's
      to give authority to others. That's a fairly subtle power --
      it's the difference between someone having the root password and
      having permission to use it. But in a group of people who care
      about what's right and wrong as firmly as Debian developers do,
      it's actually a fairly important power.</p>

    <p>
      For those who care, I joined Debian in early 1998. I'm the author
      of ifupdown and debootstrap. I've written patches for gzip (#30537,
      #184057), dpkg (#93386, #112386, #184635), pax (#139943), and others.
      I've participated in the LSB and FHS forums, and on a variety of
      Debian lists. I still eagerly await the day when #18733 and #62529
      are resolved.
    </p>

    <p>
      I wrote the CGI scripts for bugs.debian.org as a proof of concept
      and started preserving old bug reports rather than letting them be
      lost forever once they'd been closed for a month. I then found
      myself on the debbugs team when the old scripts that generated the
      static pages once or twice a day started failing because we just
      plain had too many bugs. I also added support for bug tags, queries
      by submitter, cloning bugs, and blocking access to the control@
      address for people who abuse it.
    </p>
    <p>
      My most public activity in the project has been my participation
      in release management. I started being involved in that in '98 by
      getting involved in the discussions on -devel about the "Debian
      release modem" (sic) and along with other interested folks came up
      with the ideas behind testing. After more discussion and modifications,
      I started implementing "britney" in 1999 by maintaining a hardlinked
      copy of the archive, and eventually got to the point where I thought
      it was ready to start integrating properly in 2000. At that point
      I offered to help Richard Braakman out with potato's release
      management, who at that point sensibly fled the country, and I got
      to do the final phases of potato's release, which came out in August
      2000. I then worked with Jason Gunthorpe (who's the primary author
      of Apt for those playing along at home), and James Troup to get the
      archive converted to pools so that the horrible hardlinking stuff
      could be dropped and testing could be mirrored, and we rolled testing
      out in late 2000. Sometime around this point I was added to the
      ftpmaster group to make the integration easier. I continued as
      release manager for woody, at which point I thought it'd be a good
      idea to follow Richard's fine example, and was lucky enough to have
      Steve Langasek and Colin Watson volunteer.
    </p>
    <p>
      I took the opportunity to step down from the release management
      role last year for a few reasons. The long term reasons were
      that I'd been looking to pass on the RM role for quite some time
      -- I'm more interested in (and effective at) initial design and
      implementation than long term maintenance -- and that Colin and
      Steve were already at the point where they were doing most of
      the work anyway. The proximate cause was that I no longer felt
      confident that I had the project's support to do the RM job, and
      that Colin and Steve would have a much better opportunity to do
      that without continuing confusion and distractions. I think
      that's actually panned out fairly well.
    </p>
    <p>
      My ftpmaster activity mostly consists of maintenance of britney,
      design work, with occasional poking at processing new packages and
      removal requests. I did a fair amount of work coordinating the move
      of crypto software into main, figuring out how to redo security
      support for the woody release, and designed and implemented the
      signed Release files and helped with the apt support thereof.
    </p>
    <h2>Conclusion</h2>

    <p>
      I think my experiences within Debian match reasonably well with
      what I'd like to achieve and that some good progress on the
      above items should be possible over the next year. But hey, I've
      been wrong before.
    </p>


