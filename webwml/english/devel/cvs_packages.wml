#use wml::debian::template title="Using CVS together with Debian packages"

<p>This short document is only intended to give a short help in
converting packages to CVS management.  It is probably only
interesting for a few people who are not very familiar with CVS and
version management. Also, there is a script in
<code>/usr/share/doc/cvs-buildpackage</code>
called <code>cvs-pkginit</code> (both the script and the man page are
gzipped), which will print out a synopsis of this HOWTO document.

<p>For example, to convert a package foo, version bar1, Debian revision 3,
try:
<pre>
% cvs-pkginit foo bar1 3
</pre>
and look at the synopsis.

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>Note: in the following discussion, the entities in angle brackets
&lt;&gt; are meant to be changed for each case, everything else is to
be taken literally. For example, if you are talking about a package with
upstream version 2.1.82, then &lt;$version&gt; means 2.1.82, and
upstream_version_&lt;$version | tr  . _&gt; means upstream_version_2_1_82.

<ol>
<li>Set up CVS

<pre>
   $ CVSROOT=/where/your/repository/will/be
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>This allows you to separate your Debian packages from anything else in
   your repository, either currently or in the future. Even if you think
   you may not need CVS for anything else, it is easier to classify your
   repository now than to be sorry later (it is a mess moving things around
   in your repository later).

   <p>If more than one person is supposed to use CVS, you have to makes
   sure they can actually modify the repository using CVS.  Choose a
   group (or a set of groups) that have access to a part of the
   repository, and set the permissions:

<pre>
   \# chgrp &lt;archive&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>This makes sure that members of the archive group are allowed to
   configure the repository.  Now you have to make sure that the
   correct groups of people are able to modify parts of the
   repository.

<pre>
   \# mkdir $CVSROOT/debian/&lt;package1&gt;
   \# chgrp &lt;group1&gt; $CVSROOT/debian/&lt;package1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;package1&gt;
   \# mkdir $CVSROOT/debian/&lt;package2&gt;
   \# chgrp &lt;group2&gt; $CVSROOT/debian/&lt;package2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;package2&gt;
</pre>

   <p>As a normal user you should also make your CVS repository public,
   either by using <kbd>"-d /where/your/repository/will/be"</kbd> or by
   putting such a fragment into your profile.

<pre>
   $ CVSROOT=/where/your/repository/will/be
   $ export CVSROOT
</pre>


<li>Use Modules

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>In the following, &lt;package&gt; should be the package name as in
   debian/changelog file.

   <p>Add the following lines, the first is essential, the second can be
   duplicated and is self-explanatory:

<pre>
   modules   CVSROOT modules
   &lt;package&gt; debian/&lt;package&gt;
</pre>

<pre>
   \# cvs commit -m 'Define first modules'
</pre>


<li>Prepare to use CVS

   <p>Insert your source tree with the following commands (assuming you
   already have debianized it, and there is on orig.tar.gz file). Note
   that the upstream sources are imported with a -ko (take care of
   binary files), but not local changes we make. Please note that
   epoch numbers are ignored while determining the CVS tag name (they
   are generally used to change dpkg's opinion of package ordering,
   and are generally not relevant for CVS tags).

   <p>Change directory to where you have your non-cvs unpacked
   debianized development source tree, which is what we are trying to
   inject into CVS (this is not under CVSROOT, generally).

   <p>I REPEAT: In the following, &lt;package&gt; should be the package name
   as in the debian/changelog file.

<pre>
   $ cd /where/your/source/tree/resides/
   $ tar zvfx &lt;package&gt;_&lt;version&gt;.orig.tar.gz
   $ cd &lt;package&gt;_&lt;version&gt;.orig
   $ cvs import -ko -m 'Import of bare source' \
       debian/&lt;package&gt; source-dist upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>You may change the branch tag source-dist to whatever you
   wish. (The cvs-buildpackage maintainer habitually uses the tag
   upstream (which is a study in redundancy ;-))).

   <p>If you have set up CVS as root, and have not set group writability,
   you need to create $CVSROOT/debian/&lt;package&gt; as root and change the
   group or user ownership in the repository to the particular group
   or user respectively.  The CVS import will print one warning that
   it cannot create the debian/&lt;package&gt; directory, but that's ok.

   <p>The next step is to check out the whole tree and incorporate all of
   your changes.

<pre>
   $ cd /where/your/source/tree/will/reside
   $ cvs checkout &lt;package&gt;
</pre>

   <p>If you have already created a debianized version but haven't used
   CVS before you might want to run the following commands to
   incorporate your changes. After that you should tag that release to
   be able to check it out sometime later.

<pre>
   $ cd /where/your/source/tree/resides/&lt;package&gt;-&lt;version&gt;
   $ diff -qrBbw . /where/your/source/tree/will/reside/&lt;package&gt;/ | grep -v CVS
   $ FILES_CHANGED_LOCALLY="&lt;output from above&gt;"
   $ tar cf - $FILES_CHANGED_LOCALLY | \
       tar -C /where/your/source/tree/will/reside/&lt;package&gt; -xvpf -
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
</pre>

   <p>Please make sure that the file debian/rules is executable,
   since this way it shall be executable when exported, and there will
   be no problems running dpkg-buildpackage on the exported
   sources. In general, make sure <b>all</b> files have the right
   permission before you add them to the CVS repository.

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
   $ cvs add debian &lt;any other files added as well&gt;
</pre>

   <p>Also, please note that you have to add all additional files manually
   which should be placed in the repository, especially all files in
   the debian subdirectory. Also, please note that the cvs add command
   does <i>not</i> work recursively, so you shall have to manually add
   whatever subdirectories you have. (cd debian; cvs add *)

   <p>A nice thing is that running cvs update will show you the status of
   all files in the directory.

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
   $ cvs update
</pre>

   <p>The output looks like:
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? example1
</pre>
   M means modified (has to be committed), A means Added (has to be
   committed), ? means CVS does not know about the file (needs to be
   added, maybe?). When you are satisfied that nothing has been
   missed, and all files have the required permissions, you are ready
   to commit.

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
   $ cvs commit -m 'Made all debian changes'
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; .
</pre>

   <p>The new source tree will reside in a directory that doesn't contain
   the version number.  This is no problem as we'll see later.

   <p>If instead you are creating the debian directory from scratch (may
   be simpler, though less automated):

<pre>
   $ mkdir debian
</pre>

   <p>Create all needed debian files and add them into source control.

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>After that the next check in will include all your files.

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
   $ cvs commit -m &lt;some message&gt;
</pre>

<li>Prepare a release

   <p>Before you can run some of the Debian commands that will build a
   package you have to check out the module without all the CVS
   subdirectories.  This is done with the `<kbd>export</kbd>' command.  But
   first of all you need to check in all your modifications and mark it with
   a release number. 

<pre>
   $ cvs commit -m &lt;message&gt;
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt;
</pre>


<li>Make a release

   <p>You could either use the cvs-buildpackage mechanism (preferred), or
   an manual export. First test the cvs-buildpackage stuff as a dry
   run (make sure that the tags match) like so (Should have configured
   /etc/cvsdeb.conf):

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>Then do the real run with, expecting sudo being a program with
   which you could gain root access.

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>Or, to do it all manually:

   <p>Check out the package.

<pre>
   $ cvs export -d &lt;package&gt;-&lt;version&gt; \
         -r debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; \
             &lt;package&gt;
</pre>

   <p>Now you can go on with the normal release export mechanism.


<hr>

   <p>You are done! Congratulations! Here are a few tasks you can do
   on your source tree:

<hr>

<li>Remove or rename a file

   <p>The normal way to move a file is to copy OLD to NEW, and then issue
   the normal CVS commands to remove OLD from the repository, and add
   NEW to it.  (Both OLD and NEW could contain relative paths, for
   example `<kbd>foo/bar.c</kbd>').

<pre>
   $ mv OLD NEW
   $ cvs remove OLD
   $ cvs add NEW
   $ cvs commit -m "Renamed OLD to NEW" OLD NEW
</pre>

   <p>This is the simplest way to move a file, it is not error-prone, and
   it preserves the history of what was done.  Note that to access the
   history of the file you must specify the old or the new name,
   depending on what portion of the history you are accessing.  For
   example, `<kbd>cvs log OLD</kbd>' will give the log up until the time of the
   rename.


<li>Updating a module with the import command

   <p>When a new release of the source arrives, you import it into the
   repository with the same `import' command that you used to set up
   the repository in the first place.  The only difference is that you
   specify a different release tag this time, and a different message.

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;new source directory&gt;
   $ cvs import -m 'Import new release' debian/&lt;package&gt; source-dist \
         upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>Now, we have to incorporate the changes we made into the new
   revision. The best way to do this is to move aside our working copy
   (based on the older upstream source), and check out a new copy of
   the package <b>incorporating</b> the changes made in the upstream
   source. This is how to do it:

<pre>
   $ cd /where/your/source/tree/will/reside
   $ mv &lt;package&gt; &lt;package&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;package&gt;
   $ cd /where/your/source/tree/will/reside/&lt;package&gt;
</pre>

   <p>The above command will check out the latest revision of &lt;package&gt;,
   merging the changes made on the vendor branch `source-dist' since
   yesterday into the working copy.  If any conflicts arise during the
   merge they should be resolved in the normal way.  Then, the
   modified files may be committed.

   <p>Using a date, as suggested above, assumes that you do not import
   more than one release of a product per day. If you do, you can
   always use something like this instead:

<pre>
   $ cvs checkout -jupstream_version_&lt;oldversion|tr . _&gt; \
                  -jupstream_version_&lt;newversion|tr . _&gt; &lt;package&gt;
</pre>

   <p>In this case, the two above commands are equivalent.

   <p>For files that have not been modified locally, the newly created
   revision becomes the head revision.  

   <p>So, check and see if all the files have been correctly
   updated. Especially, remember to change the debian/changelog file!

   <p>When you are satisfied, you may remove the old version of the
   working directory. Be very sure you are removing the right
   directory! 
   
<pre>
   $ rm -rf ../&lt;package&gt;.old
</pre>

   <p>Now you are ready to prepare a release.

<li>Remove the source tree to conserve disk space

   <p>To remove the actual working source tree you are advised not to use
   <kbd>rm -rf</kbd> but use the CVS command that also tests if you have made
   any local changes that are not committed yet.

<pre>
   $ cd /where/your/source/tree/will/reside/
   $ cvs release -d &lt;package&gt; 
</pre>


<li>Glossary

<pre>
   Tags		symbolic names for revisions
   Repository	Archive of source files
</pre>

<li>Appendix:

 <p>A: CVS TAG CONVENTIONS

<pre>
 |======================================================================|
 |Upstream Version    | &lt;version&gt;                                       |
 |Debian Revision     | &lt;revision&gt;                                      |
 |Orig tar file name  | package_&lt;version&gt;.orig.tar.gz                   |
 |Debian package name | package_&lt;version&gt;-&lt;revision&gt;_&lt;arch&gt;.deb         |
 |CVS Vendor tag      | upstream_version_&lt;version  | tr . _&gt;            |
 |CVS current tag     | debian_version_&lt;revision | tr . _&gt;              |
 |======================================================================|
</pre>

 <p>Examples:
<pre>
 |======================================================================|
 |                    | upstream sources       | Debian only package    |
 |======================================================================|
 |Upstream Version    | 2.76                   | 3.38                   |
 |Debian Revision     | 1.2                    |                        |
 |Orig tar file name  | make_2.76.orig.tar.gz  |                        |
 |Debian package name | make_2.76-1.2_i386.deb | kpkg_3.38_i386.deb     |
 |CVS Vendor tag      | upstream_version_2_76  | upstream_version_3_38  |
 |CVS current tag     | debian_version_2_76-1_2| debian_version_3_38    |
 |======================================================================|
</pre>

 <p>Note that the epoch numbers are ignored while determining the CVS tag
 name (they are generally used to change dpkg's opinion of package
 ordering, and are generally not relevant for CVS tags).

</ol>
