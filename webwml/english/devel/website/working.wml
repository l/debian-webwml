#use wml::debian::template title="How to Work on the Debian Web Pages"

<p>The Debian web pages are generated in one of three ways: Documentation
is mirrored from the
<a href="http://www.debian.org/~elphick/ddp/">Debian Documentation Project (DDP)</a>,
parts of the web site
are generated using scripts (the Bug pages and Lists-Archives are two good
examples), and the rest are generated using wml.

For those unfamiliar with the programs, you can read the pages we wrote
to help you get started with
<ul>
<li><a href="using_wml">using wml</a>
<li><a href="using_cvs">using cvs</a>
</ul>

<h3>Adding New Pages</h3>
<p>Adding new pages to Debian is quite easy. All the work of
getting the header and footer right are done using wml. All
you need to do is to include a line such as the following
at the top of the new file:
<pre><protect>
#use wml::debian::template title="TITLE OF PAGE" 
</protect></pre>
followed by the body. All pages should use the wml::debian::template
template file unless they are using a special one created just
for that section, e.g. the News or security pages.

<p>The template, wml::debian::template,  allows you to define certain
variables which will affect the pages created. This should avoid having
to create different templates for every situation and allow improvements
to be easier to implement. The variables currently available and their
purpose are:
<dl>
<dt>NOHEADER="yes"
	<dd>Removes the initial header from the page. A custom header
   can, of course, be included in the body.
<dt>NOHOMELINK="yes"
	<dd>Removes the link at the bottom of the page back to the
	main Debian page.
<dt>NOLANGUAGES="yes"
	<dd>Removes the links at the bottom of the page to versions in
	other languages.
<dt>NOCOPYRIGHT="yes"
	<dd>Removes the copyright notice at the bottom of the page.
</dl>

<p>An example of the use of this is in the ports pages which have
their own headers. ports/arm/index.wml uses:
<pre><protect>
#use wml::debian::template title="ARM Port" NOHEADER="yes"
</protect></pre>

<p>If you want to do something that can't be done using the existing
templates, first consider extending one of them. If it isn't
possible to extend one in a backward compatible way, try to make
the new template a superset of an existing one so the pages can
be converted to it at the next major upgrade (hopefully never more
than every 6 months).

<p>If you are creating a page that is generated by a script or has
little prose, consider using the slices filter within wml to ease
the task of keeping translations up to date. A good example of this
is in <kbd>distrib/vendors.wml</kbd>. New vendors can be added to this page and the
addition will be generated in every language automatically.
<kbd>vendors.wml</kbd> includes <kbd>vendors.CD</kbd> which contains the actual
list of vendors. This file in turn includes <kbd>distrib/vendors.CD.def</kbd>
which contains the definition of all the phrases in <kbd>vendors.CD</kbd>.
Translators simply need to add translations wherever there is a
slice, e.g.
<pre><protect>
	[EN:Country:]\
	[ES:Pa-is:]\
	[DE:Land:]\
</protect></pre>

<h3>Adding a new directory</h3>
Do not create a directory with the name <code>install</code>.
This confuses make and the pages in that directory will not be
updated automatically.

<p>Below is an annotated example of adding a new directory to the web site.
<pre>
   mkdir foo
   cvs add foo
   cd foo
   cp ../intro/Makefile .
   cvs add Makefile
</pre>
Edit the Makefile. WMLBASE should be the location of the top of the English
directory relative to this one. CUR_DIR is the location of the current
directory relative to WMLBASE. Then
<pre>
   cd ..
</pre>
Edit the Makefile and add the directory you just created to
the SUBDIR variable. This will add the directory to the build for when
make is run.

<p>Finally, <code>cvs commit Makefile foo</code>
to commit all the changes just made to the main repository.
