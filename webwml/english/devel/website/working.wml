#use wml::debian::template title="How to Work on the Debian Web Pages"

<h2>Adding New Pages</h2>

<p>Adding new pages to Debian is quite easy. All the work of getting the
header and footer right are done using WML. All you need to do is to include
a line such as the following at the top of the new file:

<pre><protect>
#use wml::debian::template title="TITLE OF PAGE" 
</protect></pre>

<p>followed by the body. All pages should use the
<code>wml::debian::template</code> template file unless they are using
a special one created just for that section, e.g. the News or security items.

<p>The templates we have allow you to define certain variables which will
affect the pages created. This should avoid having to create different
templates for every situation and allow improvements to be easier to
implement. The variables currently available and their purpose are:
<dl>
<dt>BARETITLE="true"
	<dd>Removes the "Debian GNU/Linux --" part that is usually prepended
	to all the &lt;title&gt; tags.
<dt>NOHEADER="true"
	<dd>Removes the initial header from the page. A custom header
	can, of course, be included in the body.
<dt>NOHOMELINK="true"
	<dd>Removes the link back to the main Debian page, which is normally
	added to the bottom of the page.
<dt>NOLANGUAGES="true"
	<dd>Removes the links to versions in other languages, which are
	normally added to the bottom of the page.
<dt>GEN_TIME="true"
	<dd>Sets the date on the resulting files to the timestamp of the
	generated files, instead of the timestamp of the source file.
<dt>NOCOPYRIGHT="true"
	<dd>Removes the copyright notice at the bottom of the page.
</dl>

<p>Note that you can use any string as the value of these variables,
"true", "yes", "foo", it doesn't matter.

<p>An example of the use of this is in the ports pages which have
their own headers. <code>ports/arm/index.wml</code> uses:

<pre><protect>
#use wml::debian::template title="ARM Port" NOHEADER="yes"
</protect></pre>

<p>If you want to do something that can't be done using the existing
templates, first consider extending one of them. If it isn't
possible to extend one in a backward compatible way, try to make
the new template a superset of an existing one so the pages can
be converted to it at the next major upgrade (hopefully never more
than every 6 months).

<p>If you are creating a page that is generated by a script or has
little prose, consider using the slices filter within wml to ease
the task of keeping translations up to date. A good example of this
is in <kbd>distrib/vendors.wml</kbd>. New vendors can be added to this page
and the addition will be generated in every language automatically.
<kbd>vendors.wml</kbd> includes <kbd>vendors.CD</kbd> which contains the actual
list of vendors. This file in turn includes <kbd>distrib/vendors.CD.def</kbd>
which contains the definition of all the phrases in <kbd>vendors.CD</kbd>.

<p>Translators simply need to add translations wherever there is a slice,
e.g.
<pre><protect>
	[EN:Country:]
	[ES:Pa-is:]
	[DE:Land:]
</protect></pre>

<h2>Adding a new directory</h2>

<p>Note: do <strong>not</strong> create a directory with the name
<code>install</code>. This confuses make and the pages in that directory
will not be updated automatically.

<p>Below is an annotated example of adding a new directory to the web site.
<pre>
   mkdir foo
   cvs add foo
   cd foo
   cp ../intro/Makefile .
   cvs add Makefile
</pre>

<p>Edit the Makefile in the parent directory and add the directory you just
created to the <code>SUBS</code> variable. This will add the directory to
the build for when make is run.

<p>Finally, commit all the changes just made to the repository with
<pre>
  cvs commit Makefile foo
</pre>
