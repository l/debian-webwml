#use wml::debian::template title="Autobuilder network" BARETITLE="true"

<p>The autobuilder network is a Debian development that helps speed
up package recompilations for all the architectures
<a href="$(HOME)/ports/">Debian currently supports</a>. This
network is made up of several machines that use a specific software
package called <em>buildd</em> to pick up packages from the Debian
archive and rebuild them for the target arquitecture.

<h2>Why is the autobuilder network needed?</h2>

<P>The Debian distribution supports <a href="$(HOME)/ports">quite a few architectures</a>,
but the package maintainers usually only compile binary versions for
a single architecture (usually i386).
Developers for other architectures have to watch out for new
versions of packages and recompile them if they want to stay
up-to-date with the Intel distribution.

<P>
As Debian/m68k (the first non-Intel port) started, all this was done
manually: developers watched the upload mailing list for new packages and
took some of them for building. Coordination that no package
is built twice by different people was done by announcing on a mailing
list. It's obvious that this procedure is error-prone and
time-consuming. This was, however, the usual way for keeping non-i386
distributions current for a long time.

<P>
The build daemon system automates most of this process. It consists of
a set of scripts (written in Perl and Python) that have evolved over
time to help porters with various tasks. They have finally developed
into a system that is able to keep non-i386 Debian distributions
up-to-date nearly automatically.


<h2>How does buildd work?</h2>

<P><em>Buildd</em> is the name usually given to the software used by the 
autobuilder network, but it's really made of different parts:

<dl>

<dt><A href="http://m68k.debian.org/buildd/getting.html">wanna-build</A></dt>
<dd>
a tool that helps coordinate package (re)building through a database
that keeps a list of packages and their status. There is one central
database per architecture  that stores package states, versions, and some other
information.
</dd>

<dt><a href="http://m68k.debian.org/buildd/getting.html">buildd</a></dt>
<dd>
a daemon that periodically checks the database maintained by
<em>wanna-build</em> and calls <em>sbuild</em> to build the packages.
It keeps tracks of buidling failures and successes, and 
will also upload packages after the build log
has been acknowledged by the administrator.
</dd>

<dt><A href="http://packages.debian.org/sbuild">sbuild</A></dt>
<dd>
is responsible for the actual compilation of packages in isolated chroots.
It mainly uses standard Debian tools for this, but also takes care of
source dependencies and some other minor quirks.
</dd>

<dt><a href="http://packages.debian.org/quinn-diff">quinn-diff</a></dt>
<dd>
Feeds the wanna-build database with new
packages. It compares the available package versions for two
architectures and outputs the differences (comparing the 
a Sources file and a Package file).
More information on quinn-diff is available 
<a href="http://buildd.debian.org/quinn-diff/">here</a>.
</dd>

<dt>andrea</dt>
<dd>
A tool that generates some source dependencies automatically and
merges these data with dependencies added manually.
</dd>

</dl>

<P><em>Wanna-build</em>'s documentation provides an overview of this 
system, which is included here for clarity:
</p>
<!-- TODO: include the images based on the xfig figures -->

<hr>
<pre>
Quinn Diff -----          -------> Build Daemon <-------> Adminstrator
                \        /              ^
                 \      /                \-------------
                  |    |                               \
                  V    V                               V
               Wanna Build                          sbuild <--------- Andrea
                  ^    ^                               ^
                  |    |                              /
                 /      \                            /
                /        \                          /
Packages -------          -------> Human <----------
</pre>
<hr>

<h2>What does a Debian developer need to do?</h2>

<P>Actually, an average Debian developer does not need to explicitly use
the buildd network. Whenever he uploads a package to the archive
(binary compiled to a given architecture) it will be added to the database
for all architectures (in state <em>Needs-Build</em>). 
Build machines will query the build database for packages in this state,
and will routinely take packages from that list. The list is 
is prioritized by previous compilation state, priority, section, and finally
package name.

<P>If the build succeeds in all architectures, the maintainer will not
need to do anything. All those binary packages will be uploaded to the
architecture main site. If the build does not succeed the package will
enter a special state (<em>Failed</em> or <em>Dep-Wait</em>, if they
depend on specific build dependencies which are not available). 
The autobuilder administrators will review packages which fail the build
and will report back to the maintainer, usually, opening up a bug in the
Bug Tracking System.

<P>Sometimes a package takes a long time to build for a given architecture
and that holds the package from entering <a href="$(HOME)/devel/testing">
testing</A>. Unfortunately, the package will need to wait until a machine 
picks it up. Buildd administrators will not accept requests to speed
up the building of a package since the priority list has already been
established. A maintainer, however, can access a 
<a href="http://db.debian.org/machines.cgi">Debian development machine</a>
and manually build the package there.

<P>You can check that status of the different buildds attempt
of the packages that belong to any given maintainer by checking the 
<a href="http://buildd.debian.org/bymaint.php">buildd logs</a>. 
These logs are also linked from the Packages' Maintainer Overview.

<P>For more information on the different states a package can be
please read <a href="wanna-build-states">wanna-build-states</a>.

<h2>Where can I find additional information?</h2>

<P>Of course, both the documentation and the source code available for these
different tools are the best way to find out how the buildd network
works. Additionally, the
<a href="$(HOME)/doc/manuals/developers-reference/ch-pkgs#s-porting">
Porting and being ported</a> section of the 
<a href="$(HOME)/doc/manuals/developers-reference/">Debian Developers
Reference</a> provides complementary information on how does it work and
it also provides some information on
<a href="$(HOME)/doc/manuals/developers-reference/ap-tools#s-tools-builders">
package builders</a> and
<a href="$(HOME)/doc/manuals/developers-reference/ap-tools#s-tools-porting">
porting tools</a> which are involved in the process of both setting
up and maintaing the buildd network.

<h2>How can I setup my own auto-builder node?</h2>

<P>There are several reasons why a developer (or user)
might want to setup and run an autobuilder:

<ul>
<li>To locally test if the package <tt>Build-Depends</tt> are properly
defined (i.e. by compiling the package in the auto-builder enviroment).
<li>To help in developing a port to a given architecture (when autobuilders
are needed)
<li>To assess the impact of a given compiler optimisation or patch
by recompiling a large subset of packages.
<li>To run tools that analyse packages for known mistakes and need to
be run in compiled packages. This is even needed when doing source
code analysis, for example, as a work-around for packages
using <tt>dpatch</tt>.
</ul>

<P>You can read more information on how you can
<a href="setting-up">setup an autobuilder</a>.

<HR>
<P><SMALL>This introduction to the autobuilder network was written
with bits and pieces provided by Roman Hodez, 
Christian T. Steigies, Wouter Verhelst, Andreas Barth, 
Francesco Paolo Lovergine and Javier Fern&aacute;ndez-Sanguino</SMALL></P>
