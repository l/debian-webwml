#use wml::debian::template title="Outline of operation of the autobuilder network" BARETITLE="true"

<P>
At the heart of the system is the <TT>wanna-build</TT> database, which
keeps track of package versions and states. <TT>quinn-diff</TT>
compares the package lists for the target architecture against the list of source packages every
day and feeds a list of packages that need re-compilation into the
database where they enter state <TT>Needs-Build</TT>.

<P>
All the build daemons (there can be more than one) query the database
regularly for such packages and take some of them so that they go
into state <TT>Building</TT>. Of course, humans also can take
packages, e.g. in special cases where automatic compilation isn't
possible. Here we also see the second purpose of <TT>wanna-build</TT>:
It ensures that the same version of a package won't be built twice.

<DIV ALIGN="CENTER"><A NAME="34"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure:</STRONG>
Package States and Transitions</CAPTION>
<TR><TD><IMG SRC="scheme.png" alt="Autobuilder scheme"></TD></TR>
</TABLE>
</DIV>

<P>
If everything goes well, a finished package can be uploaded later,
which is another state <TT>Uploaded</TT>. After that it will
eventually be installed into the Debian archive so it appears in the
updated package list for the target architecture. This list will be
merged into the database, so the package will go to state
<TT>Installed</TT> and remains there until the next version of the source package.

<P>
There are several other states; they include: <TT>Failed</TT> is for
packages that failed to build due to errors in the sources, and the
errors are expected to be fixed in a successor version (after
reporting the problem, of course). So a new version will directly
enter <TT>Needs-Build</TT>, but with a warning that something was
wrong with the previous version. Along with this state an error
description is stored. State <TT>Dep-Wait</TT> is used when a package
needs some other packages to be compiled but those aren't available
yet and must be built before. This state stores a list of required
packages and maybe versions, and if all of them are known to be
installed the state changes back to <TT>Needs-Build</TT>.

<P>
As we have already seen, the build daemon takes packages from the
database for compiling them. Let's look a bit closer: If it has some
packages to build, it uses <TT>sbuild</TT> for the actual compilation
process, and for each build a log is mailed to the maintainer of the
daemon. He reviews the log and decides what to do with the package:
upload it, set it to <TT>Failed</TT> or <TT>Dep-Wait</TT>, make some
additions to the source dependency list and retry it, etc...
If a positive acknowledge is received, the daemon moves it to an
upload directory, from where all packages are uploaded by a cron job.

<P>
Looking at the log files is the only human intervention in the whole
process if no errors happen. There are two good reasons for not
further automating this: First, sometimes builds end with an ``OK''
result but the build nevertheless failed for reasons that are
invisible to the machine. And second, directly uploading would require
to automatically PGP-sign the resulting files with a key without
passphrase on the build machine. I considered this an unacceptable
security hole.

<P>
The build script <TT>sbuild</TT> more or less just calls some standard
Debian tools to compile the sources. It also helps with some common
tasks and bookkeeping, but the really special thing about it are the
source dependencies. Often packages need other packages installed for
compilation, for example compilers and libraries. It is not practical
to have all these packages installed all the time, and often it's not
even possible because of conflicts. The source dependencies now simply
tell <TT>sbuild</TT> for each package which other packages are needed.
It can then automatically install them before the build and remove
them again afterwards.

<P>
The source dependency list can partially be generated automatically,
too, by looking at the dependencies of the binary packages generated
by the source. This is <TT>andrea</TT>'s job, which analyses the i386
package list for dependencies and maps library packages to development
package names. It also merges the results with manual additions for
things that can not be auto-generated, like compilers or special
tools.

<HR>
<P><small>Content developed by Roman Hodek for the
6th International Linux-Kongress 1999</small></p>
