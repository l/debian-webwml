#use wml::debian::template title="Central Debian translation statistics"

<p>These pages show the number of packages in Debian that are ready to be
translated, and how many are actually translated.

<p>The pages are generated by scripts written by Martin Quinson, one of the
French Debian translators.

<p>Be aware that this process is only a part of i18n and l10n.
`I18n' stands for internationalization, and `l10n' for localisation.
To internationalize a program is to allow its l10n, and to localize is to do
everything so that the 
program is aware of the specification of each country. It has several parts:

<dl compact>
 <dt>LC_COLLATE
  <dd>How to sort text.

 <dt>LC_CTYPE
  <dd>Which charset to use.

 <dt>LC_MONETARY
  <dd>How to represent money.

 <dt>LC_NUMERIC
  <dd>How to represent numbers.

 <dt>LC_TIME
  <dd>How to represent the date.

 <dt>LC_MESSAGES
  <dd>In which language to display the messages.
</dl>

<p>So, you can see that to translate all messages of an application is only a
part of this process, but it's the only part these scripts can monitor. On the 
rest of these pages, I may use the term i18n or l10n for the LC_MESSAGES part
of i18n or l10n, I know it's wrong, but it's so long to write it right every
time... Sorry. :)

<p>An internationalized program is one that has been given the ability to be
translated when the source was modified to be able to use catalogs of
translations for its messages. Such a program is said to be translated to a
given language when these catalogs have been translated to that language.

<p>There are at least two systems of messages catalogs:

<ul>
<li>NLS: use the catgets() and associated functions from POSIX.
<li>GNU: use the gettext() and associated functions from GNU.
</ul>

<p>I won't go in details between the two solutions. However, even though
this script can detect programs in both categories, the programs using
gettext are much better supported. For example, I didn't know how to stat
(i.e. see how well it is translated) a catgets program.

<p>The programmer also usually organizes their package following a 
standard directory organization. This script detects three of them:

<ul>
<li>GNU: all the po files are in a directory named `po', and this directory 
also contains the complete mechanism to compile it (files named `Makefile.in.in'
and `POTFILES.in')
<li>NLS: all the NLS files are in a `nls' directory (i.e. there is a `nls' dir)
<li>full: the i18n info is stored in several directories, one per language. 
Each of them contains po files, man pages and other related material. (Please do 
not flame me because I name this organization `full' :)
</ul>

<p>Now you know enough to browse the result of the script. You
can choose between several forms:

<ul>
 <li>State of `l10n' in PO files, i.e. how well are the packages translated:
 <ul>
  <li><a href="po/index">language list</a>
  <li><a href="po/rank">ranking between languages</a>
  <li><a href="po/todo">packages not i18n'ed</a>
 </ul>
 <li>State of `l10n' in Debconf template files
 <ul>
  <li><a href="templates/index">language list</a>
  <li><a href="templates/rank">ranking between languages</a>
  <li><a href="templates/todo">packages without Debconf support</a>
 </ul>
</ul>

