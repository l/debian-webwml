#use wml::debian::template title="Translation center of Debian"

<p>The purpose of this script generated page is to show the number of packages
in Debian that are ready to be translated, and how many are actually
translated.</p>

<p>Be careful, this process is only a part of i18n and l10n.
`I18n' stands for internationalization, and `l10n' for localisation.
To internationalize a program is to allow its l10n, and to localize is to do
everything so that the 
program is aware of the specification of each country. It has several parts:

<dl compact>
 <dt>LC_COLLATE
  <dd>How to sort text.

 <dt>LC_CTYPE
  <dd>Which charset to use.

 <dt>LC_MONETARY
  <dd>How to represent money.

 <dt>LC_NUMERIC
  <dd>How to represent numbers.

 <dt>LC_TIME
  <dd>How to represent the date.

 <dt>LC_MESSAGES
  <dd>In which language to display the messages.
</dl>

<p>So, you can see that to translate all messages of an application is only a
part of this process, but it's the only part my scripts can monitor. In the 
rest of this pages, I may use i18n or l10n for the LC_MESSAGES part of i18n or
l10n, I know it's wrong, but it's so long to write it right every time...
 Sorry. :)

<p>A program given the ability to be translated when the source was 
modified to be able to use catalogs of translations for its messages. It is 
said translated to a given language when this catalogs have been translated 
to this language.</p>

<p>There are at least two systems of messages catalogs:

<ul>
<li>nls: use the catgets() and associated functions from POSIX.
<li>gnu: use the gettext() and associated functions from GNU.
</ul>

<p>I won't go in details between the two solutions. Let me just say that,
even if this script can detect programs in both categories, the support is much 
better for programs using gettext. For example, I don't know how to stat (ie,
see how well translated) a catgets program.</p>

<p>The programmer also usualy organizes their package following a 
standard directory organization. This script detects three of them:

<ul>
<li>gnu: all the po files are in a directory named `po', and this directory 
also contains all the mechanism to compile it (files named `Makefile.in.in'
and `POTFILES.in')
<li>nls: all the nls files are in a `nls' directory (ie, there is a `nls' dir)
<li>full: all i18n info are stocked in several directory, one per language. 
Each one contains po files, man pages and other related material. (Please do 
not flame me because I name this organization `full' :)
</ul>

<p>Now, you know enough to browse the result of the script. You
can choose between several forms:</p>
<ul>
 <li>State of `i18n', i.e, which packages are ready to be translated:
 <ul>
  <li><a href="i18n">section by section</a>
 </ul>
 <br><br>
 <li>State of `l10n', i.e how well packages are translated:
 <ul>
  <li><a href="l10n">package by package, in a summarized form</a>
  <li><a href="l10n-packages">package by package, in a detailed form</a>
  <li><a href="l10n-errors">per categories of errors and warnings</a>
  <li><a href="l10n-rank">ranking between languages</a>
  <li><a href="l10n-lang">List of all languages, to download the material to translate</a>
 </ul>
</ul>
