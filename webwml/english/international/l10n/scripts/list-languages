#!/usr/bin/perl -w
push (@INC,'scripts');
require "utils.pl"; # my librarie

my %data; #the hash were we put all the infos
          # $data{$pkg_name}=("version","section","priority","type",
	  #                   "stats"=>(<code lang>=>stats),"err"=>@errors,"warn"=>@warnings)

sub usage {
    die "Usage: $0 db\n";
}

my $DB_FILE=shift || usage();

my ($succeded,$date,$result) = read_data ($DB_FILE);
if ($succeded) {
    %data=%{$result};
} else {
  exit 0;
}

my %langs;
foreach my $pkg (keys %data) {
    foreach my $lang(keys %{$data{$pkg}{"stats"}}) {
	# search po material
	$lang=normalize_lang($lang);
	$langs{'po'}{$lang} = $langs{'all'}{$lang} = 1;
	
	# search templates material
	if (defined $data{$pkg}{'templates'}) {
	    foreach (@{$data{$pkg}{'templates'}}){
		if (m,^([^:]*):([^:]*):([^:]*):([^:]*)$,) {
		    my $lang=normalize_lang($2);
		    $langs{'templates'}{$lang} = $langs{'all'}{$lang} = 1;
		}
	    }
	}
    }
}

foreach my $material (sort keys %langs) {
    print "$material: ";
    foreach (sort keys %{$langs{$material}}) {
	print "$_ ";
    }
    print "\n";
}

sub normalize_lang {
    my $lang = shift;
    if ($lang =~ m,^(..)_(..)$,) {
	return lc($1).'_'.uc($2);
    } elsif ($lang =~ m,^(..)$,) {
	return lc($1);
    }
    return $lang;
}

