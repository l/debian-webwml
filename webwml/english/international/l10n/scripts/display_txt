#! /usr/bin/perl -w

use strict;
use Getopt::Long; #to parse the args

my $progname= $0; $progname= $& if $progname =~ m,[^/]+$,;

my $TRANSMONITOR_VERSION = "0.1"; #External Version Number
my $BANNER = "Translation Monitor -- text output programm v$TRANSMONITOR_VERSION"; # Version Banner - text form
my $DB_FILE="../data/unstable";

my $list_file=undef;
my $take_debian=0;
my $details=0;

use lib ($0 =~ m|(.*)/|, $1 or ".") ."/../../../../Perl";
use Debian::L10n::Db;

sub syntax_msg {
    my $msg = shift;
    if (defined $msg) {
	print "$progname: $msg\n";
    } else {
	print "$BANNER\n";
    }
    print 
"Syntax: $0 [options] [lang]+
General options:
    -h, --help                display short help text
    -V, --version             display version and exit
Configuration options:
    -v,--verbose              Display even if nothing is translated to that language
    --debian                  Only take debian specific packages
    --list=file               Only handle the packages listed in the provided file
    --db=DB_FILE              use DB_FILE as database file 
                                (instead of $DB_FILE)
";
    if (defined $msg) {
	exit 1;
    } else {
	exit 0;
    }
}

# Display Version Banner
# Options: -V|--version, --print-version
sub banner {
  if ($_[0] eq 'print-version') {
    print "$TRANSMONITOR_VERSION\n";
  } else {
    print "$BANNER\n";
  }
  exit 0;
}

# Hash used to process commandline options
my %opthash = (# ------------------ general options
	       "help|h" => \&syntax_msg,
	       "version|V" => \&banner,
	       "print-version" => \&banner,
	       
	       # ------------------ configuration options
               "verbose|v" => \$details,
               "debian" => \$take_debian,
	       "db=s" => \$DB_FILE,
               "list=s" => \$list_file,
	    );

# init commandline parser
Getopt::Long::config('bundling', 'no_getopt_compat', 'no_auto_abbrev');

# process commandline options
GetOptions(%opthash)
    or syntax_msg("error parsing options");



#-----------------------------------------------------------------------------
#                        The main program                                     
#-----------------------------------------------------------------------------
###
### initialisation
###
my $data = Debian::L10n::Db->new();
$data->read($DB_FILE);

(@ARGV > 0) or &syntax_msg("Nothing to do !");
my $arg;
my @todo_lang;
while ($arg = shift @ARGV) {
    push @todo_lang,$arg;
}
my @todo_pkg;
if (defined($list_file)) {
    open LIST, "$list_file" || die "Impossible to read the list file $list_file\n";
    while (<LIST>) {
	chomp;
	next unless $_;
	if ($data->has_package($_)) {
	    push @todo_pkg, $_;
	} else {
	    print "['$_' is not in the DB, skipped]\n";
	}
    }
    close LIST;
} else {
    @todo_pkg = $data->list_packages();
}
my ($pkg,$po_p,$po_d,$templ_p,$templ_d,$podeb_p,$podeb_d,$man);

format STDOUT_TOP =
                    __________________________________________________________________
 __________________|________po_________|_____templates_____|____po-debconf_____| # man|
|______name________|__%__|___details___|__%__|___details___|__%__|___details___|______|
.

format STDOUT =
|@<<<<<<<<<<<<<<<< |@||| |@||||||||||| |@||| |@||||||||||| |@||| |@||||||||||| |@|||| |
$pkg,               $po_p,  $po_d,  $templ_p,  $templ_d,  $podeb_p, $podeb_d, $man;
.

map {
    my $lang=$_;
    print "Status of the packages in $lang\n\n";
    foreach $pkg (sort @todo_pkg) {
	# Take only packages having material
	next unless $data->has_po($pkg) || $data->has_templates($pkg) || $data->has_podebconf($pkg);

	# Take only debian packages
	if ($take_debian && !($data->has_upstream($pkg) && $data->upstream($pkg) eq "debian")) {
	    next;
	}

	# Take only packages having material in this language
	my $found=0;
	my ($po_score,$templ_score,$podeb_score)=(' ',' ',' ');
	$man=' ';
	if ($data->has_po($pkg)) {
	    $po_score='---';
	    $found = 1 if ($details);
	    foreach my $line (@{$data->po($pkg)}){
		my ($pofile, $langfound, $stat) = @{$line};
		if ($langfound eq $lang) {
		    $found = 1;
		    $po_score = $stat;
		}
	    } 
	}
	if ($data->has_templates($pkg)) {
	    $templ_score='---';
	    $found = 1 if ($details);
	    foreach my $line (@{$data->templates($pkg)}){
		my ($pofile, $langfound, $stat) = @{$line};
		if ($langfound eq $lang) {
		    $found = 1;
		    $templ_score = $stat;
		}
	    } 
	}
	if ($data->has_podebconf($pkg)) {
	    $podeb_score='---';
	    $found = 1 if ($details);
	    foreach my $line (@{$data->podebconf($pkg)}){
		my ($pofile, $langfound, $stat) = @{$line};
		if ($langfound eq $lang) {
		    $found = 1;
		    $podeb_score = $stat;
		}
	    } 
	}
	$po_p=output_percent($po_score);
	$po_d=output_details($po_score);
	$templ_p=output_percent($templ_score);
	$templ_d=output_details($templ_score);
	$podeb_p=output_percent($podeb_score);
	$podeb_d=output_details($podeb_score);

	# Search for mans
	if ($data->has_man($pkg)) {
	    my $en=0;
	    my $fr=0;
	    foreach my $line (@{$data->man($pkg)}){
		my ($name, $langfound) = @{$line};
		$en++ if ($langfound eq 'english');
		$fr++ if ($langfound eq 'french');
	    } 
	    $man="$fr/$en";
	}
	
	write if ($found || $man ne ' ');
    }
print "|__________________|_____|_____________|_____|_____________|_____|_____________|______|\n";
print "\n\n";
print "When there is some ---, that means that the material exists, but is not \n".
      "translated to this language.\n\n";
print "Significance of the 'details' columns:\n".
      "   [# translated strings]/[# fuzzy translation]/[# untranslated strings]\n\n";
print "Significance of the 'man' column: [# french pages]/[# english pages]\n";
print "WARNING: 'french' is hardcoded in that script for now\n";
    
} @todo_lang;


sub output_percent {
    my $stats=shift;
    my $t = "0";
    my $u = "0";
    my $f = "0";
    my $percent;

    if ($stats =~ /([0-9]*)t/) {  $t=$1;  }
    if ($stats =~ /([0-9]*)u/) {  $u=$1;  }
    if ($stats =~ /([0-9]*)f/) {  $f=$1;  }
    $percent = calc_percent($t,$t+$u+$f);
    if ($percent eq "NaN") {
	return $stats;
    }
    return "$percent\%";
}
sub output_details {
    my $stats = shift;
    my $t = "0";
    my $u = "0";
    my $f = "0";
    my $percent;

    if ($stats =~ /([0-9]*)t/) {  $t=$1;  }
    if ($stats =~ /([0-9]*)u/) {  $u=$1;  }
    if ($stats =~ /([0-9]*)f/) {  $f=$1;  }
    return ($t+$f+$u == 0 ? $stats : "$t/$f/$u");
}

sub calc_percent{
    my $up=shift;
    my $down=shift;
    my $res;

    if ($down==0) {
	return "NaN";
    }
    $res = $up/$down*100;
    $res =~ s/^([0-9]*)\..*/$1/;
    return $res;
}
