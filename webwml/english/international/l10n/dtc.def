#use wml::debian::common_tags

<bind-gettext-domain domain="l10n" />

#
# Some common tags
#

<define-tag file whitespace=delete>
  <gettext domain="l10n">File</gettext>
</define-tag>

<define-tag package whitespace=delete>
  <gettext domain="l10n">Package</gettext>
</define-tag>

<define-tag score whitespace=delete>
  <gettext domain="l10n">Score</gettext>
</define-tag>

<define-tag translator whitespace=delete>
  <gettext domain="l10n">Translator</gettext>
</define-tag>

<define-tag team whitespace=delete>
  <gettext domain="l10n">Team</gettext>
</define-tag>

<define-tag date whitespace=delete>
  <gettext domain="l10n">Date</gettext>
</define-tag>

<define-tag status whitespace=delete>
  <gettext domain="l10n">Status</gettext>
</define-tag>

<define-tag strings whitespace=delete>
  <gettext domain="l10n">Strings</gettext>
</define-tag>

<define-tag bug whitespace=delete>
  <gettext domain="l10n">Bug</gettext>
</define-tag>


<define-tag langcountryoutput whitespace=delete>
  <preserve lang country />
  <set-var lang=%0 country=%1 />
  <gettext domain="l10n"><get-var lang />, as spoken in <get-var country /></gettext>
  <restore lang country />
</define-tag>

<define-tag Unknown_Language whitespace=delete>
  <gettext domain="l10n">Unknown language</gettext>
</define-tag>

#
# Footer
#

<define-tag show-data-date whitespace=delete>
  <preserve date />
  <set-var date=%0 />
  <gettext domain="l10n">This page was generated with data collected on: <get-var date />.</gettext>
  <restore date />
</define-tag>

<define-tag warn-data-outdated whitespace=delete>
  <gettext domain="l10n">Before working on these files, make sure they are up to date!</gettext>
</define-tag>

#
# Tags for po sub-directory
#

<define-tag pkg-section whitespace=delete>
  <preserve name />
  <set-var name=%0 />
  <gettext domain="l10n">Section: <get-var name /></gettext>
  <restore name />
</define-tag>

#
#  DO NOT TRANSLATE ANYTHING BELOW
#

<define-tag po4a-table endtag=required>
<table border=1>
<tr>
  <th><package></th>
  <th><score></th>
  <th><file></th>
  <th><translator></th>
  <th><team></th>
</tr>
%body
</table>
</define-tag>

<define-tag po-table endtag=required>
<table border=1>
<tr>
  <th><package></th>
  <th><score></th>
  <th><file></th>
  <th><translator></th>
  <th><team></th>
</tr>
%body
</table>
</define-tag>

<define-tag podebconf-table endtag=required>
<table border=1>
<tr>
  <th><package></th>
  <th><score></th>
  <th><file></th>
  <th><translator></th>
</tr>
%body
</table>
</define-tag>

<define-tag podebconf-table-status endtag=required>
<table border=1>
<tr>
  <th><package></th>
  <th><score></th>
  <th><file></th>
  <th><translator></th>
  <th><status></th>
  <th><translator></th>
  <th><date></th>
  <th><bug></th>
</tr>
%body
</table>
</define-tag>

<:
use lib '$(ENGLISHDIR)/../Perl';
use Locale::gettext;

sub language_name {
        my $lang=shift;
        my $country=undef;

	# make the build fail if isoquery is not available
	`isoquery >/dev/null`;

	$lang  =~ s/@.*$//;
        if ($lang =~ m,^(..)_(..)$,) {
                $lang=$1;
                $country=$2;
        }
        if (`isoquery -i 639 --name $lang 2>/dev/null`) {
		$lang = `isoquery -i 639 -n $lang`;
		chomp $lang;
		$lang =~ s/^.*\t//;
		$lang = dgettext("iso_639", "$lang");
		# #624476 workaround: French typography expect languages to start with a lowercase
		$lang = lcfirst $lang if ($(CUR_LANG) eq 'French');
        } else {
                return qq(<Unknown_Language>);
        }
        if ((defined $country) && (`isoquery --name $country 2>/dev/null`)) {
		$country = `isoquery --name $country`;
		chomp $country;
		$country =~ s/^.*\t//;
		$country = dgettext("iso_3166", "$country");
	        return "<langcountryoutput $lang $country>";
        } else {
                return $lang;
        }
}
:>

<define-tag language-name whitespace=delete>
<:=language_name('%0'):>
</define-tag>

<define-tag po4a-langs-long>
<:
@po4alangs = ();
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs (use script/list-languages.pl to regenerate it)";
while (<LANGS>) {
        if (s/^po4a:\s+//) {
                @po4alangs = split(' ', $_);
                last;
        }
}
close(LANGS);
print "<ul>\n" if (@po4alangs);
foreach my $l (sort @po4alangs) {
        print "<li>$l &mdash; <a href=\"$l\">".language_name($l)."</a></li>\n";
}
print "</ul>\n" if (@po4alangs);
:>
</define-tag>

<define-tag po4a-langs-short>
<:
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs";
while (<LANGS>) {
        if (s/^po4a:\s+//) {
                foreach my $code (split(' ', $_)) {
                        print " [<a href=\"$code\">$code</a>] ";
                }
                last;
        }
}
close(LANGS);
:>
</define-tag>

<define-tag po-langs-long>
<:
@polangs = ();
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs (use script/list-languages.pl to regenerate it)";
while (<LANGS>) {
        if (s/^po:\s+//) {
                @polangs = split(' ', $_);
                last;
        }
}
close(LANGS);
print "<ul>\n" if (@polangs);
foreach my $l (sort @polangs) {
        print "<li>$l &mdash; <a href=\"$l\">".language_name($l)."</a></li>\n";
}
print "</ul>\n" if (@polangs);
:>
</define-tag>

<define-tag po-langs-short>
<:
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs";
while (<LANGS>) {
        if (s/^po:\s+//) {
                foreach my $code (split(' ', $_)) {
                        print " [<a href=\"$code\">$code</a>] ";
                }
                last;
        }
}
close(LANGS);
:>
</define-tag>

<define-tag podebconf-langs-long>
<:
@podebconflangs = ();
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs";
while (<LANGS>) {
        if (s/^podebconf:\s+//) {
                @podebconflangs = split(' ', $_);
                last;
        }
}
close(LANGS);
print "<ul>\n" if (@podebconflangs);
foreach my $l (sort @podebconflangs) {
        print "<li>$l &mdash; <a href=\"$l\">".language_name($l)."</a></li>\n";
}
print "</ul>\n" if (@podebconflangs);
:>
</define-tag>

<define-tag podebconf-langs-short>
<:
open(LANGS, "< $(ENGLISHDIR)/international/l10n/data/langs")
        || die "Unable to read $(ENGLISHDIR)/international/l10n/data/langs";
while (<LANGS>) {
        if (s/^podebconf:\s+//) {
                foreach my $code (split(' ', $_)) {
                        print " [<a href=\"$code\">$code</a>] ";
                }
                last;
        }
}
close(LANGS);
:>
</define-tag>
