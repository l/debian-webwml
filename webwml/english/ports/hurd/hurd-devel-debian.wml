#use wml::debian::template title="Debian GNU/Hurd --- Development" NOHEADER="yes"
#include "$(ENGLISHDIR)/ports/hurd/menu.inc"

<h1>
Debian GNU/Hurd</h1>
<h2>
Development of the Distribution</h2>
<h3>
Boot Disks</h3>
<p>
Currently, we do not work on native boot disks.  We are laying out
some of the necessary foundations for that, though, and sometimes port
individual necessary packages for that.  If you want to help, work on
the debian-installer project and make sure its components run on the
Hurd.

<h3>
Porting Debian Packages</h3>
<p>
If you want to help the Debian GNU/Hurd port, you should make yourself
familiar with the Debian packaging system.  Once you have done this by
reading the available documentation and visiting the <a
href="$(HOME)/devel/">Developer's Corner</a> you should know how to
extract Debian source packages and build a Debian package. Here is a
crash course for the very lazy people:</p>

<h3>
Obtaining Source and Building Packages</h3>
<p>
Extracting a Debian source package requires the file
<code>package_version.dsc</code> and the files listed in it. You build the
Debian build directory with the command <code>dpkg-source -x
package_version.dsc</code></p>
<p>
Building a package is done in the now existing Debian build directory
<code>package-version</code> with the command <code>dpkg-buildpackage -B -rsudo
"-mMyName &lt;MyEmail&gt;"</code>. Instead <code>-B</code> you can use
<code>-b</code> if you also want to build the architecture independent
parts of the package. You can use <code>-rfakeroot</code> instead
<code>-rsudo</code> if you use the fakeroot package.  You can do
without the <code>-r</code> if you build as user root. You can add
<code>-uc</code> to avoid signing the package with your pgp key.</p>

<h3>
Pick One</h3>
<p>
Which package needs to be worked on?  Well, every package that is not
yet ported, but needs to be ported.  This changes constantly, so
it's preferred to concentrate first on packages with a lot of reverse
dependencies, which can be seen in the package dependency graph
<url "http://people.debian.org/~sthibault/graph-radial.pdf"> updated every day, or on the most-wanted list
<url "http://people.debian.org/~sthibault/graph-total-top.txt">,
or you can pick one of the missing packages at random, or watch out for
autobuilding logs on the debian-hurd-build-logs mailing list, or use the
wanna-build list from
<url "http://people.debian.org/~sthibault/failed_packages.txt.gz"> .
</p>
<p>
Also, check whether work has already been done on
<url "https://alioth.debian.org/tracker/?atid=410472&amp;group_id=30628&amp;func=browse">,
<url "https://alioth.debian.org/tracker/?atid=411594&amp;group_id=30628&amp;func=browse">,
and the BTS.
</p>

<h4>
Packages That Won't Be Ported</h4>
<p>
Some of these packages, or parts of them, might be portable later, but
currently they are considered to be unportable at least.</p>

<ul>
<li>
<code>base/update</code>, because the Hurd does not need an update
daemon (the filesystems sync themselves). To change to sync interval,
you can use <code>fsysopts</code> to adjust the <code>--sync</code>
option. You can set different sync intervals for each file system!
To do this manually, use the <a
href="hurd-doc-utils#syncfs"><code>syncfs</code> utility</a>.</li>
<li>
<code>base/makedev</code>, because the Hurd comes with its own version
of this script. The Debian source package only contains a Linux
specific version.</li>
<li>
<code>base/ld.so</code>, because the Hurd does use the linker that
ships with the GNU C library.</li>
<li>
<code>base/modconf</code> and <code>base/modutils</code>, because
modules are a concept specific to Linux.</li>
<li>
<code>base/netbase</code>, because the remaining stuff that is there
is highly specific to the Linux kernel. The Hurd uses
<code>inetutils</code> instead.</li>
<li>
<code>base/pcmcia-cs</code>, because the Hurd does not have any PCMCIA
support (and even if it had, this package is probably Linux specific).</li>
<li>
<code>base/procps</code>, because this code is specific to the Linux proc
filesystem.</li>
<li>
<code>base/ppp</code> and <code>base/pppconfig</code>, because the
Hurd does not have any PPP support (and even if it had, this package
is probably Linux specific).</li>
<li>
<code>base/setserial</code>, because it is specific to the Linux
kernel. However, with the port of Linux char drivers to GNU Mach, we
might be able to use it.</li>
</ul>

<h3> <a name="porting_issues">
General Porting Issues</a></h3>
<p>
<a href=http://www.gnu.org/software/hurd/hurd/porting/guidelines.html>A list of common issues</a> is available on the upstream website. The following common issues are specific to Debian.</p>
<p>Before attempting to fix something, check whether the kfreebsd* port maybe has some fix already, which just needs to be extended to hurd-i386.</p>

<ul>
<li>
<code>Broken libc6 dependency</code>
<p>
Some packages use an erroneous dependency on <code>libc6-dev</code>. This is incorrect because <code>libc6</code> is specific to some architectures of GNU/Linux. The corresponding package for GNU is <code>libc0.3-dev</code> but other OSes will have different ones. You can locate the problem in the <code>debian/control</code> file of the source tree. Typical solutions include detecting the OS using <code>dpkg-architecture</code> and hardcoding the soname, or better, use a logical OR. eg: <code>libc6-dev | libc6.1-dev | libc0.3-dev | libc0.1-dev | libc-dev</code>. The <code>libc-dev</code> is a virtual package that works for any soname but you have to put it only as the last option.</p></li>
</ul>
