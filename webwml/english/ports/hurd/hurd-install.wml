#use wml::debian::template title="Debian GNU/Hurd &mdash; Installation" NOHEADER="yes"
#include "$(ENGLISHDIR)/ports/hurd/menu.inc"

<h1>Debian GNU/Hurd Installation</h1>
<p>
This document aims to provide an easy and relatively painless set of
instructions on how to get Debian GNU/Hurd up and running with a minimum amount
of effort.
</p>

<p>
It is based in Neal H. Walfield's <q>The Hurd Installation Guide</q>.
Many thanks to Neal for his contribution.
</p>

<p>
Note that some points in this manual are a bit inconvenient because they take a
lot of time and may cause problems. You may prefer the installation over the
<a href="hurd-cd">prepared CD images</a>, especially if you are a beginner.
Even if they are outdated, they usually work. You can still get updates from
the online repositories.
</p>

<h2> 1. Overview </h2>

<p>
The Debian GNU/Hurd distribution, unlike distributions of other operating
systems, does not have a nice installation program. One day it will and maybe
you will help design and implement it; however, until that day, installing
Debian GNU/Hurd requires another operating system, specifically, another
Unix-like system. Users have indicated successful installations using different
flavors of GNU/Linux as well as the BSDs. The minimum requirements of the
bootstrap operating system are the ability: to create an ext2 file system; to
extract a tar archive on to it; and to install GNU Grub.
</p>

<p>
GNU is similar in nature to any Unix-like system: after logging in, the user is
presented with a shell and the familiar Unix VFS (virtual filesystem). Although
GNU tries to be POSIX compliant, it is <q>Not Unix</q>. GNU/Hurd builds upon many of
the Unix concepts and extends them to either add new functionality or to fix
what has been perceived as flaws in the original design. The most noticeable
difference is translators, user space programs which interact with the VFS.
These filesystems do not live in the kernel nor do they need to be run
as root; they only need access to the backing store and the <code>mount
point</code>. Another difference is that processes, rather than having a single
user identity fixed at creation time, have identity tokens which are disjoint
from the process, i.e. they may be added with the appropriate permission from
an authority or destroyed.
</p>

<p>
Being familiar with the Unix environment (and especially GNU userland, found in
popular variants such as GNU/Linux) is an imperative for feeling at ease in
GNU. Having experience with the Debian tools will also prove invaluable to the
configuration and maintenance of a GNU/Hurd box.
</p>

<p>
This guide endeavors to make installing GNU/Hurd as painless a process as
possible. If there are errors, they are most certainly the author's. Please
report them, along with any other suggestions or criticisms, to him; all are
gladly accepted.
</p>


<h2> 2. Real Estate or Finding A Home </h2>

<p>
If you do not have an available partition or an extra hard drive, this can be
the longest step. In this case, you will need to repartition the hard drive.
One solution is to use GNU's partition editor,
<a href="http://packages.debian.org/parted">Parted</a>. It features not only
basic partition editing but also partition resizing and moving functionality.
The manual is quite complete and includes several tutorials.
</p>

<p>
The Hurd supports several extensions to the ext2fs filesystem format. Foremost
among these are passive translators and a fourth set of permission bits for
unknown users (users without an identity--not the other user). To use these
extensions, the owner of the partition must be set to <code>hurd</code>.
<code>mke2fs</code>, unless specifically overridden on the command line, will
set the owner to whatever kernel it is running on. As the Hurd will diligently
respect this setting, care must be taken to set this appropriately or the Hurd
will fail in subtle ways. Be aware that even if a file system is owned by a
particular kernel, others may still use it; they just may not be able to use
certain extensions.
</p>

<p>
To create a filesystem, use <code>mke2fs</code> and pass it <samp><q>-b 4096 -o hurd</q>
</samp> to designate the Hurd as the owner of the new file system. For
instance, assuming the partition is <tt><q>/dev/hda2</q></tt>:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# mke2fs -b 4096 -o hurd /dev/hda2
</pre></td></tr></table>


<h2> 3. The Boot Loader </h2>

<p>
The bootloader of the GNU system is Grub, the GRand Unified Boot loader,
and it is its main purpose to boot the GNU system core (Mach and the Hurd).
Any boot loader that supports the multiboot standard, though, may be used to
load Mach and the Hurd. At the moment (that we're aware of), GNU Grub is the
only bootloader that supports such standard.
</p>

<p>
A word about Grub. Unlike traditional boot loaders on the x86, such as LILO,
Grub is very powerful. It has a command line interface, bootp, dummy terminal
support and a plethora of other features. In addition, it can boot almost any
kernel. If you have ever booted an alpha or sparc, you will understand what
Grub can do. Therefore, do not be scared: Grub is better. You will like it.
You will not go back.
</p>

<p>
It is probably better if you install
<a href="http://packages.debian.org/grub2">Grub</a> before installing the
Hurd, but you can always install it onto your hard drive at a later date.
</p>


<h2> 4. Cross Install </h2>

<p>
The next step is to get a base system. There are several alternatives, if you
are running a Debian system you can use the package crosshurd. Otherwise you
can get an updated base system tarball from any of the mirrors listed at
<url "http://wiki.debian.org/DebianPorts/Mirrors" />.
</p>

<p>
The tarball is set up to extract everything into the current directory.
After the filesystem is mounted, the archive can be extracted.
Assuming that the filesystem is on <tt><q>/dev/hda2</q></tt>, the mount point
is <tt><q>/gnu</q></tt> and archive is in current user's home directory, the
following is required:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# mount -t ext2 /dev/hda2 /gnu
 \# cd /gnu
 \# tar --same-owner -xvjpf ~/gnu.tar.bz2
</pre></td></tr></table>


<h2> 5. Booting GNU/Hurd </h2>

<p>
All is now in readiness to boot GNU/Hurd for the first time. After verifying
that the Grub boot disk is in the drive, reboot. If all goes well, either a
Grub menu or command line will be displayed. If presented with a menu, press
<kbd>c</kbd> to go to the command line.
</p>

<p>
First, GNU Mach needs to be loaded. This requires knowing the filesystem and
the path to GNU Mach. Grub uses a partition nomenclature that is a bit
different from both Linux and the Hurd:
both IDE and SCSI drives are named <tt><q>(hdN,M)</q></tt>. <code>N</code> is the
drive number (zero based) as enumerated by the BIOS. That is, Grub makes no
distinction between IDE and SCSI disks. <code>M</code> identifies the partition
on the drive. It is also zero based index. If this sounds confusing, relax:
Grub is also helpful.
</p>

<p>
To determine on which filesystem a particular file resides, Grub provides the
<code>find</code> command. When this command is issued along with a filename,
Grub searches on each filesystem for the specified file and prints where it was
found. For example, to search for the kernel, <tt><q>/boot/gnumach.gz</q></tt>:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
   grub&#62; find /boot/gnumach.gz
   (hd0,0)
</pre></td></tr></table>

<p>
Here, Grub is indicates that <tt><q>/boot/gnumach.gz</q></tt> is on
<tt><q>(hd0,0)</q></tt>.
</p>

<p>
Before loading the kernel, at least one option, the root partition, must be
specified on the command line. This will be used by the Hurd itself (i.e. not
Grub). As such, it must be in terms that the Hurd can understand.
</p>

<p>
GNU Mach enumerates disks starting at zero. IDE drives are prefixed with
<code>hd</code>, while SCSI disks are prefixed with <code>sd</code>. Like
Linux, drives are number by their position on the controller. For instance, the
primary master is <code>hd0</code> and the secondary slave is <code>hd3</code>.
Partitions use the BSD slice naming convention and append <code>sM</code> to
the drive name to indicate a given partition. Note that <code>M</code> is a
one, not zero, based index. The slice number is simple to calculate: just
increment what was used for Grub by one.
</p>

<p>
Since the Hurd has not yet been configured, it must be started in single user
mode. Adding a <samp><q>-s</q></samp> to the kernel command line is all that is
required.
</p>

<p>
Assuming that the first drive (i.e. <tt><q>(hd0)</q></tt>) is the master on the
secondary controller, we would have:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
   grub&#62; kernel (hd0,0)/boot/gnumach.gz root=device:hd2s1 -s
   [Multiboot-elf, ...]
</pre></td></tr></table>

<p>
Next, the root filesystem server and the <code>exec</code> server must be
loaded. This is done using Grub's boot module capability. The ${var} are
filled in by GNU Mach. The arguments are used by the Hurd to indicate what
type of information is being provided. Since the ext2fs command line is very
long, it can be broken up by escaping the newline character in the normal Unix
fashion. Be sure that there is not space after the antislash at the end of each
line. Also be sure to differentiate <kbd>{</kbd> and <kbd>}</kbd> from <kbd>
(</kbd> and <kbd>)</kbd>.
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
  grub&#62; module (hd0,0)/hurd/ext2fs.static \
   --multiboot-command-line=${kernel-command-line} \
   --host-priv-port=${host-port} \
   --device-master-port=${device-port} \
   --exec-server-task=${exec-task} -T typed ${root} \
   $(task-create) $(task-resume)
    [Multiboot-module  0x1c4000, 0x2cfe6a bytes]
  grub&#62; module (hd0,0)/lib/ld.so.1 /hurd/exec $(exec-task=task-create)
    [Multiboot-module  0x494000, 0x27afe bytes]
</pre></td></tr></table>

<p>
Once the Hurd is running, process can be automated by adding the appropriate
commands to Grub's <tt><q>/boot/grub/menu.lst</q></tt> configuration file.
</p>

<p>
GNU/Hurd can be now booted:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
grub&#62; boot
</pre></td></tr></table>

<p>
If GNU/Hurd fails to boot, it could be due to shared IRQs: GNU Mach does not
play well with these. You can verify your situation by looking at, for
instance, the <tt><q>/proc/interrupts</q></tt> file under GNU/Linux. Also, as GNU
Mach does not support loadable kernel modules, many of the drivers are compiled
into the default kernel. If there are old peripherals, this can be a problem: a
device may incorrectly respond to a probe intended for a completely unrelated
device and thereby cause a crash. Building a new kernel with only the required
device drivers will usually solve this problem. GNU Mach is easily cross
compiled. If you are running Debian, install the <tt><q>mig</q></tt> package,
and your stock <tt><q>gcc</q></tt> should do.
</p>

<p>
If this does not help, ask on the appropriate mailing list.
</p>


<h2> 6. Native Install </h2>

<p>
Once you are presented with a shell prompt, and any time that the Hurd is in
single user mode, it is necessary to set the terminal type:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# export TERM=mach
</pre></td></tr></table>

<p>
Be warned that <kbd>CONTROL-C</kbd> and family will not work in single user
mode.
</p>

<p>
We can now run the <code>native-install</code> script. This will configure the
packages and set up several important translators:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# ./native-install
</pre></td></tr></table>

<p>
Before the script terminates, it will indicate that it needs to be run a second
time. Follow its instructions and reboot using the <code>reboot</code> command.
Again, go into single user mode and run <code>./native-install</code>.
</p>


<h2> 7. Configuration </h2>


<h3> 7.1 The Network </h3>

<p>
To configure the network, the pfinet translator must be configured. This is
done using the <code>settrans</code> command to attach a translator to a given
filesystem node. When programs access the node by, for example sending an RPC,
the operating system will transparently start the server to handle the request.
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# settrans -fgap /servers/socket/2 /hurd/pfinet -i eth0 \
   -a a.b.c.d -g e.f.g.h -m i.j.k.l
</pre></td></tr></table>

<p>
Here, <code>settrans</code> is passed several options. The first two,
<samp><q>fg</q></samp>, force any existing translator to go away. The next two,
<samp><q>ap</q></samp>, make both active and passive translators. By making the
translator active, we will immediately see any error messages on
<tt><q>stderr</q></tt>. The latter saves the translator and arguments in the node
so it can be transparently restarted later (i.e. making the setting persistent
across reboots). The options are followed by the node to which the translator
is to be attached, then the program (i.e. translator) to run and any arguments
to give it. The <samp><q>-i</q></samp> option is the interface <code>pfinet</code>
will listen on, <samp><q>-a</q></samp> is the IP address, <samp><q>-g</q></samp> is the
gateway and <samp><q>-m</q></samp> is the network mask.
</p>

<p>
Be sure to add name servers to your <tt><q>/etc/resolv.conf</q></tt> file:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
  nameserver 192.168.1.1
</pre></td></tr></table>

<p>
To test the configuration, <code>ping -c2 gateway</code>. The
<samp><q>-c</q></samp> is important to limit the number of pings; recall,
<kbd>CONTROL-C</kbd> does not work in single user mode.
</p>

<p>
DHCP does not yet work on the Hurd. This is due to limitations of pfinet: it is
based on the Linux' TCP/IP code and unable to listen on <tt><q>0.0.0.0</q></tt>.
</p>

<p>
Help on <code>settrans</code> can be obtained by passing it the
<samp><q>--help</q></samp> option. Help on a specific translator can be gotten by
invoking it from the command line with the same argument, e.g.:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# /hurd/pfinet --help
</pre></td></tr></table>

<p>
As there can be a lot of output, consider piping this through a pager such as
<code>less</code>.
</p>


<h3> 7.2 Other File Systems </h3>

<p>
Next, edit <tt><q>/etc/fstab</q></tt> to add any additional filesystems as well as
swap space. It is <em>very important</em> that swap space be used; the Hurd
will be an order of magnitude more stable. Note that the Hurd can transparently
share a swap partition with Linux but will happily page to any device including
a raw partition such as your home partition. By default, <code>nano</code> is
the only editor installed by the base distribution.
</p>

<p>
Here is an example <tt><q>/etc/fstab</q></tt> file:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
\# &#60;file system&#62; &#60;mount point&#62;   &#60;type&#62;  &#60;options&#62;  &#60;dump&#62;  &#60;pass&#62;
/dev/hd2s1      /               ext2    rw         0       1
/dev/hd2s2      /home           ext2    rw         0       2
/dev/hd2s3      none            swap    sw         0       0
</pre></td></tr></table>

<p>
Remember to create any devices using the <code>MAKEDEV</code> command:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# cd /dev
 \# ./MAKEDEV hd2s1 hd2s2 hd2s3
</pre></td></tr></table>

<p>
To mount an nfs filesystem, <code>/hurd/nfs</code> translator is used. When
run as non-root, the translator will connect to the server using a port above
1023. By default, GNU/Linux will reject this. To tell GNU/Linux to accept
connections originating from a non-reserved port, add the
<samp><q>insecure</q></samp> option to the export line. Here is an example
<tt><q>/etc/exports</q></tt> file assuming the client's ip address is
<tt><q>192.168.1.2</q></tt>:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
  /home  192.168.1.2(rw,insecure)
</pre></td></tr></table>

<p>
To mount this from a GNU box and assuming that nfs server's ip address is
<tt><q>192.168.1.1</q></tt>:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
\# settrans -cgap /mount/point /hurd/nfs 192.168.1.1:/home
</pre></td></tr></table>


<h3> 7.3 Rebooting </h3>

<p>
Finally, reboot into multiuser mode, i.e. in the same way single user mode was
brought up minus the <samp><q>-s</q></samp> option when loading the kernel. For
details, see section 5. Booting GNU/Hurd.
</p>

<p>
Happy Hacking!
</p>


<h2> 8. Final Words </h2>


<h3> 8.1 The Grub Menu </h3>

<p>
Having to always load the kernel by hand can be very tedious. Edit the
<tt><q>/boot/grub/menu.lst</q></tt> and tailor it appropriately; booting will
become much quicker and easier.
</p>


<h3> 8.2 Adding Devices </h3>

<p>
By default, only a few devices are created in the <tt><q>/dev</q></tt> directory.
Use the <code>MAKEDEV</code> script to create any needed device nodes.
</p>


<h3> 8.3 Installing More Packages </h3>

<p>
There are several ways to add packages. Downloading and using
<code>dpkg -i</code> works but is very inconvenient. The easiest method
is to use <code>apt-get</code>. Edit <tt><q>/etc/apt/sources.list</q></tt>
and add one of the following unreleased entries from one of the
<url "http://wiki.debian.org/DebianPorts/Mirrors">:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
deb http://ftp.debian-ports.org/debian unreleased main
</pre></td></tr></table>

<p>
<url "http://ftp.debian-ports.org/" /> and its mirrors contain packages that
have hacks or patches that have not yet been integrated upstream or in Debian.
</p>

<p>
And unstable from one of the Debian mirrors (see
<url "http://www.debian.org/mirror/list" /> for the complete list) carrying
this architecture:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
deb http://ftp.de.debian.org/debian unstable main
</pre></td></tr></table>

<p>
If GNU Mach does not recognize your network card or you use a modem, the only
way to upgrade will be to download the packages and then transfer them to the
GNU system. The easiest way to do this is to use apt off-line. Refer to
<tt><q>/usr/share/doc/apt-doc/offline.text.gz</q></tt> for detailed instructions.
</p>


<h3> 8.4 The Hurd console</h3>

<p>
Besides the Mach console you encountered during installation, the GNU/Hurd
features a powerful user-space console providing virtual terminals.
Currently, you have to start the Hurd console manually with the following
command:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# console -d vga -d pc_mouse --repeat=mouse -d pc_kbd --repeat=kbd -d generic_speaker -c /dev/vcs
</pre></td></tr></table>

<p>
Inside the Hurd console, you can switch between virtual terminals via
<kbd>ALT+F1</kbd>, <kbd>ALT+F2</kbd> and so on. <kbd>ALT+CTRL+BACKSPACE</kbd> detachs
the Hurd console and brings you back to the Mach console, from where you
can reattach again with the above command.
</p>


<h3> 8.5 X.Org </h3>

<p>
X.Org has been ported and all video cards, which it supports that do not
require a kernel module should work.
</p>

<p>
You need to be in the Hurd console and have repeaters setup as indicated in
Section 8.4 above. As X.Org has <code>/dev/kbd</code> hardcoded as device
for the keyboard, you have to make a symlink:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
 \# cd /dev
 \# ln -s cons/kbd kbd
 \# ln -s cons/mouse mouse
</pre></td></tr></table>

<p>
You will need several X packages. <code>x-window-system-core</code>,
<code>rxvt</code> and <code>twm</code>, <code>fvwm</code> or <code>wmaker</code>
are a good start.
</p>

<p>
Debconf can be used to configure X.Org, however, it is not Hurd aware and
the configuration file will need to be tweaked. After configuring, change the
pointer section to read:
</p>

<table><tr><td>&nbsp;</td><td class=example><pre>
Section "Pointer"
  Protocol "osmouse"
  Device "/dev/mouse"
EndSection
</pre></td></tr></table>

<p>
<samp><q>Emulate3Buttons</q></samp> and <samp><q>ZAxisMapping</q></samp> must both be
disabled.
</p>

<p>
Finally, run <code>startx</code>.
</p>

<p>
There are several caveats to be aware of.
<code>update-menu</code> has not yet been ported. As such, there are no fine
Debian menus. Although a <code>pthreads</code> implementation exists not all
pthread packages have been ported: do not expect Gnome and KDE to work.
</p>

