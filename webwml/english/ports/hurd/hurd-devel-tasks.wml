#use wml::debian::template title="Debian GNU/Hurd --- Development" NOHEADER="yes"
#include "$(ENGLISHDIR)/ports/hurd/menu.inc"

<h1>
Debian GNU/Hurd</h1>
<h2>
Known Bugs or Limitiations</h2>
<p>
Here is a quick list of known user visible bugs and limitations. It may be
out of date. These are not official lists. These lists are mostly for me,
so I don't forget important stuff.
</p>
<ul>
<li>
GNU Mach
<ul>
<li>
Support for Linux Character Devices (needed for X) is missing.
Howver, <a
href="ftp://alpha.gnu.org/gnu/hurd/contrib/marcus/">experimental
patches</a> are available.</li>
<li>
<a href="#fpe" name="TOC_fpe">Floating point emulator code</a> is
broken and non-free. The Linux FPE should be ported.</li>
<li>
Use Corba instead MiG (?).</li>
<li>
The official task list from CVS:
<ul>
<li>
!!! Mach 3.0 serial drivers support only a small subset of the
available possibilities in the Posix c_cflag termios field.  Fix this,
by adding a new device_set_status call that sets the whole thing and
not just the old limited possibilities.</li>
<li>
!!! Mach 3.0 needs many new device drivers for popular PC devices.
Shantanu Goel is doing work in this area; coordinate with him.</li>
<li>
!!! A replacement for MiG that understands C .h files.</li>
<li>
!!! Mach 3.0 needs to provide support for task virtual timers similar
in functionality to the Unix ITIMER_PROF and ITIMER_VIRTUAL
timers.</li>
<li>
!!! Mach 3.0 needs to make switches from MEMORY_OBJECT_COPY_DELAY to
MEMORY_OBJECT_COPY_NONE have the effect of immediately completing any
delayed copies.</li>
<li>
Mach 3.0 needs a facility to automatically send task and thread status
on task/thread exit to a port that can only be changed by a privileged
user; this would be used to implement process accounting.</li>
<li>
Mach 3.0 needs a facility to find out what task is the parent of a
given task.</li>
<li>
Mach 3.0 needs a facility to find out which pages of a task's address
space are in core to implement Unix's mincore call.</li>
<li>
Mach 3.0 needs a facility to do msync.</li>
<li>
Utah Mach needs the OSF vm_remap call.</li>
<li>
Mach 3.0 needs a replacement for MEMORY_OBJECT_COPY_CALL that works at
least for the cases needed in ordinary files.  (Write thomas if you
want to know what the problem is and some ideas about how to solve
it.)</li>
<li>
!!! Mach 3.0 needs proxy memory objects.  (thomas can tell you what
these are and why they are important.)</li>
<li>
Mach 3.0 needs a way to do per-task resource counters that are
accessible to servers called by the task.</li>
<li>
Mach 3.0 needs facilities to implement resource limits of various
sorts.</li>
<li>
Mach 3.0 needs a way to have a thread's CPU time statistics include
time spent by servers on its behalf.  [This has been done for the
migrating-threads version of Mach; talk to thomas before starting work
on it.]</li>
<li>
Of course, free ports are always necessary to machines that don't
already have free ports.</li>
<li>
Much work can be done doing research in how to improve Mach VM
performance and timesharing scheduling policy.</li>
<li>
Mach 3.0 needs facilities to get a list of all the devices which can
be device_open'd, as well as to get the type of a device.</li>
<li>
A way to have the kernel send a message on some designated port
everytime a new task is started.</li>
<li>
OSF has enhanced the exception_raise protocol to include thread_state
information.  This code should be merged into the kernel; OSF people
have said their could could be released to the public (but it has not
appeared).</li>
<li>
Implement TASK_EVENTS_INFO.</li>
<li>
Add a timestamp for task and thread creation to the relevant info
structures (and make sure it works for the kernel task and
threads).</li>
<li>
Add an anonymous swap allocation statistic to the task info
structure.</li></ul></li></ul>

<li>GNU Hurd
<ul>
<li>
Disk partition size is limited by Memory Mapping (about 1 GB) (Thomas
did some work on this).
<li>
Support for multiple network interfaces. (There is a patch available
that has to be evaluated by Thomas.
<li>
PPP is missing.
<li>
Needs to be profiled for performance.
<li>
Collect bugs of the <code>nfsd</code> server. It partially works, but
there are definitely problems in it.
<li>
exec server can't run gzip and bzip2 executables. Nothing is known
about this bug. It doesn't seem to be a bug in the exec server itself,
because it seems to unzip and start the program. OKUJI says,
<code>S_exec_exec</code> returns successfully.
<li>
Provide a way to get all mounted filesystems on the Hurd (and write
a Translator for <code>/var/run/mtab</code>).
<li>
The official Hurd task list fresh from CVS (3 Jul 1999):
<ul>
<li>
Do whatever magic is necessary for Perl to take advantage of all the
nifty Hurd features that Unix doesn't have.</li>
<li>
Something to deal with the case where the system clock is in local
time instead of UCT.  Linux deals already; we should too.</li>
<li>
Make the thread timeout in libports/manage-multithread.c work.</li>
<li>
Make thread death in C threads really free resources.</li>
<li>
!!! An RPC trace program to aid debugging.  Ask roland for more info.
[ MB: There is a program rpctrace in the distribution, test and
improve.]</li>
<li>
Programs that use utmp need to be changed to use /utmp and
utmp.defs.</li>
<li>
We need some standard translators for /utmp nodes; most importantly
one for ordinary terminals (set up by login) and one for X displays
(set up by xdm).</li>
<li>
!!! We need some existing shell programs changed to do Hurd things:
like ls, tar, cpio, etc.  Some of this work has already been done, but
more is still needed.</li>
<li>
!!! Extend bash to call shell functions when various Hurdish async
events happen.</li>
<li>
Handy shell programs to send msgport msgs, and change default init
ports and ints.</li>
<li>
Shadow directory translators.</li>
<li>
A system for write, send, talkd and so forth to bleep users; this
should be integrated with the utmp replacement above.</li>
<li>
A filesystem for /tmp that uses virtual memory instead of disk.
(Roland has some ideas about this.)</li>
<li>
Filesystem implementations (using libdiskfs) for other popular
formats.  Importantly, MSDOS FAT format.</li>
<li>
A fancy terminal driver that uses readline and supports
detach/attach.</li>
<li>
A notepad program to hold and keep track of ports for shell
scripts.</li></ul></li></ul>

<li>GNU Lib C
<ul>
<li>
POSIX Threads! (Mark Kettenis is working on this)</li>
<li>
POSIX (partial) file locking.</li>
<li>
Network Monitoring Tools!</li>
<li>
&lt;net/*.h&gt; and support for these ioctls().</li>
<li>
Implement functional code for the stubs in
<code>gnu/stubs.h</code></li>
<li>
The official task list:
<p>C library work.  See roland@gnu.ai.mit.edu if you are interested in working
on anything in the C library.
<ul>
<li>
Useful response to SIGINFO.
<li>
Better integration with cthreads.</li></ul></li></ul>

<li>Debian
<ul>
<li>
SysV Init emulation. (Almost done).</li>
<li>
Port Linux <code>syslogd</code>.</li>
<li>
Port <a href="#fdisk" name="TOC_fdisk"><code>fdisk</code></a>.</li>
<li>
Smarter handling of Architectures via Depends.</li>
<li>
<a href="hurd-devel-debian">Port more packages</a>.</li>
</ul>
<li>GRUB
<ul>
<li>
iso9660 support for installation cd's.</li>
</ul>
</ul>

<h2>
More Infos On Particular Tasks</h2>
<h3>
GNU Mach</h3>

<h4><a href="#TOC_fpe" name="fpe">Floating Point Emulator Code</a></h4>
<p>
GNU Mach currently contains an Intel-proprietary floating point
emulator.  We don't have the source code for it (<code>fpe.o</code> is
uudecoded from <code>gnumach/i386/i386/fpe.b_elf</code>).  Even worse,
it doesn't work. <code>:(</code></p>
<p>
This is the reason why machines without an FPU (such as 486SX
machines) cannot boot the Hurd.  If anybody has the time or energy to
port the Linux or BSD fpu's to gnumach, please do so... this would be
a valuable contribution that would enable people with older hardware
(which make cheap second machines) to run the Hurd.</p>
<p>
If you're willing to take on this work, please send mail to the <a
href="hurd-contact">developer list</a> or <a
href="mailto:gord@trick.fig.org">Gordon Matzigkeit</a> if you'd rather
discuss this privately.</p>

<h3>
Debian</h3>

<h4><a href="#TOC_fdisk" name="fdisk"><code>fdisk</code></a></h4>
<p>
There is an old version of <code>fdisk</code> on alpha.gnu.org, but this
should not be used anymore. Yoshinori says:</p>
<p><blockquote>
<code>fdisk</code> will not detect the geometry of a drive automatically,
and the original <code>fdisk</code> is quite old. I think
<code>storeio</code> should support the <code>V_GETPARMS
device_get_status</code> call and then <code>fdisk</code> should use the
call to detect the geometry before you make the <code>fdisk</code> package,
because that should make trouble if the user sets the geometry manually.</p>
</blockquote>
