#use wml::std::tags
#use wml::sup::path
#use wml::debian::common_tags
#use wml::debian::language_names

<perl>
# language directory name => ISO 639 two-letter code for the language name
my %langs = (
  english    => "en",
  arabic     => "ar",
# bulgarian  => "bg",
  catalan    => "ca",
  czech	     => "cs",
  danish     => "da",
  german     => "de",
  greek      => "el",
  esperanto  => "eo",
  spanish    => "es",
  finnish    => "fi",
  french     => "fr",
  croatian   => "hr",
  hungarian  => "hu",
  indonesian => "id",
  italian    => "it",
  japanese   => "ja",
  korean     => "ko",
  lithuanian => "lt",
  dutch      => "nl",
  norwegian  => "no",
  polish     => "pl",
  portuguese => "pt",
  romanian   => "ro",
  russian    => "ru",
  swedish    => "sv",
  slovene    => "sl",
  turkish    => "tr",
  chinese    => "zh",
);

# language directory name => native name of the language
# non-ASCII letters must be escaped (using entities)!
my %selflang = (
  arabic     => '&#1593;&#1585;&#1576;&#1610;&#1577;',
  bulgarian  => '&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;',
  catalan    => 'catal&agrave;',
  chinese    => '&#20013;&#25991;',
  croatian   => 'hrvatski',
  czech	     => '&#269;esky',
  danish     => 'dansk',
  dutch      => 'Nederlands',
  english    => 'English',
  esperanto  => 'Esperanto',
  finnish    => 'suomi',
  french     => 'fran&ccedil;ais',
  german     => 'Deutsch',
  greek      => '&#917;&#955;&#955;&#951;&#957;&#953;&#954;&#940;',
  hungarian  => 'magyar',
  indonesian => 'Indonesia',
  italian    => 'Italiano',
  japanese   => '&#26085;&#26412;&#35486;',
  korean     => '&#54620;&#44397;&#50612;',
  lithuanian => 'Lietuvi&#371;',
  norwegian  => 'norsk&nbsp;(bokm&aring;l)',
  polish     => 'polski',
  portuguese => 'Portugu&ecirc;s',
  romanian   => 'rom&acirc;n&#259;',
  russian    => '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;',
  spanish    => 'espa&ntilde;ol',
  swedish    => 'svenska',
  slovene    => 'sloven&#353;&#269;ina',
  turkish    => 'T&uuml;rk&ccedil;e',
);

# language directory name => Latin transliteration of the language name
# This is used for language names which consist entirely of non-Latin
# characters, to aid those that have browsers which cannot show different
# character sets at once.
my %translit = (
  arabic   => "Arabiya",
  bulgarian=> "B&#601;lgarski",
  chinese  => "Zhongzu", # Not printed due to Chinese-specific code; kept for sort order
  greek    => "Ellinika",
  japanese => "Nihongo",
  korean   => "Hangul", # Not sure. "Hanguk-Mal" (=Spoken Korean)?
  russian  => "Russkij",
);

# second transliteration table, used for languages starting with a latin
# diacritic letter
my %translit2 = (
  czech    => "cesky",
);
</perl>

<when "$(CUR_LOCALE)">
  <perl>
    use locale;
    use POSIX;
    setlocale(LC_ALL, "$(CUR_LOCALE)");
  </perl>
</when>

<perl>
sub langcmp {
  my ($first, $second) = ($a, $b);

  # Handle sorting of non-latin characters
  # If there is a transliteration for this language available, use it
  $first = $translit{$sorted_langs{$a}} if defined $translit{$sorted_langs{$a}};
  $second = $translit{$sorted_langs{$b}} if defined $translit{$sorted_langs{$b}};

  # Then handle special cases (initial latin letters with diacritics)
  $first = $translit2{$sorted_langs{$a}} if defined $translit2{$sorted_langs{$a}};
  $second = $translit2{$sorted_langs{$b}} if defined $translit2{$sorted_langs{$b}};

  # Put remaining entity-only names last in the list
  if (substr($first,0,1) eq '&')
  {
    $first =~ s/^&/ZZZ&/;
  }
  if (substr($second,0,1) eq '&')
  {
    $second =~ s/^&/ZZZ&/;
  }
  #    There seems to be a bug with localization in
  #    Perl 5.005 so we need those extra variables.
  my ($ufirst, $usecond) = (uc($first), uc($second));
  return $ufirst cmp $usecond;
}

sub languages {
  my $str = "";

  $base_url = "$(HOME)";
  $file = "$(WML_SRC_BASENAME)";
  $cur_lang = "$(CUR_LANG)";
  $cwd = $WML_SRC_DIRNAME;
  $full_base_url = &canonpath("$cwd/$base_url");
  $rel_dir = &relpath($full_base_url, $cwd);
  $rel_dir =~ s,/$,,;

  # printf STDERR "base_url=$base_url rel_dir=$rel_dir file=$file cur_lang=$cur_lang\n";

  foreach(keys %langs) {
     # printf STDERR "$base_url/../$_/$rel_dir/$file.wml\n";
     if ( -f "$base_url/../$_/$rel_dir/$file.wml" ) {
        if ($_ ne lc($cur_lang) or $cur_lang eq "Chinese") {
           push @used_langs, $_;
           # printf STDERR "found file in $_\n";
        }
     }
  }
  # printf STDERR join(', ', @used_langs);

  if ($rel_dir eq "" && $file eq "sitemap") { # special case for the site map
    $str .= "\n";
    $str .= "<!--UdmComment-->\n";
    $str .= q{<gettext>This page is also available in the following languages:</gettext>}."\n";
    $str .= "<br />\n";
    foreach (keys %langs) {
      if ($_ ne lc($cur_lang) or $cur_lang eq "Chinese") {
        $sorted_langs{$selflang{$_}} = $_;
      }
    }
    foreach (sort langcmp keys %sorted_langs) {
      $cur_lang = $sorted_langs{$_};
      $tooltip = $trans{$CUR_ISO_LANG}{$cur_lang};
      if ($cur_lang ne "chinese") {
        $str .= "<a href=\"$file.$langs{$cur_lang}.html\" title=\"$tooltip\" hreflang=\"$langs{$cur_lang}\" lang=\"$langs{$cur_lang}\" rel=\"alternate\">$_";
        $str .= "&nbsp;($translit{$cur_lang})" if defined $translit{$cur_lang};
        $str .= "</a>&nbsp;\n";
      } else {
        $str .= "<a href=\"$file.$langs{$cur_lang}-cn.html\" title=\"$tooltip (<CNc/>)\" hreflang=\"$langs{$cur_lang}-CN\" lang=\"$langs{$cur_lang}-CN\" rel=\"alternate\" style=\"white-space: nowrap\">$_(&#31616;)</a>&nbsp;\n";
        $str .= "<a href=\"$file.$langs{$cur_lang}-hk.html\" title=\"$tooltip (<HKc/>)\" hreflang=\"$langs{$cur_lang}-HK\" lang=\"$langs{$cur_lang}-HK\" rel=\"alternate\" style=\"white-space: nowrap\">$_(HK)</a>&nbsp;\n";
        $str .= "<a href=\"$file.$langs{$cur_lang}-tw.html\" title=\"$tooltip (<TWc/>)\" hreflang=\"$langs{$cur_lang}-TW\" lang=\"$langs{$cur_lang}-TW\" rel=\"alternate\" style=\"white-space: nowrap\">$_(&#32321;)</a>&nbsp;\n";
      }
    }
     $str .= "<!--/UdmComment-->\n";
  }
  elsif (@used_langs) {
     $str .= "<!--UdmComment-->\n";
     $str .= q{<gettext>This page is also available in the following languages:</gettext>}."\n";
     $str .= "<br />\n";
     # Language sorting. Create a hash going from the language's own name
     # for itself to the language's ISO keys. Then work with the sorted
     # keys.
     foreach (@used_langs) {
        $sorted_langs{$selflang{$_}} = $_;
     }
     # Sort on uppercase to work with languages which use lowercase initial
     # letters.
     foreach (sort langcmp keys %sorted_langs) {
        $cur_lang = $sorted_langs{$_};
        $tooltip = $trans{$CUR_ISO_LANG}{$cur_lang};
        if ($cur_lang ne "chinese") {
           $str .= "<a href=\"$file.$langs{$cur_lang}.html\" title=\"$tooltip\" hreflang=\"$langs{$cur_lang}\" lang=\"$langs{$cur_lang}\" rel=\"alternate\">$_";
           $str .= "&nbsp;($translit{$cur_lang})" if defined $translit{$cur_lang};
           $str .= "</a>&nbsp;\n";
        } else {
           $str .= "<a href=\"$file.$langs{$cur_lang}-cn.html\" title=\"$tooltip (<CNc/>)\" hreflang=\"$langs{$cur_lang}-CN\" lang=\"$langs{$cur_lang}-CN\" rel=\"alternate\" style=\"white-space: nowrap\">$_(&#31616;)</a>&nbsp;\n";
           $str .= "<a href=\"$file.$langs{$cur_lang}-hk.html\" title=\"$tooltip (<HKc/>)\" hreflang=\"$langs{$cur_lang}-HK\" lang=\"$langs{$cur_lang}-HK\" rel=\"alternate\" style=\"white-space: nowrap\">$_(HK)</a>&nbsp;\n";
           $str .= "<a href=\"$file.$langs{$cur_lang}-tw.html\" title=\"$tooltip (<TWc/>)\" hreflang=\"$langs{$cur_lang}-TW\" lang=\"$langs{$cur_lang}-TW\" rel=\"alternate\" style=\"white-space: nowrap\">$_(&#32321;)</a>&nbsp;\n";
        }
     }
     $str .= "\n<br />\n";
     $str .= q{<gettext>How to set <a href=m4_HOME/intro/cn>the default document language</a></gettext>};
     $str .= "\n<!--/UdmComment-->\n";
  }

  return $str;
}

</perl>
