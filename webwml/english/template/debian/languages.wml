#use wml::std::tags
#use wml::sup::path
#use wml::debian::common_tags
#use wml::debian::language_names

<define-tag langtext whitespace=delete>
  <gettext>This page is also available in the following languages</gettext>
</define-tag>
<define-tag setlang whitespace=delete>
  <gettext>How to set <a href=m4_HOME/intro/cn>the default document language</a></gettext>
</define-tag>

<perl>
# Add your language directory along with its ISO abbreviation here.
# Do _not_ translate the directory names.
#            Directory   Abbrev
my %langs = ( english    => "en",
#             arabic     => "ar",
              catalan    => "ca",
              danish     => "da",
              german     => "de",
              greek      => "el",
              esperanto  => "eo",
              spanish    => "es",
              finnish    => "fi",
              french     => "fr",
              croatian   => "hr",
              hungarian  => "hu",
	      indonesian => "id",
              italian    => "it",
              japanese   => "ja",
              korean     => "ko",
	      lithuanian => "lt",
              dutch      => "nl",
              norwegian  => "no",
              polish     => "pl",
              portuguese => "pt",
              romanian   => "ro",
              russian    => "ru",
              swedish    => "sv",
              turkish    => "tr",
              chinese    => "zh",
);

# Add your language in your own language.  Non-ASCII letters must be
# escaped.
my %selflang = (
#             arabic     => '&#1593;&#1585;&#1576;&#1610;&#1577;',
              catalan    => 'catal&agrave;',
              chinese    => '&#20013;&#25991;',
              croatian   => 'hrvatski',
              danish     => 'dansk',
              dutch      => 'Nederlands',
              english    => 'English',
              esperanto  => 'Esperanto',
              finnish    => 'suomi',
              french     => 'fran&ccedil;ais',
              german     => 'Deutsch',
              greek      => '&#917;&#955;&#955;&#951;&#957;&#953;&#954;&#940;',
              hungarian  => 'magyar',
              indonesian => 'Indonesia',
              italian    => 'Italiano',
              japanese   => '&#26085;&#26412;&#35486;',
              korean     => '&#54620;&#44397;&#50612;',
              lithuanian => 'Lietuvi&#371;',
              norwegian  => 'norsk&nbsp;(bokm&aring;l)',
              polish     => 'polski',
              portuguese => 'Portugu&ecirc;s',
              romanian   => 'rom&acirc;n&#259;',
              russian    => '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;',
              spanish    => 'espa&ntilde;ol',
              swedish    => 'svenska',
              turkish    => 'T&uuml;rk&ccedil;e'
);

# If your language name contains entirely of non-latin characters, you
# might wish to give a latin transliteration of the name here, to aid
# those that have browser that cannot show different character sets at
# once.
my %translit = (
# arabic   => "Arbytm",
  chinese  => "Zhongzu",
  greek    => "Ellinika",
  japanese => "Nihongo",
  korean   => "Hangul", # Not sure. "Hanguk-Mal" (=Spoken Korean)?
  russian  => "Russkij",
);
</perl>

# DO NOT translate anything below here.
# If you feel something needs to be modified, write to debian-www first.

<when "$(CUR_LOCALE)">
  <perl>
    use locale;
    use POSIX;
    setlocale(LC_ALL, "$(CUR_LOCALE)");
  </perl>
</when>

<perl>
sub langcmp {
  my ($first, $second) = ($a, $b);

  # Handle sorting of non-latin characters
  # If there is a transliteration for this language available, use it
  $first = $translit{$sorted_langs{$a}} if defined $translit{$sorted_langs{$a}};
  $second = $translit{$sorted_langs{$b}} if defined $translit{$sorted_langs{$b}};

  # Put remaining entity-only names last in the list
  if (substr($first,0,1) eq '&')
  {
    $first =~ s/^&/ZZZ&/;
  }
  if (substr($second,0,1) eq '&')
  {
    $second =~ s/^&/ZZZ&/;
  }
  #    There seems to be a bug with localization in
  #    Perl 5.005 so we need those extra variables.
  my ($ufirst, $usecond) = (uc($first), uc($second));
  return $ufirst cmp $usecond;
}

sub languages {
  my $str = "";

  $base_url = "$(HOME)";
  $file = "$(WML_SRC_BASENAME)";
  $cur_lang = "$(CUR_LANG)";
  $cwd = $WML_SRC_DIRNAME;
  $full_base_url = &canonpath("$cwd/$base_url");
  $rel_dir = &relpath($full_base_url, $cwd);
  $rel_dir =~ s,/$,,;

  # printf STDERR "base_url=$base_url rel_dir=$rel_dir file=$file cur_lang=$cur_lang\n";

  foreach(keys %langs) {
     # printf STDERR "$base_url/../$_/$rel_dir/$file.wml\n";
     if ( -f "$base_url/../$_/$rel_dir/$file.wml" ) {
        if ($_ ne lc($cur_lang) or $cur_lang eq "Chinese") {
           push @used_langs, $_;
           # printf STDERR "found file in $_\n";
        }
     }
  }
  # printf STDERR join(', ', @used_langs);

  if ($rel_dir eq "" && $file eq "sitemap") { # special case for the site map
    $str .= "\n";
    $str .= "<!--UdmComment-->\n";
    $str .= "<langtext/>:\n";
    $str .= "<br />\n";
    foreach (keys %langs) {
      if ($_ ne lc($cur_lang) or $cur_lang eq "Chinese") {
        $sorted_langs{$selflang{$_}} = $_;
      }
    }
    foreach (sort langcmp keys %sorted_langs) {
      $cur_lang = $sorted_langs{$_};
      $tooltip = $trans{$CUR_ISO_LANG}{$cur_lang};
      if ($cur_lang ne "chinese") {
        $str .= "<a href=\"$file.$langs{$cur_lang}.html\" title=\"$tooltip\" hreflang=\"$langs{$cur_lang}\" rel=\"alternate\">$_";
        $str .= "&nbsp;($translit{$cur_lang})" if defined $translit{$cur_lang};
        $str .= "</a>&nbsp;\n";
      } else {
        $str .= "<a href=\"$file.$langs{$cur_lang}-cn.html\" title=\"$tooltip (<CNc/>)\" hreflang=\"$langs{$cur_lang}-cn\" rel=\"alternate\">$_(&#x7b80;)</a>&nbsp;\n";
        $str .= "<a href=\"$file.$langs{$cur_lang}-hk.html\" title=\"$tooltip (<HKc/>)\" hreflang=\"$langs{$cur_lang}-hk\" rel=\"alternate\">$_(HK)</a>&nbsp;\n";
        $str .= "<a href=\"$file.$langs{$cur_lang}-tw.html\" title=\"$tooltip (<TWc/>)\" hreflang=\"$langs{$cur_lang}-tw\" rel=\"alternate\">$_(&#x7e41;)</a>&nbsp;\n";
      }
    }
     $str .= "<!--/UdmComment-->\n";
  }
  elsif (@used_langs) {
     $str .= "<!--UdmComment-->\n";
     $str .= "<langtext/>:\n<br />\n";
     # Language sorting. Create a hash going from the language's own name
     # for itself to the language's ISO keys. Then work with the sorted
     # keys.
     foreach (@used_langs) {
        $sorted_langs{$selflang{$_}} = $_;
     }
     # Sort on uppercase to work with languages which use lowercase initial
     # letters.
     foreach (sort langcmp keys %sorted_langs) {
        $cur_lang = $sorted_langs{$_};
        $tooltip = $trans{$CUR_ISO_LANG}{$cur_lang};
        if ($cur_lang ne "chinese") {
           $str .= "<a href=\"$file.$langs{$cur_lang}.html\" title=\"$tooltip\" hreflang=\"$langs{$cur_lang}\" rel=\"alternate\">$_";
           $str .= "&nbsp;($translit{$cur_lang})" if defined $translit{$cur_lang};
           $str .= "</a>&nbsp;\n";
        } else {
           $str .= "<a href=\"$file.$langs{$cur_lang}-cn.html\" title=\"$tooltip (<CNc/>)\" hreflang=\"$langs{$cur_lang}-cn\" rel=\"alternate\">$_(&#x7b80;)</a>&nbsp;\n";
           $str .= "<a href=\"$file.$langs{$cur_lang}-hk.html\" title=\"$tooltip (<HKc/>)\" hreflang=\"$langs{$cur_lang}-hk\" rel=\"alternate\">$_(HK)</a>&nbsp;\n";
           $str .= "<a href=\"$file.$langs{$cur_lang}-tw.html\" title=\"$tooltip (<TWc/>)\" hreflang=\"$langs{$cur_lang}-tw\" rel=\"alternate\">$_(&#x7e41;)</a>&nbsp;\n";
        }
     }
     $str .= "\n<br />".q{<setlang/>}."\n";
     $str .= "<!--/UdmComment-->\n";
  }

  return $str;
}

</perl>
