#use wml::std::tags
#use wml::debian::languages
#use wml::debian::common_tags

# This file is used to track when translations go out-of-date, and it is
# used by including this in the head of the translated file:
#
# #use wml::debian::translation-check translation="X.xx"
#
# where X.xx is the current CVS revision number of the file you have
# translated.
#
# There are also some additional parameters that you can use on the #use
# line:
#
#    original="language"
# where  language  is the name of the language you are translating from, if
# not english. The name must correspond to the top-level subdirectory, and
# to the name in languages.wml
#
#    mindelta="number"
# which defines the maximum difference in CVS revisions before the
# translation is considered aged. The default value is 1. For less important
# pages, set it to 2, which means that not every change is considered making
# the translation aged. The value for the <aged/> tag is displayed.
#
#    maxdelta="number"
# which defines the maximum difference in CVS revisions before the
# translation is considered to be outdated (and the value of the <outdated/>
# tag is displayed). The default value is 5. For very important pages, set
# it to be less. A value of 1 means that every change is considered making
# the translation outdated.

# This is the message that is displayed if the translation is aged.
# (min_delta <= difference < max_delta)
<define-tag translationaged>
  <gettext><em>Note:</em> The <a href="$link">original document</a> is newer than this translation.</gettext>
</define-tag>

# This is the message that is displayed if the translation is too old.
# (difference >= max_delta)
<define-tag translationoutofdate>
  <gettext>Warning! This translation is too out of date, please see the <a href="$link">original</a>.</gettext>
</define-tag>

# This is the message that is displayed if the referenced original file
# no longer exists.
<define-tag originalgone>
  <gettext><em>Note:</em> The original document of this translation no longer exists.</gettext>
</define-tag>

<perl>
<protect pass="2">

sub check_translation {

# Input parameters:
my ($translation, $file, $original, $mindelta, $maxdelta) = @_;

my $parents, $level, $relative_dir, $output;
my @relative_dir = ();

# This is the maximum difference between a translated
# document and the original before considering it outdated
$max_versions = $maxdelta || 5;

# This is the maximum difference between a translated
# document and the original before considering it aged
$min_versions = $mindelta || 1;

# Set this to >= 1 to get debugging output.
# Remember, if you checkin to CVS this needs to be set to 0!
$debug = 0;

# This is the language code of the original (to make a link)
$original_lang = $original ? $langs{$original} : "en";
$link = $file;
$link =~ s/\.(wml|src)$//;
$link .= ".$original_lang.html";

# This is the directory where the original source is kept
$original_dir = $original ? "$original" : "english";

# some brown paper bag code to generate path to the original CVS/Entries
@full_directory_name = split '/', $WML_SRC_DIRNAME;
$dir = pop @full_directory_name;
while ($dir) {
	# below condition is lame, it only works for webwml and cdimage trees <shrug>
	if ($dir ne "webwml" && $dir ne "cdimage") { $level++; } else { last; }
	push @relative_dir, $dir;
	$dir = pop @full_directory_name;
}
for (; $level > 0; $level--) { $parents .= "../"; }
pop @relative_dir;
@relative_dir = reverse @relative_dir;
$relative_dir = join '/', @relative_dir;

# Read the original CVS/Entries file and extract version from it
if (open (CVS_ENTRY,"<$parents/$original_dir/$relative_dir/CVS/Entries")) {
    while (<CVS_ENTRY>) {
	($version) = $_ =~ m,/\Q$file\E/([\d\.]*),;
	last if $version;
    }
    close CVS_ENTRY;
} else {
    $version = "1.1";
}
if ($version ne "")
{
	print ${file} . "'s original CVS revision is: $version\n"
		if ($debug >= 1);

	@version_numbers = split /\./,$version;
	$major_number = @version_numbers[0];
	$last_number = pop @version_numbers;
	die "Invalid CVS revision for $file: $version\n"
		unless ($major_number =~ /\d+/ && $last_number =~ /\d+/);

	@translation_numbers = split /\./,$translation;
	$major_translated_number = @translation_numbers[0];
	$last_translated_number = pop @translation_numbers;
	die "Invalid translation revision for $file: $translation\n"
		unless ($major_translated_number =~ /\d+/ && $last_translated_number =~ /\d+/);
}

# Here we compare the original version with the translated one and print
# a note for the user if their first or last numbers are too far apart

print "Comparing original $version to translation version $translation\n" if ($debug >= 1);

</protect>
$output = '';
if ($version eq "") {
	$output = qq(<originalgone/>)
}
elsif ( $major_number != $major_translated_number ) {
	$output = qq(<strong><translationoutofdate/></strong>)
}
elsif ( $last_number - $last_translated_number >= $max_versions ) {
	$output = qq(<strong><translationoutofdate/></strong>)
}
elsif ( $last_number - $last_translated_number >= $min_versions ) {
	$output = qq(<translationaged/>)
}

if ($output ne "") {
	$output =~ s/^\s+//m; # removes whitespace at the beginning
	$output =~ s/\s+$//m; # removes whitespace at the end
	$output =~ s/\n/ /sg; # replaces linebreaks with whitespace
	print "<div class=\"trans-note\"><p>$output</p></div>";
}

}
</perl>

# The call to the subroutine is done here
{#check_trans#:\
<: check_translation ("$(translation)","$WML_SRC_FILENAME","$(original)","$(mindelta)","$(maxdelta)") :>\
:#check_trans#}

# This template was originally made by Javier Fern√°ndez-Sanguino, described
# in a proposal made around last week of August 1999. Please check the
# debian-www mailing list archives and
# webwml/english/devel/website/uptodate.wml for more information on this.
