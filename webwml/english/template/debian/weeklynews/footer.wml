#use wml::debian::common_tags

<define-tag subscribe>
  <gettext>To receive this newsletter weekly in your mailbox, <a href="http://lists.debian.org/debian-news/">subscribe to the debian-news mailing list</a>.</gettext>
</define-tag>

<define-tag backissues whitespace=delete>
  <gettext><a href="../../">Back issues</a> of this newsletter are available.</gettext>
</define-tag>

<define-tag editor_form_singular whitespace=delete>
# One editor name only
  <gettext><void id="singular" />Debian Weekly News is edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag editor_form_plural whitespace=delete>
# Two or more editors
  <gettext><void id="plural" />Debian Weekly News is edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag issue_editor_form_singular whitespace=delete>
# One editor name only
  <gettext><void id="singular" />This issue of Debian Weekly News was edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag issue_editor_form_plural whitespace=delete>
# Two or more editors
  <gettext><void id="plural" />This issue of Debian Weekly News was edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag translator_singular whitespace=delete>
# One translator only
  <gettext><void id="singular" />It was translated by %s.</gettext>
</define-tag>

<define-tag translator_plural whitespace=delete>
# Two ore more translators
  <gettext><void id="plural" />It was translated by %s.</gettext>
</define-tag>

<define-tag translator_singular_female whitespace=delete>
# One female translator only
  <gettext><void id="singularfemale" />It was translated by %s.</gettext>
</define-tag>

<define-tag translator_plural_female whitespace=delete>
# Two ore more female translators
  <gettext><void id="pluralfemale" />It was translated by %s.</gettext>
</define-tag>

<define-tag translator whitespace=delete>
<:{
   my $translator = '$(translator)';
   my $plural = 0;
   my $female = 0;
   if (length ($translator)) {
    $plural = 1 if $translator =~ /,/;
    $female = 1 if $translator =~ /\{f\}/;
    $_ = $translator;
    s/\{f\}//;
<protect pass="2">
    s/\s*([^@,]+)((?<=<)[^,>]+@[^,>]+(?=>))/<a href='mailto:$2'>$1\/a/g;
</protect>
    $translator = $_;
    if ($CUR_ISO_LANG eq 'en') {
     $translator =~ s/,([^,]+)$/ and $1/;
     $translator =~ s/,/, /g;
    } elsif ($CUR_ISO_LANG eq 'de') {
     $translator =~ s/,([^,]+)$/ und $1/;
     $translator =~ s/,/, /g;
    } elsif ($CUR_ISO_LANG eq 'sv') {
     $translator =~ s/,([^,]+)$/ och $1/;
     $translator =~ s/,/, /g;
     $translator =~ s/'/"/g;
    } elsif ($CUR_ISO_LANG eq 'no' || $CUR_ISO_LANG eq 'da') {
     $translator =~ s/,([^,]+)$/ og $1/;
     $translator =~ s/,/, /g;
    } elsif ($CUR_ISO_LANG eq 'hr') {
     $translator =~ s/,([^,]+)$/ i $1/;
     $translator =~ s/,/, /g;
     $translator =~ s/'/"/g;
    } elsif ($CUR_ISO_LANG eq 'fr') {
     $translator =~ s/,([^,]+)$/ et $1/;
     $translator =~ s/,\s*/, /g;
     $translator =~ s/'([^',]+)'/&laquo; $1 &raquo;/g;
    } elsif ($CUR_ISO_LANG eq 'ru') {
     $translator =~ s/,([^,]+)$/ É $1/;
     $translator =~ s/,/, /g;
    } elsif ($CUR_ISO_LANG eq 'pl') {
      $translator =~ s/,([^,]+)$/ i $1/;
      $translator =~ s/,/, /g;
    } else {
     # Fallback to the english style if there's no translation yet
     $translator =~ s/,([^,]+)$/ and $1/;
     $translator =~ s/,/, /g;
    }
    printf "<br />";
    printf q{<translator_singular />}, $translator unless $plural or $female;
    printf q{<translator_plural />}, $translator if $plural and ! $female;
    printf q{<translator_singular_female />}, $translator if ! $plural and $female;
    printf q{<translator_plural_female />}, $translator if $plural and $female;}
}:>
</define-tag>

<define-tag editor whitespace=delete>
<:{
   my $editor = "$(editor)";
   my $plural = 0;
   if (!length ($editor)) {
     my $path = q|<get-var WML_SRC_DIRNAME />|;
     my ($issue, $year, $null) = split /\//, scalar reverse $path;
     $year = reverse $year;
     $issue = reverse $issue;
     if ($year =~ /^\d+$/) {

	  # This is a normal issue
     } elsif ($issue =~/^\d+$/) {
	  # year/index.wml or equvalient.
	  $year = $issue;
	  $issue = 999;
     } else {
	  $year = 9999;
	  $issue = 0;
     }

     if (($year > 2002) or (($year == 2002) and ($issue >= 31))) {
	  $editor = "Martin 'Joey' Schulze";
     } elsif (($year > 2002) or (($year == 2002) and ($issue >= 2))) {
	  $editor = "Yooseong Yang, Martin 'Joey' Schulze";
     } elsif (($year > 2001) or (($year >= 2001) and ($issue >= 20))) {
	  $editor = "Joe 'Zonker' Brockmeier, Martin 'Joey' Schulze";
     } elsif (($year > 2001) or (($year >= 2001) and ($issue >= 10))) {
	  $editor = "Joe 'Zonker' Brockmeier, Jean-Christophe Helary, Tollef Fog Heen";
     } else {
	  $editor = "Joey Hess";
     }
   }

   $plural = 1 if $editor =~ /,/;

   if ($CUR_ISO_LANG eq 'en') {
     $editor =~ s/,([^,]+)$/ and $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'de') {
     $editor =~ s/,([^,]+)$/ und $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'sv') {
     $editor =~ s/,([^,]+)$/ och $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'no' || $CUR_ISO_LANG eq 'da') {
     $editor =~ s/,([^,]+)$/ og $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'hr') {
     $editor =~ s/,([^,]+)$/ i $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'fr') {
     $editor =~ s/,([^,]+)$/ et $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'([^',]+)'/&laquo; $1 &raquo;/g;
   } elsif ($CUR_ISO_LANG eq 'ru') {
     $editor =~ s/,([^,]+)$/ É $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'pl') {
     $editor =~ s/,([^,]+)$/ i $1/;
     $editor =~ s/,/, /g;
   } else {
     # Fallback to the english style if there's no translation yet
     $editor =~ s/,([^,]+)$/ and $1/;
     $editor =~ s/,/, /g;
   }

   if ("$(NOBACKISSUES)" eq "") {
     printf q{<issue_editor_form_singular />}, $editor unless $plural;
     printf q{<issue_editor_form_plural />}, $editor if $plural;
   } else {
     printf q{<editor_form_singular />}, $editor unless $plural;
     printf q{<editor_form_plural />}, $editor if $plural;
   }
}:>
</define-tag>

<hrline/>

<p><subscribe/></p>

<ifeq "$(NOBACKISSUES)" ""
"<p><backissues/></p>"
/>

<p>
<editor/>
<translator/>
</p>
