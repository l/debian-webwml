#use wml::debian::common_tags

<define-tag subscribe>
  <gettext>To receive this newsletter weekly in your mailbox, <a href="http://lists.debian.org/debian-news/">subscribe to the debian-news mailing list</a>.</gettext>
</define-tag>

<define-tag backissues whitespace=delete>
  <gettext><a href="../../">Back issues</a> of this newsletter are available.</gettext>
</define-tag>

<define-tag editor_form_singular whitespace=delete>
# One editor name only
  <gettext><void id="singular" />Debian Weekly News is edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag editor_form_plural whitespace=delete>
# Two or more editors
  <gettext><void id="plural" />Debian Weekly News is edited by <a href="mailto:dwn@debian.org">%s</a>.</gettext>
</define-tag>

<define-tag translator_singular whitespace=delete>
# One translator only
  <gettext><void id="singular" />This issue of Debian Weekly News was translated by %s.</gettext>
</define-tag>

<define-tag translator_plural whitespace=delete>
# Two ore more translators
  <gettext><void id="plural" />This issue of Debian Weekly News was translated by %s.</gettext>
</define-tag>

<define-tag translator whitespace=delete>
<:{
   my $translator = '$(translator)';
   my $plural = 0;
   my $email = "";
   my $name = "";
   my $translators = "";
   my $last = -2;
   my $p = 0;
   my $next = 0;
   my $is_over = 0;
   if (length ($translator)) {
      $translator =~ s/\(at\)/@/;
      $plural = 1 if $translator =~ /,/;
   do {
   $email="";
   $name="";
   $translators=$translators."," unless ($last == -2);
   $p = index($translator,"<",$last);
   $next = index($translator,",",$last+1);
   if ($p>$next and $next != -1){$is_over=1;}else{$is_over=0;}
   $email = substr($translator,$p+1,index($translator,">",$p)-($p+1)) unless (index($translator,">",$p)==-1) or ($p==-1) or ($is_over);
   $name = substr($translator,$last+2,$p-$last-2) unless ($p==-1) or ($is_over);
   $name = substr($translator,$last+2,$next-$last-2) if ($p==-1 and $next !=-1) or ($is_over);
   $name = substr($translator,$last+2) if ($p==-1) and ($next == -1);
   if (length ($email)){
   $translators = $translators.'<a href="mailto:'.$email.'">'."$name</a>";
   }else{$translators = $translators.$name;}
   $last = index($translator,",",$last+1);
   }until ($last == -1);
   if ($CUR_ISO_LANG eq 'en') {
     $translators =~ s/,([^,]+)$/ and $1/;
     $translators =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'de') {
     $translators =~ s/,([^,]+)$/ und $1/;
     $translators =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'sv') {
     $translators =~ s/,([^,]+)$/ och $1/;
     $translators =~ s/,/, /g;
     $translators =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'no' || $CUR_ISO_LANG eq 'da') {
     $translators =~ s/,([^,]+)$/ og $1/;
     $translators =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'hr') {
     $translators =~ s/,([^,]+)$/ i $1/;
     $translators =~ s/,/, /g;
     $translators =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'fr') {
     $translators =~ s/,([^,]+)$/ et $1/;
     $translators =~ s/,/, /g;
     $translators =~ s/'([^',]+)'/« $1 »/g;
   } elsif ($CUR_ISO_LANG eq 'ru') {
     $translators =~ s/,([^,]+)$/ É $1/;
     $translators =~ s/,/, /g;
    } elsif ($CUR_ISO_LANG eq 'pl') {
      $translators =~ s/,([^,]+)$/ i $1/;
      $translators =~ s/,/, /g;
   } else {
     # Fallback to the english style if there's no translation yet
     $translators =~ s/,([^,]+)$/ and $1/;
     $translators =~ s/,/, /g;
   }
   printf "<br>";
   printf q{<translator_singular>}, $translators unless $plural;
   printf q{<translator_plural>}, $translators if $plural;}
}:>
</define-tag>

<define-tag editor whitespace=delete>
<:{
   my $editor = "$(editor)";
   my $plural = 0;
   if (!length ($editor)) {
     my $path = q|<get-var WML_SRC_DIRNAME>|;
     my ($issue, $year, $null) = split /\//, scalar reverse $path;
     $year = reverse $year;
     $issue = reverse $issue;
     if ($year =~ /^\d+$/) {

	  # This is a normal issue
     } elsif ($issue =~/^\d+$/) {
	  # year/index.wml or equvalient.
	  $year = $issue;
	  $issue = 999;
     } else {
	  $year = 9999;
	  $issue = 0;
     }

     if (($year > 2002) or (($year == 2002) and ($issue >= 31))) {
	  $editor = "Martin 'Joey' Schulze";
     } elsif (($year > 2002) or (($year == 2002) and ($issue >= 2))) {
	  $editor = "Yooseong Yang, Martin 'Joey' Schulze";
     } elsif (($year > 2001) or (($year >= 2001) and ($issue >= 20))) {
	  $editor = "Joe 'Zonker' Brockmeier, Martin 'Joey' Schulze";
     } elsif (($year > 2001) or (($year >= 2001) and ($issue >= 10))) {
	  $editor = "Joe 'Zonker' Brockmeier, Jean-Christophe Helary, Tollef Fog Heen";
     } else {
	  $editor = "Joey Hess";
     }
   }

   $plural = 1 if $editor =~ /,/;

   if ($CUR_ISO_LANG eq 'en') {
     $editor =~ s/,([^,]+)$/ and $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'de') {
     $editor =~ s/,([^,]+)$/ und $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'sv') {
     $editor =~ s/,([^,]+)$/ och $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'no' || $CUR_ISO_LANG eq 'da') {
     $editor =~ s/,([^,]+)$/ og $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'hr') {
     $editor =~ s/,([^,]+)$/ i $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'/"/g;
   } elsif ($CUR_ISO_LANG eq 'fr') {
     $editor =~ s/,([^,]+)$/ et $1/;
     $editor =~ s/,/, /g;
     $editor =~ s/'([^',]+)'/« $1 »/g;
   } elsif ($CUR_ISO_LANG eq 'ru') {
     $editor =~ s/,([^,]+)$/ É $1/;
     $editor =~ s/,/, /g;
   } elsif ($CUR_ISO_LANG eq 'pl') {
     $editor =~ s/,([^,]+)$/ i $1/;
     $editor =~ s/,/, /g;
   } else {
     # Fallback to the english style if there's no translation yet
     $editor =~ s/,([^,]+)$/ and $1/;
     $editor =~ s/,/, /g;
   }

   printf q{<editor_form_singular>}, $editor unless $plural;
   printf q{<editor_form_plural>}, $editor if $plural;
}:>
</define-tag>

<hrline/>

<p>
<subscribe/>

<ifeq "$(NOBACKISSUES)" ""
"<p><backissues/></p>"
/>

<p>
<editor/>
<translator/>
