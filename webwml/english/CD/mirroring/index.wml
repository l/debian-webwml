#use wml::debian::cdimage title="Becoming a mirror for Debian CD images" BARETITLE=true
#use wml::debian::toc

<p>To become a Debian CD Image mirror site, you need a Linux or Unix-like
machine with a permanent, reliable connection to the Internet.</p>

<p>The CD image mirrors usually carry the jigdo templates, and some
also carry pre-built full images. The templates are commonly updated
via rsync from <a href="../jigdo-cd/#which">one of the official
locations</a>, and the full images are updated using
<kbd>jigdo-mirror</kbd>.</p>

<toc-display/>

<hr>

<toc-add-entry name="httpftp">Why FTP and HTTP are <strong>not</strong> suitable</toc-add-entry>

<p>You should <em>not</em> use FTP or HTTP to get the images. These transfer
methods have a high failure probability because of the enormous size of the
files.</p>

<p>Moreover, if the images change only slightly (as is the case with
subreleases), all of the data is downloaded again. This puts a high stress
on our computers and network connections.</p>

<toc-add-entry name="download">Downloading via rsync</toc-add-entry>

<p>For reasons outlined above, we use the <a href="http://rsync.samba.org/">\
<tt>rsync</tt></a> program that essentially performs remote binary patching.
With <tt>rsync</tt>, subrelease images are updated very efficiently, as only
the changed parts are transferred over the network; the unchanged parts are
copied from the old image.</p>

<p>For sites that wish to include only Debian CD images (and not any other
Debian mirrors), and that don't have a nearby/fast Debian
(<kbd>debian/</kbd>) mirror, we suggest using <kbd>rsync</kbd> in a daily
cron job.</p>

<p>You can mirror from any of the sites in <a href="rsync-mirrors">this
mirror list</a>.</p>

<p>Use at least the options <strong><kbd>--times --links --hard-links
--block-size=8192</kbd></strong>. This will preserve modification time,
symlinks and hardlinks, and use a block size of 8192 bytes (most efficient
for CD images). When modification time and size are the same,
<kbd>rsync</kbd> will just leave the file alone, so <tt>--times</tt> is
really obligatory.</p>

<toc-add-entry name="jigdomirror">Generating images with jigdo-mirror</toc-add-entry>

<p>A lot of people maintain "regular" Debian mirrors (<kbd>debian/</kbd>),
or just have such a mirror nearby. This means that they already have the
.debs that are included in the CD images. The obvious question is -- why
can't we use those same files in the CD images?</p>

<p><kbd>jigdo-mirror</kbd> is a program that enables one to generate a
Debian CD images using the files from a "normal" mirror, plus a few extra
jigdo template files.</p>

<p>Note that <kbd>jigdo-mirror</kbd> is included in jigdo 0.6.8, but this
version isn't shipped with Debian 3.0 ("woody"). This just means you'll have
to get it separately, there is no actual problem with using the new version
on "woody".</p>

<p>First off, you need the jigdo template files. These can be acquired on
most official sites, but the two primary locations are:</p>

<ul compact>
  <li><kbd>rsync us.cdimage.debian.org::jigdo-area/</kbd> (USA mirror)
  <li><kbd>rsync non-us.cdimage.debian.org::jigdo-area/</kbd> (European mirror)
</ul>

<p>Fetch the files from the
&lt;<var>version</var>&gt;/jigdo/&lt;<var>architecture</var>&gt;
subdirectory, for each architecture you wish to build images for.</p>

<p>Create <kbd>~/.jigdo-mirror</kbd> file to configure the program.
This is an example:</p>

<pre>
jigdoDir="/where/you/keep/mirrors/debian-cd/current/jigdo"
imageDir="/where/you/keep/mirrors/debian-cd/current/images"
tmpDir="/where/you/keep/mirrors/debian-cd/current/images"
debianMirror="file:/where/you/keep/mirrors/debian"
nonusMirror="file:/where/you/keep/mirrors/debian-non-US"
include='i386/|sparc/|powerpc/|source/'; exclude='-1\.'
</pre>

<p>The <i>include</i> and <i>exclude</i> variables contain the list of
architectures you wish to create images for (regular expressions,
rather). For more information, see the <kbd>jigdo-mirror</kbd> manual
page or the source itself (it's a shell script with a lot of comments).</p>

<p>After you've configured it, simply run <kbd>jigdo-mirror</kbd> and it
will do everything on its own. It will make a lot of output and probably
take a while, so we suggest that you make steps to handle that (run it in
screen, redirect the output into a file etc).</p>

<toc-add-entry name="pik">Generating images with the pseudo-image kit and debcdmirror</toc-add-entry>

<p><tt>rsync</tt> alone still does full downloads for "all new" releases, as
those images contain virtually no unchanged parts. However, with the
pseudo-image kit we can create "pseudo" CD images from data that is available
already on the nearest Debian FTP mirror - maybe on your own local hard
disc. Then <tt>rsync</tt> can binary patch these "pseudo-images" to the
official ones. And even for most subrelease images this is found to be more
efficient than patching the old image.</p>

<p><strong>The information in this section may be outdated! It's recommended
that you either use plain rsync or try out jigdo-mirror.</strong></p>

<p>The pseudo image kit is designed mainly for downloading only one or a few
images, like most people do. There is also the <tt>debcdmirror</tt> script
which makes mirroring <em>really</em> easy because it automatically uses the
pseudo image kit and <tt>rsync</tt> to keep your mirror up to date -- even
to the point of automatically MD5-checksumming every downloaded image. With
<tt>debcdmirror</tt>, you can also specify exactly what you want to
mirror.</p>

<p>Manual use of the pseudo image kit (maybe with <tt>rsync</tt> to
update subreleases) means lots of work and lots of trouble, so we don't
recommend it.

<p>Instead, you should use the <tt>debcdmirror</tt> script (which
"internally" uses the Pseudo-Image Kit and <tt>rsync</tt>) (daily cron
job).</p>

<p>The latest version of the
<a href="http://cdimage.debian.org/~costar/pseudo-image-kit/">pseudo
image kit</a> and the
<a href="http://cdimage.debian.org/~costar/debcdmirror/"><tt>debcdmirror</tt></a>
script are available from their author's homepage. Read the READMEs in both
packages for extensive information about the procedures.</p>

<p><strong>Notes:</strong>

<p>For the <tt>debcdmirror</tt> script, you must choose an <tt>rsync</tt>
mirror that offers an "<tt>ls-lR</tt>" file. Addresses are on the
<a href="rsync-mirrors">rsync mirror list</a>.</p>

<p>If you do not have a local <a href="$(HOME)/mirror/">"regular" Debian
FTP mirror</a>, check the <a href="$(HOME)/mirror/list">list of mirror
sites</a>.</p>

<p><tt>debcdmirror</tt> requires <tt>bash</tt> version 2 or higher. This
isn't an issue on any modern Debian system. If necessary, you can install
that in a non-default location, but then be sure to update the path to
<tt>bash</tt> in the first line of the script.</p>

<toc-add-entry name="test">Test images</toc-add-entry>

<p>The "<tt><i>codename</i>_test</tt>" directories contain images that are
hard-linked to the ones in the versioned (e.g. <tt>2.2_r4</tt>) directories.
The versioned directory name will change between (sub)releases, but the
names in the "<tt>test</tt>" directories will stay the same.</p>

<p>So, in the
<tt>rsync</tt>-only situation, mirroring both the versioned and the
appropriate "<tt>test</tt>" directories, <em>and</em> using the
<tt>--hard-links</tt> option is the only way for rsync to update subreleases
properly. [You should <em>not</em> include "<tt>test</tt>" directories with
<tt>debcdmirror</tt>, because <tt>debcdmirror</tt> will handle things
differently and more efficiently.]</p>

<toc-add-entry name="ls-lR">ls-lR files</toc-add-entry>

<p>The <tt>ls-lR</tt> file describes the directory structure of the mirror
it is on. <strong>Do not</strong> mirror the <tt>ls-lR</tt> file; either
make one yourself (with the provided "<tt>Makels-lR</tt>", every hour via
<tt>cron</tt>) or simply have no <tt>ls-lR</tt> file at all.
[<tt>debcdmirror</tt> will create a local <tt>ls-lR</tt> automatically after
mirroring.]</p>

<toc-add-entry name="serve">Serving the files</toc-add-entry>

<p>Once you have acquired the CD images you want to mirror (i386 and source
CDs are most popular), you should run the <tt>rsync</tt> server program.
This will not place a heavy load on your machine, and will generate much
less network traffic than an FTP/HTTP service.</p>

<p>Instructions for setting this up are in the README of the pseudo-image
kit. In short, add <kbd>rsync --daemon</kbd> in your <i>inetd</i>
configuration, and set up <kbd>rsyncd.conf</kbd> to your liking.
We recommend limiting access to a handful connections per IP address,
and a double-figure number total, at most.</p>

# TODO: include more stuff here rather than depending on pik, with examples

<toc-add-entry name="register">Registering the mirror in our lists</toc-add-entry>

<p>To make your CD image mirror useful to a wider audience,
you can register it in our mirror list such as
<a href="../http-ftp/">this one</a> or <a href="rsync-mirrors">this one</a>.
However, since full images are large files, this might cause you
many gigabytes of network traffic per day.</p>

<p>You can register your mirror either by filling out
<a href="$(HOME)/mirror/submit">the mirror submission form</a>
(note that the CDImage-* fields are the important ones), or by
sending an e-mail to
<a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;debian-cd&#64;lists.debian.org">\
debian-cd&#64;lists.debian.org</a>.</p>

<p>We appreciate all new CD image mirrors. Thanks in advance!</p>
