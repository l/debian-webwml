#use wml::debian::template title="Security Auditing Tools "
#use wml::debian::recent_list

<p>There are several packages available within the Debian archive
which are designed to aid source code audits.  These include:</p>

<ul>
<li><a href="http://packages.debian.org/flawfinder">Flawfinder</a>
<ul>
<li><a href="examples/flawfinder">Sample flawfinder usage</a></li>
</ul></li>
<li><a href="http://packages.debian.org/its4">ITS4</a>
<ul>
<li>There is no example for ITS4 as it has been removed from the unstable distribution.</li>
</ul></li>
<li><a href="http://packages.debian.org/rats">RATS</a>
<ul>
<li><a href="examples/RATS">Sample RATS usage</a></li>
</ul></li>
<li><a href="http://packages.debian.org/pscan">pscan</a>
<ul>
<li><a href="examples/pscan">Sample pscan usage</a></li>
</ul></li>
</ul>

<p>None of the tools are perfect and can only be used as guidelines
for further study, but given how simple they are to use it is worth
taking the time to try them out.</p>

<p>Each of the tools has different strengths and weaknesses so using
more than one is advisable.</p>

<h2>Flawfinder</h2>

<p>flawfinder is a Python tool which is designed to analyze C and C++
source code looking for potential security flaws.</p>

<p>When ran against a directory containing source code it will output
a report of the potential problems it has detected, sorted by risk
(where <i>risk</i> is an integer 1-5).  To tune out minor risks it is
possible to tell the program not to report about flaws below a
particular level of risk.  By default the output will appear in plain
text, but an HTML report is also available.</p>

<p>The program works by scanning the code and looking for the use of
functions which are contained inside its database of functions which
are commonly misused.</p>

<p>To aid the reading of the report it is possible to cause the output
report to contain the line which contains the function being used,
this can be useful to immediately detect a problem, or likewise rule
it out.</p>

<p>You can see an example of how flawfinder is used, and it's output
in the <a href="examples/">auditing examples section</a>.</p>

<h2>ITS4</h2>

<p>ITS4 is a tool contained in the non-free section of the Debian archive, it is only available for the stable distribution.</p>

<p>ITS4 may be used to scan both C and C++ code for potential security
holes, much like flawfinder.</p>

<p>The output it produces tries to be intelligent, ruling out some of
the cases where the calls to dangerous functions have been made
carefully.</p>


<h2>RATS</h2>

<p>RATS is a similar tool to those listed above, with the exception
that it comes with support for a much wider range of languages.
Currently it has support for C, C++, Perl, PHP and Python.</p>

<p>The tool uses a simple XML file to read its vulnerabilities from
which makes it one of the easiest of the available tools to modify.
New functions can be added easily for each of the supported
languages.</p>

<p>You can see an example of how RATS is used, and it's output in the
<a href="examples/">auditing examples section</a>.</p>

<h2>pscan</h2>

<p>pscan differs from the previous tools which have been described
because it is not a general purpose scanner at all.  Instead it is a
program specifically aimed at detecting format string bugs.</p>

<p>The tool will attempt to find potential issues with the use of
variadic functions within C and C++ source code, such as
<tt>printf</tt>, <tt>fprintf</tt> and <tt>syslog</tt>.</p>

<p>Format string bugs are fairly simple to detect and fix, although
they are the most recent new class of software attacks the majority of
them have probably been found and repaired already.</p>

<p>You can see an example of how pscan is used, and it's output in the
<a href="examples/">auditing examples section</a>.</p>


<h2>Understanding Scanner Output</h2>

<p>Each of the general scanning tools will include output describing
the flaw detected, and possibly giving advice on how the code can be
fixed.</p>

<p>For example the following is taken from the output of RATS
describing the dangers of <tt>getenv</tt>:</p>

<p>&quot;Environment variables are highly untrustable input. They may
be of any length, and contain any data. Do not make any assumptions
regarding content or length. If at all possible avoid using them, and
if it is necessary, sanitize them and truncate them to a reasonable
length.&quot;</p>

<p>If you need any further advice on how to correct a hole which has
been reported you should study a book on programming securely, such as
the <a href="http://www.dwheeler.com/secure-programs/">Secure
Programming for Linux and Unix HOWTO</a> by David A. Wheller.</p>

<p>(Remember that when reporting security issues a patch closing the
hole is greatly appreciated)</p>

<p>Discussion related to closing a particularly problematic piece of
code can also be held upon the <a
href="http://shellcode.org/mailman/listinfo/debian-audit">debian-audit
mailing list</a>, just be careful not to make it obvious which program
contains the flaw.</p>

