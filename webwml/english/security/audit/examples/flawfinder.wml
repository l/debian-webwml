#use wml::debian::template title="Automated Audit Example: flawfinder"
#use wml::debian::recent_list

<p><a href="http://packages.debian.org/flawfinder">flawfinder</a> is a general purpose scanner for finding and reporting upon potential flaws in both C and C++ source code.</p>


<h2>Running flawfinder</h2>
<p>Running flawfinder as simple as invoking the command with the name directories or files to examine.  If given a directory name it will then process all the valid source files it can find inside that directory.</p>
<p>In addition to given the program a list of files or directories there are several command line options which may be used to control the tools behaviour.</p>
<p>Each of the options is explained in the manpage, but the following options are particularly useful and will be used in our example:</p>
<ul>
<li>--minlevel=X
<ul>
<li>Set minimum risk level to X for inclusion in output.  Ranges from 1-5, with 1 being "low risk" and 5 being "high risk".</li>
</ul></li>
<li>--html
<ul>
<li>Format the output as HTML instead of as simple text</li>
</ul></li>
<li>--context
<ul>
<li> Show  context,  i.e.,  the  line having the potential flaw.</li>
</ul></li>
</ul>

<p>To output a HTML file containing the results of our program, only
 caring about "high risk" functions we'd run something like this:</p>
<pre>
flawfinder --html --context --minlevel=4 test.c &gt; output.html
</pre>

<h2>The Results</h2>
<p>Running flawfinder against our <a href="test.c">sample code</a> produces the following output:</p>

<hr />
<blockquote>
<p>
Examining test.c <br>
<ul>
<li>test.c:18: <b>  [4] </b> (buffer) <i> strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused).  </i>
<pre>
      strcpy( dir, argv[ 1 ] );
</pre>
<li>test.c:24: <b>  [4] </b> (buffer) <i> sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf.  </i>

<pre>
	sprintf( dir, "%s", getenv( "HOME" ) );
</pre>
<li>test.c:33: <b>  [4] </b> (shell) <i> popen:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available.  </i>
<pre>
    fp = popen( cmd, "r" );
</pre>
<li>test.c:42: <b>  [4] </b> (format) <i> printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification.  </i>

<pre>
      printf( buff );
</pre>
</ul>
<p>
Number of hits = 4
<br>
Number of Lines Analyzed = 48 in 0.53 seconds (1392 lines/second)
<br>
</blockquote>
<hr />

<h2>Understanding The Output</h2>
<p>Much like the output of <a href="rats">RATS</a> this report is very simple to read.  It clearly shows the functions which have been detected as potentially dangerous, as well as a description of the problem.</p>
<p>Including context information is very useful too as it can immediately attract attention to areas of concern, or rule out other reports as being invalid.</p>
<p>The analysis of the <a href="test.c">our sample code</a> is fairly intelligent, in the sense that it didn't warn about <i>every</i> use of the troublesome <tt>strcpy</i> function - only ones which it thought were potentially dangerous.</p>
<p>In this way it has managed to highlight all of our code's flaws whilst having no false positives.</p>
<p><a href="..">Back to the auditing project</a> | <a href="index">Back to the sample auditing page</a></p>
