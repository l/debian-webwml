#use wml::debian::template title="Automated Audit Example: pscan"
#use wml::debian::recent_list

<p><a href="http://packagse.debian.org/pscan">pscan</a> is a package which is designed to audit C and C++ source files for format string vulnerabilities.</p>
<p>It is not a general purpose auditing tool.</p>

<h2>Running pscan</h2>
<p>Running pscan is a simple matter of invoking it with the name of a file, or files, to check.  For example:</p>
<pre>
pscan <a href="test.c">test.c</a>
</pre>
<p>The output will be written directly to the console:</p>
<hr />
<pre>
test.c:42 SECURITY: printf call should have "%s" as argument 0
</pre>
<hr />

<h2>The Output</h2>
<p>The output in this case is easy to understand.  It has correctly
 identified the fact that the <tt>printf</tt> call doesn't quote
 it's arguments properly.</p>
<p>The output also shows us what we must do to correct the flaw, change the code which reads:
<pre>
printf( buff );
</pre>
<p>To read:</p>
<pre>
printf( "%s", buff );
</pre>
<p>Not doing this could allow an attacker who can control the output of <tt>ls</tt> to attack the program, by creating a file called "%s", or similar.</p>
<p>Format string attacks are discussed <a href="http://www.securityfocus.com/guest/3342">in this Security Focus introduction</a>.</p>
<p>The <a href="http://www.dwheeler.com/secure-programs/">Secure Programming for Linux and Unix HOWTO</a> explains how to protect against these attacks in commonly used variadic functions such as:</p>
<ul>
<li>printf</li>
<li>fprintf</li>
<li>syslog</li>
</ul>
<p><a href="..">Back to the auditing project</a> | <a href="index">Back to the sample auditing page</a></p>