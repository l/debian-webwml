#use wml::debian::template title="Automated Audit Example: RATS"
#use wml::debian::recent_list

<p><a href="http://packages.debian.org/rats">RATS</a> is a general purpose scanner for detecting potential security problems in a number of programming languages.</p>

<h2>Running RATS</h2>
<p>Running RATS is as simple as invoking the command with a directory to process.  Each of the recognised source files it finds will be processed.  RATS understands several programming languages, C, Perl, PHP, and Python and will treat each as valid source to examine.</p>
<p>There are several options which may be given in addition to a directory name to scane, these are described in the manpage.</p>
<p>The most useful of the options are those concerning the output, such as:</p>
<ul>
<li>--warning &lt;level&gt; (Set the level of flaws to be reported upon)
<ul>
<li>1 includes only default and high severity.</li>
<li>2 includes medium severity (default).</li>
<li>3 includes low severity vulnerabilities.</li>
</ul></li>
<li>--xml  (Output in XML)</li>
<li>--html (Output in HTML)</li>
</ul>
<p>Assuming that we have the <a href="test.c.html">test file</a> located in the current directory, with no other source files we can invoke the scanner with the following command:</p>
<pre>
rats --warning 1 --html . &gt;output.html
</pre>
<p>This will produce a HTML file containing the results of the scan, which can be loaded by a browser.</p>

<h2>The Results</h2>
<p>Running RATS against our <a href="test.c.html">sample code</a> produces the following output:</p>
<hr />
<blockquote>
  <b>Severity: High</b><br />
  Issue: fixed size global buffer<br/>
    Extra care should be taken to ensure that character arrays that are
    allocated on the stack are used safely.  They are prime targets for
    buffer overflow attacks.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
10 11 12   </li></ul>
  <b>Severity: High</b><br/>
  Issue: strcpy<br/>
    Check to be sure that argument 2 passed to this function call will not
    copy more data than can be handled, resulting in a buffer overflow.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
18   </li></ul>
  <b>Severity: High</b><br/>
  Issue: getenv<br/>
    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
22 24   </li></ul>
  <b>Severity: High</b><br/>
  Issue: sprintf<br/>
    Check to be sure that the format string passed as argument 2 to this
    function call does not come from an untrusted source that could have added
    formatting characters that the code is not prepared to handle.
    Additionally, the format string could contain `%s' without precision that
    could result in a buffer overflow.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
24   </li></ul>
  <b>Severity: High</b><br/>
  Issue: popen<br/>
    Argument 1 to this function call should be checked to ensure that it does
    not come from an untrusted source without first verifying that it contains
    nothing dangerous.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
33   </li></ul>
  <b>Severity: High</b><br/>
  Issue: printf<br/>
    Check to be sure that the non-constant format string passed as argument 1
    to this function call does not come from an untrusted source that could
    have added formatting characters that the code is not prepared to handle.
  <br/>
<ul style="list-style-type: none;"><li>
File: <b>./test.c</b><br/>Lines:
42   </li></ul>
Total lines analyzed: <b>49</b><br>
Total time <b>0.001723</b> seconds<br>
<b>28438</b> lines per second<br>
</blockquote>
<hr />
<p>This output is quite volumous, despite the code itself being very short - this shows one of the downsides of automated scannin which is the sheer volume of output.</p>

<h2>Understanding The Output</h2>
<p>The output that has been produced is basically a description of the functions which it encountered, the line number of which the flaw was detected and a description of the problem.  (As we used the "--warning" level to restrict the output to only "high" level functions we've reduced the output somewhat).</p>
<p>Each of the issues that have been discovered should be manually examined to see if there is something really wrong, or if it was a false positive (ie. a function that may be misused being used correctly).</p>
<p>In this case we can see that all of the vulnerabilities in our code have been spotted, but it's not exactly clear without going through the code with an editor and matching up the lines.</p>
<p>One big omission is that the output doesn't include the lines which are reported upon - something that <a href="flawfinder">flawfinder</a> does allow you to include.</p>
<hr />
<p><a href="..">Back to the auditing project</a> | <a href="index">Back to the sample auditing page</a></p>

