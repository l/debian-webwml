#!/usr/bin/perl -w
#
#  The purpose of this script is two-fold:
#
#  1.  Generate a HTML file which may be included via wml, to describe
#     each of the advisories produced in a given year.
#
#  2.  Generate a list of globally unique names of people who have
#     been credited with an advisory.
#
#  The code is mostly trivial, and may be freely edited/copied/used/abused.
#
# Steve
# --
# skx"debian.org  - deliberate typo ;)
#
#


use strict;
use warnings;

#
#  Find the location of the data directory.
#
my $dir = shift;
die "No directory" unless( defined( $dir ) );
die "No such directory $dir " unless( -d $dir );


#
#  This maintains a global list of everybody who has been mentioned
# in the 'credit=' line of one of our data-files
#
my %credits;



#
#  Process each file in the given directory which is named in the
# form NNNN.data
#
foreach my $file ( sort glob( "$dir/[0-9]*.data" ) )
{
    my $input  = $file;
    my $output = $file;

    #
    #  Output file is NNNN.inc
    #
    if ( $output =~ /(.*)\.data$/ )
    {
        $output = $1 . ".inc";
    }

    createAdvisories( $input, $output );
}


#
#  Now output the list of credits.
#
outputCredits();

#
#  All done
#
exit;



=begin doc

  Create the advisories from the given input file, and write the
 HTML to the given output file.

=end doc

=cut

sub createAdvisories
{
    my( $input, $output ) = ( @_ );

    my %data = readData( $input );

    outputAdvisories( $output, %data );
}



=begin doc

  Read the advisory data from the given input file, and return
 it as a hash of hashes.

=end doc

=cut

sub readData
{
    my( $file ) = (@_);

    #
    # Data.
    #
    my %data;

    #
    #  Are we in a section, denoted by '[foo]'?  And if so what it the name
    # of that section.
    #
    my $inSection = 0;
    my $section   = '';

    #
    #  Open the file.
    #
    open( INPUT, "<", $file )
	or die "Failed to open '$file' - $!";

    while( my $line = <INPUT> )
    {
	# skip blank / empty lines.
        next if !defined($line);

        chomp($line);

	#
	#  If we're in a section already...
	#
        if (( $inSection ) && ( $section ) )
        {
	    #
	    # and the line is blank then we're at the end
	    # of a section.
	    #
            if (!length($line ))
	    {
	    	$inSection = 0;
		$section = '';
            }
	    else
	    {
		# otherwise we record the values.
		my ($key, $val) = split( /=/, $line );

		# stripping leading/trailing whitespace.
		$key =~ s/^\s+//;
		$key =~ s/\s+$//;
		$val =~ s/^\s+//;
		$val =~ s/\s+$//;

		# store it away.
		$data{$section}->{$key} = $val;

                #  special case for credits.
		if ( $key && $key eq 'credit' )
		{
		    $credits{$val} += 1;
		}
	    }
        }
        else
        {
            if ( $line =~ /^\[(.*)\]$/ )
            {
                $inSection = 1;
                $section = $1;
            }
        }
    }
    close( INPUT );
    return %data;
}



=begin doc

  Output to the given file the advisories contained in the given
 hash of hashes.

=end doc

=cut

sub outputAdvisories
{
    my( $filename, %data ) = ( @_ );

    open( OUT, ">", $filename )
	or die "Failed to write to '$filename' - $!";

    #
    #  Cheap hacky way of making sure we found at least one advisory.
    #
    my $count = 0;
    foreach my $dsa ( sort keys %data )
    {
	$count += 1;
    }

    #
    #  If we found one then output the details.
    #
    if ( $count )
    {
	print OUT "<dl>\n";

	foreach my $dsa ( sort keys %data )
	{
	    my $link    = $data{$dsa}->{'link'}    || undef;
	    my $type    = $data{$dsa}->{'type'}    || undef;
	    my $date    = $data{$dsa}->{'date'}    || undef;
	    my $credit  = $data{$dsa}->{'credit'}  || undef;
	    my $package = $data{$dsa}->{'package'} || undef;
	    
	    $dsa = uc($dsa);
	    if ( $link && $date && $type && $credit )
	    {
		print OUT <<EOF;
		<dt>$date <a href="$link">$dsa - $package</a></dt>
		    <dd><p>$credit discovered that $package contained a $type vulnerability.</p></dd>
EOF
		}
	}
	print OUT "</dl>\n";
    }
    else
    {
	print OUT "<p>No advisories found.</p>\n";
    }
    close( OUT );
}



=begin doc

  Output a list of sorted authors.

=end doc

=cut

sub outputCredits
{
    open( OUT, ">", $dir . "/credits.inc" ) 
	or die "Failed to write to credits file: $!";

    print OUT "<ul>\n";

    foreach my $author ( sort keys %credits )
    {
	print OUT "<li>$author</li>\n";
    }

    print OUT "</ul>\n";

    close( OUT );
 }
