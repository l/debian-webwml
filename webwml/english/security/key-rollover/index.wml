#use wml::debian::template title="Key Rollover"

<p>
In <a href="$(HOME)/security/2008/dsa-1571">Debian Security Advisory 1571</a>,
the Debian Security Team disclosed a weakness in the random number generator used
by OpenSSL on Debian and its derivatives. As a result of this weakness,
certain encryption keys are much more common than they should be, such that an
attacker could guess the key through a brute-force attack given minimal knowledge
of the system.  This particularly affects the use of encryption keys in OpenSSH,
OpenVPN and SSL certificates.
</p>

<p>
This page documents how to perform key rollover procedures for packages
whose keys are affected by the OpenSSL vulnerability.
</p>

<ul>
<li><b><a href="#openssh">OpenSSH</a></b>
<li><b><a href="#openssl">OpenSSL: Generic PEM key generation instructions</a></b>

<li><a href="#bincimap">bincimap</a>
<li><a href="#boxbackup">boxbackup</a>
<li><a href="#cryptsetup">cryptsetup</a>
<li><a href="#dropbear">dropbear</a>
<li><a href="#ekg">ekg</a>
<li><a href="#ftpd-ssl">ftpd-ssl</a>
<li><a href="#gforge">gforge</a>
<li><a href="#kerberos">MIT Kerberos (krb5)</a>
<li><a href="#openswan">OpenSWAN / StrongSWAN</a>
<li><a href="#openvpn">OpenVPN</a>
<li><a href="#proftpd">Proftpd</a>
<li><a href="#puppet">puppet</a>
<li><a href="#sendmail">sendmail</a>
<li><a href="#ssl-cert">ssl-cert</a>
<li><a href="#telnetd-ssl">telnetd-ssl</a>
<li><a href="#tinc">tinc</a>
<li><a href="#tor">tor</a>
<li><a href="#xrdp">xrdp</a>
</ul>

<p>
Other software uses cryptographic keys, but is 
<a href="notvuln">not vulnerable</a> as OpenSSL is not used to generate
or exchange its keys.
</p>

<ul>
<li><a href="notvuln#ckermit">ckermit</a>
<li><a href="notvuln#gnupg">GnuPG</a>
<li><a href="notvuln#iceweasel">Iceweasel</a>
<li><a href="notvuln#mysql">MySQL</a>
</ul>

<p>
For key rollover instructions for other software, you might want to check
the user-submitted information in <url http://wiki.debian.org/SSLkeys>
</p>

<h1><a name="openssh">OpenSSH</a></h1>

<p>
An updated package has been released via
<a href="$(HOME)/security/2008/dsa-1576">DSA-1576</a>, which eases key transformation.
</p>

<p>1. Install the security updates in DSA-1576</p>

   <p>Once the update is applied, weak user keys will be automatically
   rejected where possible (though they cannot be detected in all
   cases).  If you are using such keys for user authentication, they
   will immediately stop working and will need to be replaced (see
   step 3).</p>

   <p>OpenSSH host keys can be automatically regenerated when the OpenSSH
   security update is applied.  The update will prompt for confirmation
   before taking this step.</p>

<p>2. Update OpenSSH known_hosts files</p>

   <p>The regeneration of host keys will cause a warning to be displayed when
   connecting to the system using SSH until the host key is updated in the
   known_hosts file on the client.  The warning will look like this:</p>

<pre>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
</pre>

   <p>In this case, the host key has simply been changed, and you should update
   the relevant known_hosts file as indicated in the warning message.
   
   It is recommended that you use a trustworthy channel to exchange the
   server key.  It is found in the file /etc/ssh/ssh_host_rsa_key.pub on
   the server; it's fingerprint can be printed using the command:</p>

      <p>ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub</p>

   <p>In addition to user-specific known_hosts files, there may be a
   system-wide file /etc/ssh/ssh_known_hosts.  This file is
   used both by the ssh client and by sshd for the hosts.equiv
   functionality.  This file needs to be updated as well.</p>

<p>3. Check all OpenSSH user keys</p>

   <p>The safest course of action is to regenerate all OpenSSH user keys,
   except where it can be established to a sufficient high degree of certainty that the
   key was generated on an unaffected system.</p>

   <p>Check whether your key is affected by running the ssh-vulnkey tool, included
   in the security update.  By default, ssh-vulnkey will check the standard
   location for user keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity),
   your authorized_keys file (~/.ssh/authorized_keys and
   ~/.ssh/authorized_keys2), and the system's host keys
   (/etc/ssh/ssh_host_dsa_key and /etc/ssh/ssh_host_rsa_key).</p>

   <p>To check all your own keys, assuming they are in the standard
   locations (~/.ssh/id_rsa, ~/.ssh/id_dsa, or ~/.ssh/identity):</p>

     <p>ssh-vulnkey</p>

   <p>To check all keys on your system:</p>

     <p>sudo ssh-vulnkey -a</p>

   <p>To check a key in a non-standard location:</p>

     <p>ssh-vulnkey /path/to/key</p>

   <p>If ssh-vulnkey says <q>Unknown (no blacklist information)</q>, then it has no
   information about whether that key is affected.  If in doubt, destroy the
   key and generate a new one.
   </p>

<p>4. Regenerate any affected user keys</p>

   <p>OpenSSH keys used for user authentication must be manually regenerated,
   including those which may have been transferred to a different system
   after being generated.</p>

   <p>New keys can be generated using ssh-keygen, e.g.:</p>

   <pre>
   $ ssh-keygen
   Generating public/private rsa key pair.
   Enter file in which to save the key (/home/user/.ssh/id_rsa):
   Enter passphrase (empty for no passphrase):
   Enter same passphrase again:
   Your identification has been saved in /home/user/.ssh/id_rsa.
   Your public key has been saved in /home/user/.ssh/id_rsa.pub.
   The key fingerprint is:
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 user@host
   </pre>

<p>5. Update authorized_keys files (if necessary)</p>

   <p>Once the user keys have been regenerated, the relevant public keys
   must be propagated to any authorized_keys files (and authorized_keys2
   files, if applicable) on remote systems.  Be sure to delete the
   affected key.</p>
   
<h1><a name="openssl">OpenSSL: Generic PEM key generation instructions</a></h1>

<p>
This is just a reminder for those who (re-)generate PEM encoded
certificates. Your site probably has other policies in place about how
to manage keys which you should follow. Additionally, you may need to
get the certificates signed again by a 3rd party Certificate Authority
rather than by using a self-signed certificate as shown below:
</p>

<pre>
cd /etc/ssl/private
openssl genrsa 1024 &gt; mysite.pem
cd /etc/ssl/certs
openssl req -new -key ../private/mysite.pem -x509 -days 9999 -out mysite.pem
</pre>
  
<h1><a name="bincimap">bincimap</a></h1>

<p>
The bincimap package automatically creates a self-signed certificate
through the openssl program for the bincimap-ssl service, and puts it
into /etc/ssl/certs/imapd.pem. To regenerate, run:
</p>

<pre>
rm -f /etc/ssl/certs/imapd.pem
dpkg-reconfigure bincimap
</pre>

<h1><a name="boxbackup">boxbackup</a></h1>

<p>
Boxbackup is not present in Debian stable, only in testing/Lenny.
</p>

<p>
Upstream has published a first impact analysis of key material created
on system with insufficient random PRNG. You can read the details
<a href="http://lists.warhead.org.uk/pipermail/boxbackup/2008-May/004476.html">here</a>.
</p>

<p>
If the PRNG in your OpenSSL was insufficiently random, you need to:
</p>

<ul>
<li>Regenerate all affected certificates, which have been generated or
signed on an affected system</li>
<li>Regenerate all the data keys (*-FileEncKeys.raw)</li>
<li>Destroy the data stored on your server to an appropriate level of
security (overwrite with zeros at the least, more if you're paranoid)</li>
<li>Upload everything again</li>
<li>Take appropriate measures under the assumption that you have been
storing your data in plain text on a public server without authentication.
(i.e., start from scratch, destroying all trace of the backed up
data, and take other measures to mitigate the exposure of your
secrets)</li>
</ul>

<h1><a name="cryptsetup">cryptsetup</a></h1>

<p>
Cryptsetup itself does not use openssl for encryption (this applies to
both LUKS and dm-crypt devices).
</p>

<p>
<em>If</em> cryptsetup has been configured to use SSL-encrypted keyfiles (a
non-default setup which must be explicitly configured by the user)
and a broken version of openssl was used to generate the keyfile, the
keyfile encryption may be weaker than expected (as the salt is not
truly random).
</p>

<p>
The solution is either to re-encrypt the keyfile (if you are
reasonably certain that the encrypted key has not been disclosed to
any third parties) or to wipe and reinstall the affected partition(s)
using a new key.
</p>

<p>
Instructions for re-encrypting a keyfile:
</p>

<p>
Do the following for each SSL-encrypted keyfile, replacing
&lt;ssl_encrypted_key_path&gt; with the path to the actual keyfile:
</p>

<pre>
tmpkey=\$(tempfile)
openssl enc -aes-256-cbc -d -salt -in &lt;ssl_encrypted_key_path&gt; -out "$tmpkey"
shred -uz &lt;ssl_encrypted_key_path&gt;
openssl enc -aes-256-cbc -e -salt -in "$tmpkey" -out &lt;ssl_encrypted_key_path&gt;
shred -uz "$tmpkey"
</pre>

<h1><a name="dropbear">dropbear</a></h1>

<p>
If you have /etc/ssh/*host* keys, either remove them, or follow the
<a href="#openssh">openssh instructions</a> first, before updating dropbear's
keys.
</p>

<p>
Dropbear's postinst converts existing openssh keys to dropbear format,
if it cannot find the dropbear host keys.
</p>

<pre>
rm /etc/dropbear/*_host_key
dpkg-reconfigure dropbear
</pre>

<p>
Note that keys that have been generated by Dropbear itself are not
vulnerable (it uses libtomcrypt rather than OpenSSL).
</p>

<h1><a name="ekg">ekg</a></h1>

<p>
Users of programs ekg or ekg2 (the latter is only in experimental) who
use the <q>SIM</q> encryption functionality, who generated a keypair using
the <q>/key [-g|--generate]</q> command (which uses libssl to do the job)
should regenerate the keys, after upgrading libssl and restarting the
program.
</p>

<p>
The upstream developers have posted a notice on their website:
<a href="http://ekg.chmurka.net/index.php">http://ekg.chmurka.net/index.php</a>
</p>

<p>
If you need further help, please ask on ekg-users@lists.ziew.org or
ekg2-users@lists.ziew.org (both English and Polish).
</p>

<h1><a name="ftpd-ssl">ftpd-ssl</a></h1>

<pre>
rm -f /etc/ftpd-ssl/ftpd.pem /etc/ssl/certs/ftpd.pem
dpkg-reconfigure ftpd-ssl
</pre>

<p>
This covers the default setup. If the local admin has setup further
SSL infrastructure beyond that, these keys will need to be regenerated
as well.
</p>

<h1><a name="gforge">gforge</a></h1>

<p>
The gforge-web-apache2 package in sid and lenny sets up the website
with a dummy certificate if no existing certificate is found. Users are then
encouraged to replace it with a <q>real</q> one. The dummy certificate in
question is the Snake Oil one, so it should already be known as a weak
one (even without the SSL bug), but some users may accept
it without a second thought. 
</p>

<h1><a name="kerberos">MIT Kerberos (krb5)</a></h1>

<p>
No part of MIT Kerberos in Debian 4.0 (<q>Etch</q>) uses OpenSSL, and so Kerberos
in Debian 4.0 is not affected at all.
</p>

<p>
In Lenny the separate binary package krb5-pkinit uses OpenSSL.  MIT
Kerberos itself does not generate long-term key pairs even when the PKINIT
plugin is used, so any vulnerable long-term key pairs would have been
generated outside of the MIT Kerberos software itself. The PKINIT plugin
only references existing key pairs and isn't responsible for key
management.
</p>
<p>
Long-term key pairs used with PKINIT may be affected if generated on an
affected Debian system, but such generation is external to MIT Kerberos.
</p>
<p>
However, the OpenSSL random key functions are used for the DH exchange
when PKINIT authentication is used, which means that an attacker may be
able to use brute-force to gain access to the KDC response to a PKINIT
authentication and subsequently gain access to any sessions created using
service tickets from that authentication.
</p>
<p>
Any KDCs using the PKINIT plugin from Lenny should have their libssl0.9.8
packages upgraded immediately and the Kerberos KDC restarted with:
</p>
<pre>
/etc/init.d/krb5-kdc restart
</pre>
<p>
Any Kerberos ticket-granting tickets (TGTs) or encrypted sessions resulting
from PKINIT authentication using a Kerberos KDC with the affected libssl
should be treated as suspect; it's possible that attackers with packet
captures will be able to compromise those keys and sessions.
</p>

<h1><a name="openswan">OpenSWAN / StrongSWAN</a></h1>

<pre>
rm /etc/ipsec.d/private/`hostname`Key.pem /etc/ipsec.d/certs/`hostname`Cert.pem
dpkg-reconfigure (open|strong)swan
/etc/init.d/ipsec restart
</pre>

<p>
Beware: Restarting the ipsec services terminates all currently open IPSec
connections, which may need to be restarted from the other end.
</p>

<h1><a name="openvpn">OpenVPN</a></h1>

<p>
Backup your secret key files. While key names are arbitrary, they can
be detected by running
</p>
<pre>grep secret /etc/openvpn/*.conf</pre>

<p>
Recreate them using
</p>
<pre>openvpn --genkey --secret SECRET_FILENAME</pre>

<p>
Then copy the shared secret keys to the remote hosts and restart the VPN
on each host with
</p>
<pre>/etc/init.d/openvpn force-reload</pre>

<h1><a name="proftpd">Proftpd</a></h1>

<p>
The Debian packaging doesn't include key generation, so the following
steps should only be nessecary if SSL keys have been created externally.
</p>

<p>
An upcoming proftpd upload to unstable will include a tls.conf template
with the comment below.
<p>

<p>
Note that the self-signed certificate generation is bit
different from that suggested on the general openssl section, in order
to avoid using of an explicit password at daemon startup.
</p>

<p>
You can (re-)generate a self-signed certificate using a command like:
</p>
<pre>
 openssl req -x509 -newkey rsa:1024 \
         -keyout /etc/ssl/private/proftpd.key -out /etc/ssl/certs/proftpd.crt \
         -nodes -days 365
</pre>

<p>
Both files must be readable by root only. The file paths can be
checked/configured through the following configuration directives:
</p>
<pre>
TLSRSACertificateFile                   /etc/ssl/certs/proftpd.crt
TLSRSACertificateKeyFile                /etc/ssl/private/proftpd.key
TLSCACertificateFile                    /etc/ssl/certs/CA.pem
TLSOptions                              NoCertRequest
</pre>

<h1><a name="puppet">puppet</a></h1>

<p>
There are two methods to handle puppet certificates, one is via capistrano,
the second is manually.
</p>

<p>
Regenerating Puppet SSL Certificates using capistrano is detailed here:
<a href="http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL">http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL</a>
</p>

<p>
The manual steps are as follows:
</p>

<ol>
<li>You need to wipe and regenerate your CA info:
<pre>
/etc/init.d/puppetmaster stop
rm -rf $vardir/ssl/*
/etc/init.d/puppetmaster start
</pre>
<p>
However, if you are running mongrel, instead of starting puppetmaster from
the init script, you will need to first stop the front-end web listener
(apache, nginx, etc.) and then do the following:
</p>
<pre>
puppetmasterd --daemonize ; sleep 30 ; pkill -f 'ruby /usr/sbin/puppetmasterd'
</pre>
<p>
The above is necessary because for some reason when running with mongrel,
puppetmaster will not regenerate its CA.
</p>
</li>
<li>Wipe all the client certs
<pre>
/etc/init.d/puppet stop
rm $vardir/ssl/*
</pre> 
</li>
<li>Have each client request a new cert:
<pre>
puppetd --onetime --debug --ignorecache --no-daemonize
</pre> 
</li>
<li>Once all the requests have rolled in, you can sign them all at once:
<pre>
puppetca --sign --all
</pre> 
</li>
<li>Start up your puppet clients:
<pre>
/etc/init.d/puppet start
</pre>
</li>
</ol>

<p>
You could also enable autosign temporarily, if you are comfortable with that.
</p>

<h1><a name="sendmail">sendmail</a></h1>

<p>
Sendmail (both in Etch and in Lenny) optionally creates default OpenSSL
certificates at install time.
</p>

<p>
The key rollover procedure is trivial:
</p>
<pre>
/usr/share/sendmail/update_tls new
</pre>

<p>
If you have customized the templates in /etc/mail/tls, those
values will be re-used to create the new certificates.
</p>

<h1><a name="ssl-cert">ssl-cert</a></h1>

<p>
The snakeoil certificate /etc/ssl/certs/ssl-cert-snakeoil.pem can be
recreated with:
</p>

<pre>make-ssl-cert generate-default-snakeoil --force-overwrite</pre>

<h1><a name="telnetd-ssl">telnetd-ssl</a></h1>

<pre>
rm -f /etc/telnetd-ssl/telnetd.pem /etc/ssl/certs/telnetd.pem
dpkg-reconfigure telnetd-ssl
</pre>

<p>
This covers the default setup. If the local admin has setup further
SSL infrastructure beyond that, these keys will need to be regenerated
as well.
</p>

<h1><a name="tinc">tinc</a></h1>

<p>
Remove all suspect public and private key files:
</p>
<ol>
<li>Remove rsa_key.priv.</li>
<li>Edit all files in the hosts/ directory and remove the public key blocks.</li>
</ol>

<p>
Generate a new public/private key pair:
</p>
<pre>
tincd -n &lt;netname&gt; -K
</pre>

<p>
Exchange your host config file with the new public key with other
members of your VPN. Do not forget to restart your tinc daemons.
</p>

<h1><a name="tor">tor</a></h1>

<p>
Tor is not in stable, but affected in Lenny.
</p>

<p>
Clients running 0.1.2.x are not affected.  Tor nodes or hidden service
providers running any version, as well as everyone on 0.2.0.x are
affected.
</p>

<p>
Please see the
<a href="http://archives.seul.org/or/announce/May-2008/msg00000.html">vulnerability
announcement</a> on the Tor announce mailing list.
</p>

<p>
Upgrading to 0.1.2.19-3 (available in testing, unstable, backports.org, and
the usual <a
href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org
repository</a>) or 0.2.0.26-rc-1 (available in experimental and the usual <a
href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org
repository</a>) is recommended. If you run a relay these versions will force
new server keys (/var/lib/tor/keys/secret_*) to be generated.
</p>

<p>
Should you run a Tor node without using the package's infrastructure
(debian-tor user, /var/lib/tor as DataDirectory etc.) you manually need
to remove bad keys.  See the advisory link posted above.
</p>

<p>
If you are a hidden service provider, and have created your key in
the affected timeframe with a bad libssl then please delete your hidden
service's private key. This will change your hidden service's host name
and may require reconfiguring your servers.
</p>

<p>
If you are running 0.2.0.x, an upgrade is highly recommended -- 3 of the
6 v3 authority servers have compromised keys.  Old 0.2.0.x versions
will stop working in a week or two.
</p>

<h1><a name="xrdp">xrdp</a></h1>

<p>
xrdp uses generated keys. Most clients do not check those keys by
default, therefore changing them is painless. You just have to:
</p>

<pre>
rm /etc/xrdp/rsakeys.ini
/etc/init.d/xrdp restart
</pre>

<p>
xrdp is not in stable.
</p>
