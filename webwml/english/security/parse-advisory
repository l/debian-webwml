#!/usr/bin/python

# mdz, 09/2003

import sys
import re
import time
import os

class Advisory:
    def __init__(self, dsa, date, header, description, releases):
        self.dsa = dsa
        self.date = date
        self.header = header
        self.description = description
        self.releases = releases

class Release:
    def __init__(self, name, intro, filesets):
        self.name = name
        self.intro = intro
        self.filesets = filesets

class Fileset:
    def __init__(self, header, files):
        self.header = header
        self.files = files

class File:
    def __init__(self, url, size, md5sum):
        self.url = url
        self.size = size
        self.md5sum = md5sum

class AdvisoryParser:
    debug = 1

    fileinfo = r'''^\s*(?P<url>http://.*)
\s*Size/MD5 checksum:\s*(?P<size>\d+)\s+(?P<md5sum>[0-9a-f]{32})'''
    fileinfo_re = re.compile(fileinfo, re.IGNORECASE|re.MULTILINE)

    fileset = r'''^\s*(?P<filesetheader>Source archives:|.* architecture.*)

(?P<files>(?:%s\n*)+)''' % fileinfo
    fileset_re = re.compile(fileset, re.IGNORECASE|re.MULTILINE)

    release = r'''^(?P<releasename>Debian .*)
-+
(?P<intro>\n(.+\n)+)?
(?P<filesets>(?:%s\n*)+)''' % fileset
    release_re = re.compile(release, re.IGNORECASE|re.MULTILINE)

    dsa = r'''-+
Debian Security Advisory (?P<dsa>DSA ?\S+).*
.*
(?P<date>\S+\s+\d+\w*,\s+\d+).*
-+

(?P<header>(.+:.+\n)+)
(?P<description>(.*\n)+.*We recommend.*)
'''
    dsa_re = re.compile(dsa, re.IGNORECASE|re.MULTILINE)

    def parse(self, advisoryText):
        match = self.dsa_re.search(advisoryText)
        if not match:
            return None

        dsa = match.group('dsa')
        dsa.replace(' ','-')
        date = match.group('date')
        header = {}
        for line in match.group('header').strip().split('\n'):
            field, value = map(str.strip,line.split(':',1))
            header[field] = value
        description = match.group('description')

        releases = []
        for match in self.release_re.finditer(advisoryText):
            if self.debug:
                print '   -> Found packages for release:', match.group('releasename')
                
            releasename = match.group('releasename')
            intro = match.group('releasename')
            
            filesets = []
            for match in self.fileset_re.finditer(match.group('filesets')):
                if self.debug:
                    print '        -> Found a file set:', match.group('filesetheader')
                    
                filesetheader = match.group('filesetheader')
                
                files = []
                for match in self.fileinfo_re.finditer(match.group('files')):
                    if self.debug:
                        print '            -> Found a file:', match.group('url')[-20:]
                        
                    files.append(apply(File, (), match.groupdict()))
                    
                filesets.append(Fileset(filesetheader, files))
                
            releases.append(Release(releasename, intro, filesets))

        return Advisory(dsa, date, header, description, releases)

def main():
    for input in sys.argv[1:]:
        advisory = AdvisoryParser().parse(open(input).read())
        if not advisory:
            raise RuntimeError('No advisory found in input')

        packages = re.split(',?\s+',advisory.header['Package'])

        # Strip off revision number
        dsa = advisory.dsa.lower()[:-2].replace(' ', '-')

        year = time.localtime()[0]
        stem = '%d/%s' % (year,dsa)
        dataFile = stem + '.data'
        wmlFile = stem + '.wml'

        if os.path.exists(dataFile):
            raise RuntimeError(dataFile + ' already exists')
        
        data = open(stem + '.data', 'w')

        if os.path.exists(wmlFile):
            raise RuntimeError(wmlFile + ' already exists')
        wml = open(stem + '.wml', 'w')

        data.write("<define-tag pagetitle>%s %s</define-tag>\n" % (advisory.dsa, packages[0]))
        data.write("<define-tag report_date>%s</define-tag>\n" % (advisory.date))

        secrefs = []
        for field in advisory.header.keys():
            if field.startswith('CVE'):
                secrefs.append(advisory.header[field])
        if secrefs:
            data.write("<define-tag secrefs>%s</define-tag>\n" % ' '.join(secrefs))

        data.write("<define-tag packages>%s</define-tag>\n" % ' '.join(packages))
        data.write("<define-tag isvulnerable>yes</define-tag>\n")
        data.write("<define-tag fixed>yes</define-tag>\n")

        data.write("\n#use wml::debian::security\n\n")

        for release in advisory.releases:
            data.write("<h3>%s</h3>\n\n" % release.name)
            data.write("<dl>\n\n")
            for fileset in release.filesets:
                data.write("<dt>")
                if fileset.header.startswith('Source'):
                    data.write("<source>")
                elif fileset.header.find('independent') != -1:
                    data.write("<arch-indep>")
                else:
                    data.write(fileset.header)

                data.write("\n\n")
                for f in fileset.files:
                    data.write("  <dd><fileurl %s>\n" % f.url)

        data.write("\n</dl>\n")
        data.write("\n<p><md5sums http://lists.debian.org/debian-security-announce/debian-security-announce-%d/msg00000.html>\n" % year)

        data.close()

        wml.write("<define-tag description>%s</define-tag>\n" % advisory.header['Vulnerability'])
        wml.write("<define-tag moreinfo>\n")
        wml.write("<p>")
        wml.write(advisory.description.replace('\n\n', '</p>\n\n<p>'))
        wml.write("</p>")
        wml.write("\n</define-tag>\n")
        wml.write('''
# do not modify the following line
#include "$(ENGLISHDIR)/security/%s.data"
# $%sId: $
''' % (stem,''))
        # Prevent CVS from substituting $Id

if __name__ == '__main__':
    main()
