#use wml::debian::template title="Geautomatiseerd Audit Voorbeeld: RATS"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.3"

# Last Translation Update by $Author$
# Last Translation Update at $Date$

<p><a href="http://packages.debian.org/rats">RATS</a> is een algemene scanner
voor detectie van potentiële veiligheidsproblemen in een aantal 
programmeertalen.</p>

<h2>RATS uitvoeren</h2>
<p>RATS uitvoeren is gewoon een kwestie van het commando op te geven met een te
behandelen map. Elk van de herkende broncodebestanden die het vindt, zal worden
behandeld. RATS begrijpt verschillende programmeertalen: C, Perl, PHP en Python
en zal elk van hen behandelen als geldige broncode om te onderzoeken.</p>
<p>Er zijn verschillende opties die kunnen meegegeven worden naast een te 
scannen map, deze worden beschreven in de manpagina.</p>
<p>De nuttigste opties zijn deze die de uitvoer aangaan, zoals:</p>
<ul>
<li>--warning &lt;niveau&gt; (Zet het niveau van de lekken waarover moet gerapporteerd worden)
<ul>
<li>1 geeft enkel standaard en hoge belangrijkheid.</li>
<li>2 geeft medium belangrijkheid (standaard niveau).</li>
<li>3 geeft lage belangrijkheid.</li>
</ul></li>
<li>--xml  (uitvoer in XML)</li>
<li>--html (uitvoer in HTML)</li>
</ul>
<p>Er van uitgaande dat het <a href="test.c.html">testbestand</a> in de 
huidige map is, zonder andere broncodebestanden, kunnen we de scanner oproepen
met het volgende commando:</p>
<pre>
rats --warning 1 --html . &gt;output.html
</pre>
<p>Dit zal een HTML-bestand aanmaken die de resultaten van de scan bevat, het
kan ingeladen worden door een browser.</p>

<h2>De Resultaten</h2>
<p>RATS uitvoeren tegen onze <a href="test.c.html">voorbeeldcode</a> geeft 
volgende uitvoer:</p>
<hr />
<blockquote>
  <b>Severity: High</b><br />
  Issue: fixed size global buffer<br/>
    Extra care should be taken to ensure that character arrays that are
    allocated on the stack are used safely.  They are prime targets for
    buffer overflow attacks.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
10 11 12   </ul>
  <b>Severity: High</b><br/>
  Issue: strcpy<br/>
    Check to be sure that argument 2 passed to this function call will not
    copy more data than can be handled, resulting in a buffer overflow.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
18   </ul>
  <b>Severity: High</b><br/>
  Issue: getenv<br/>
    Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
22 24   </ul>
  <b>Severity: High</b><br/>
  Issue: sprintf<br/>
    Check to be sure that the format string passed as argument 2 to this
    function call does not come from an untrusted source that could have added
    formatting characters that the code is not prepared to handle.
    Additionally, the format string could contain `%s' without precision that
    could result in a buffer overflow.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
24   </ul>
  <b>Severity: High</b><br/>
  Issue: popen<br/>
    Argument 1 to this function call should be checked to ensure that it does
    not come from an untrusted source without first verifying that it contains
    nothing dangerous.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
33   </ul>
  <b>Severity: High</b><br/>
  Issue: printf<br/>
    Check to be sure that the non-constant format string passed as argument 1 
    to this function call does not come from an untrusted source that could
    have added formatting characters that the code is not prepared to handle.
  <br/>
<ul>
File: <b>./test.c</b><br/>Lines: 
42   </ul>
Total lines analyzed: <b>49</b><br>
Total time <b>0.001723</b> seconds<br>
<b>28438</b> lines per second<br>
</blockquote>
<hr />
<p>Deze uitvoer is nogal lijvig, ondanks dat de code zelf vrij kort is - dit 
toont één van de nadelen van geautomatiseerd scannen: het grote volume aan 
uitvoer.</p>

<h2>De uitvoer begrijpen</h2>
<p>De geproduceerde uitvoer is een beschrijving van de functies die werden
tegengekomen, de regelnummer waarop het lek werd gedetecteerd en een 
beschrijving van het probleem. (Omdat we het "--warning"-niveau gebruikten om
de uitvoer te beperken tot de "hoge" niveau functies, hebben we de uitvoer wat
gereduceerd).</p>
<p>Elk van de gevonden problemen moet handmatig worden onderzocht om te zien of
er iets echt mis mee is, of om te zien dat het een valse positieve is (v.b. een
functie die kan misbruikt worden die correct wordt gebruikt).</p>
<p>In dit geval kunnen we zien dat alle lekken in onze code zijn opgemerkt,
maar het is niet helemaal duidelijk zonder door de code te lopen met een editor
en de regels te matchen.</p>
<p>Een sterke zwakte is dat de uitvoer niet toont over welke regels 
gerapporteerd wordt - iets dat <a href="flawfinder">flawfinder</a> wel toestaat.</p>
<hr />
<p><a href="..">Terug naar het auditproject</a> | <a href="index">Terug naar de auditvoorbeeldenpagina</a></p>
