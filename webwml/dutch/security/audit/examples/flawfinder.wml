#use wml::debian::template title="Geautomatiseerd auditvoorbeeld: flawfinder"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.6"

# Last Translation Update by $Author$
# Last Translation Update at $Date$

<p><a href="http://packages.debian.org/flawfinder">flawfinder</a> is een 
algemene scanner voor het vinden en rapporteren van potentiële lekken in C- en
C++-broncode.</p>


<h2>flawfinder uitvoeren</h2>
<p>flawfinder uitvoeren is gewoon een kwestie van het commando op te geven met
de map- of bestandsnamen om te onderzoeken. Als een mapnaam wordt opgegeven,
dan zal het alle geldige broncodebestanden die het vindt in de map behandelen.</p>
<p>Naast een lijst van bestanden of mappen, kunnen er ook verschillende opties
worden meegegeven om het gedrag van de hulpmiddelen te sturen.</p>
<p>Elke optie wordt uitgelegd in de manpagina, maar de volgende opties zijn
bijzonder nuttig en zullen worden gebruikt in ons voorbeeld:</p>
<ul>
<li>--minlevel=X
<ul>
<li>Zet minimum risiconiveau op X voor inclusie in de uitvoer. Bereiken van 1-5,
met 1 "laag risico" en 5 "hoog risico".</li>
</ul></li>
<li>--html
<ul>
<li>Formatteer de uitvoer als HTML in plaats van gewone tekst</li>
</ul></li>
<li>--context
<ul>
<li>Toon context, v.b., de regel met het potentiële lek.</li>
</ul></li>
</ul>

<p>Om als uitvoer een HTML-bestand te krijgen die de resultaten van ons 
programma bevat en enkel rekening houdend met de "hoge risico" functies zouden
we het volgende uitvoeren:</p>
<pre>
flawfinder --html --context --minlevel=4 test.c &gt; output.html
</pre>

<h2>De Resultaten</h2>
<p>flawfinder uitvoeren tegen onze <a href="test.c.html">voorbeeldcode</a> 
geeft volgende uitvoer:</p>

<hr />
<div class="sampleblock">
<p>
Examining test.c <br>
<ul>
<li>test.c:18: <b>  [4] </b> (buffer) <i> strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused).  </i>
<pre>
      strcpy( dir, argv[ 1 ] );
</pre>
<li>test.c:24: <b>  [4] </b> (buffer) <i> sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf.  </i>

<pre>
	sprintf( dir, "%s", getenv( "HOME" ) );
</pre>
<li>test.c:33: <b>  [4] </b> (shell) <i> popen:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available.  </i>
<pre>
    fp = popen( cmd, "r" );
</pre>
<li>test.c:42: <b>  [4] </b> (format) <i> printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification.  </i>

<pre>
      printf( buff );
</pre>
</ul>
<p>
Number of hits = 4
<br>
Number of Lines Analyzed = 48 in 0.53 seconds (1392 lines/second)
<br>
</div>
<hr />

<h2>De uitvoer begrijpen</h2>
<p>Zoals de uitvoer van <a href="RATS">RATS</a> is dit rapport zeer gemakkelijk
te lezen. Het toont duidelijk de functies die gedetecteerd zijn als potentieel
gevaarlijk met een beschrijving van het probleem.</p>
<p>Contextinformatie laten zien is ook zeer nuttig omdat het onmiddellijk 
de aandacht kan trekken op de belangrijke gebieden of andere rapporten afwijzen
omdat ze ongeldig zijn.</p>
<p>De analyse van <a href="test.c">onze voorbeeldcode</a> is tamelijk 
intelligent, in de zin dat het niet waarschuwt bij <i>elk</i> gebruik van de
lastige <tt>strcpy</tt>-functie - enkel bij diegene die het gevaarlijk acht.</p>
<p>Op deze manier is het geslaagd om alle mogelijke lekken te tonen zonder 
valse positieven.</p>
<hr />
<p><a href="..">Terug naar het auditproject</a> | <a href="index">Terug naar de auditvoorbeeldenpagina</a></p>
