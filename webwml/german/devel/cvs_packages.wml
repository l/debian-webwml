#use wml::debian::template title="CVS gemeinsam mit Debian-Paketen verwenden"
#use wml::debian::translation-check translation="1.7"
# $Id$
# Translation: Gerfried Fuchs <alfie@debian.org> 2002-07-23

<p>Dieses kurze Dokument ist nur dazu gedacht, eine kurze Hilfe zu bieten, um
Pakete auf CVS-Verwaltung umzustellen. Es ist wahrscheinlich nur für wenige
Leute interessant, die noch nicht mit CVS und Versionsverwaltungen vertraut
sind. Ebenfalls gibt es ein Script in <code>/usr/share/doc/cvs-buildpackage</code>
namens <code>cvs-pkginit</code> (sowohl das Script als auch die Manual-Seite
sind mit gzip gepackt), das die Zusammenfassung dieses HOWTO-Dokuments
ausgibt.

<p>Um zum Beispiel ein Paket foo, Version bar1, Debian-Revision 3 zu
konvertieren, versuchen Sie folgendes:

<pre>
% cvs-pkginit foo bar1 3
</pre>

und werfen Sie einen Blick auf die Zusammenfassung.

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>Beachten Sie: In der folgenden Diskussion sind die Einträge zwischen den
spitzen Klammern &lt;&gt; dazu gedacht, für jeden Fall angepasst zu werden,
alles andere ist wörtlich zu nehmen. Falls Sie zum Beispiel über ein Paket mit
der Upstream-Version 2.1.82 reden, dann bedeutet &lt;$version&gt; 2.1.82, und
upstream_version_&lt;$version | tr  . _&gt; bedeutet upstream_version_2_1_82.

<ol>
<li>CVS aufsetzen

<pre>
   $ CVSROOT=/wo/ihr/Repository/sein/wird
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>Dies erlaubt es Ihnen, Ihre Debian-Pakete von allem anderem in Ihrem
   Repository zu trennen, entweder aktuell oder in der Zukunft. Selbst wenn
   Sie glauben, dass Sie CVS für nichts anderes benötigen, ist es einfacher,
   Ihr Repository nun zu klassifizieren, als sich später zu ärgern (es ist
   recht schwer, Dinge in ihrem Repository später herumzuverschieben).

   <p>Falls mehr als eine Person das CVS verwenden soll, sollten Sie sich
   vergewissern, dass diese das Repository unter Verwendung von CVS
   tatsächlich ändern können. Wählen Sie eine Gruppe (oder einen Satz von
   Gruppen), die Zugriff auf einen Teil des Repositorys haben soll, und
   setzen die Zugriffsrechte:

<pre>
   \# chgrp &lt;archiv&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>Dies stellt sicher, dass es Mitgliedern der archiv-Gruppe erlaubt ist,
   das Repository zu konfigurieren. Nun müssen Sie noch sicherstellen, dass
   es der richtigen Gruppe von Leuten erlaubt ist, Teile des Repositorys zu
   ändern.

<pre>
   \# mkdir $CVSROOT/debian/&lt;paket1&gt;
   \# chgrp &lt;gruppe1&gt; $CVSROOT/debian/&lt;paket1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paket1&gt;
   \# mkdir $CVSROOT/debian/&lt;paket2&gt;
   \# chgrp &lt;gruppe2&gt; $CVSROOT/debian/&lt;paket2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paket2&gt;
</pre>

   <p>Als normaler Benutzer sollten Sie ebenfalls Ihr CVS-Repository
   angeben, entweder durch die Verwendung von <kbd>"-d
   /wo/ihr/Repository/sein/wird"</kbd> oder durch etwas ähnliches wie
   folgendes in Ihr Profile zu schreiben.

<pre>
   $ CVSROOT=/wo/ihr/Repository/sein/wird
   $ export CVSROOT
</pre>


<li>Module verwenden

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>Im folgenden sollte &lt;paket&gt; der Name des Pakets sein, wie er in
   der debian/changelog Datei steht.

   <p>Fügen Sie die folgenden Zeilen hinzu, die erste ist unverzichtbar, die
   zweite kann kopiert werden und ist selbstbeschreibend:

<pre>
   modules   CVSROOT modules
   &lt;paket&gt; debian/&lt;paket&gt;
</pre>

<pre>
   \# cvs commit -m 'Erste Module definiert'
</pre>


<li>Auf CVS-Verwendung vorbereiten

   <p>Fügen Sie den Quellcode-Baum mit den folgenden Befehlen ein (unter der
   Annahme, dass er bereits debianisiert ist, und es eine orig.tar.gz Datei
   gibt). Beachten Sie, dass die Originalquellen mit einem -ko (Binär-Dateien
   werden beachtet) importiert werden, aber keine lokalen Änderungen
   durchgeführt werden. Bitte beachten Sie, dass Epochen-Nummern bei der
   Ermittlung der CVS Tag-Namen ignoriert werden (sie werden üblicherweise dazu
   verwendet, um dpkg's Meinung über die Paketsortierung zu ändern, und sind
   allgemein nicht für CVS-Tags relevant).

   <p>Wechseln Sie das Verzeichnis, in dem Sie Ihren nicht-cvs entpackten
   debianisierten Entwicklungs-Quellcode-Baum haben, den wir ins CVS
   einbringen wollen (dieser ist allgemein nicht unterhalb des CVSROOT).

   <p>ICH WIEDERHOLE: Im folgenden sollte &lt;paket&gt; der Paket-Name wie
   in der debian/changelog Datei sein.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befindet/
   $ tar zvfx &lt;paket&gt;_&lt;version&gt;.orig.tar.gz
   $ cd &lt;paket&gt;_&lt;version&gt;.orig
   $ cvs import -ko -m 'Import des unveränderten Quellcodes' \
       debian/&lt;paket&gt; source-dist upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>Sie wollen vielleicht das Zweig-Tag source-dist auf etwas anderes
   ändern. (Der cvs-buildpackage Betreuer verwendet für gewöhnlich das Tag
   upstream (was eine Redundanz-Studie ist ;-))).

   <p>Wenn Sie CVS als root aufgesetzt haben und es nicht für eine Gruppe
   schreibbar gemacht haben, müssen Sie $CVSROOT/debian/&lt;paket&gt; als root
   erstellen und die Gruppen oder Benutzer-Rechte im Repository auf die
   entsprechende Gruppe oder Benutzer ändern. Der CVS-Import wird eine Warnung
   ausgeben, dass es das debian/&lt;package&gt; nicht erstellen kann, aber das
   ist in Ordnung.

   <p>Der nächste Schritt ist es, den gesamten Verzeichnisbaum zu prüfen und
   all Ihre Änderungen einzubauen.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befindet/
   $ cvs checkout &lt;paket&gt;
</pre>

   <p>Falls Sie bereits eine debianisierte Version erstellt haben, aber CVS
   zuvor noch nicht benutzt haben, möchten Sie vielleicht die folgenden
   Befehle ausführen, um ihre Änderungen aufzunehmen. Anschließend sollten
   Sie dieses Release mit einem Tag versehen, um es später wieder auschecken
   zu können.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befindet/&lt;paket&gt;-&lt;version&gt;
   $ diff -qrBbw . /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;/ | grep -v CVS
   $ FILES_CHANGED_LOCALLY="&lt;oben angezeigte Ausgabe&gt;"
   $ tar cf - $FILES_CHANGED_LOCALLY | \
       tar -C /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt; -xvpf -
   $ cd /wo/sich/ihr/Quellcode/Baum/befindet/&lt;paket&gt;
</pre>

   <p>Bitte vergewissern Sie sich, dass die Datei debian/rules ausführbar ist,
   da sie auf diesem Weg als ausführbar exportiert werden sollte, und es keine
   Probleme mit dem Ausführen von dpkg-buildpackage auf den exportierten
   Quellcode geben wird. Im Allgemeinen überzeugen Sie sich davon, dass
   <b>alle</b> Dateien die richtigen Zugriffsrechte besitzen, bevor Sie sie
   ins CVS-Repository übergeben.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;
   $ cvs add debian &lt;alle anderen hinzugefügten Dateien ebenfalls&gt;
</pre>

   <p>Beachten Sie, das Sie ebenfalls alle zusätzlichen Dateien händisch
   hinzufügen müssen, die im Repository gespeichert werden sollten, speziell
   alle Dateien im debian Unterverzeichnis. Beachten Sie ebenfalls, dass der
   cvs add Befehl <i>nicht</i> rekursiv arbeitet, daher sollen Sie händisch
   die Unterverzeichnisse hinzufügen. (cd debian; cvs add *)

   <p>Eine nette Sache ist es, dass Ihnen ein Aufruf von cvs update den Status
   von allen Dateien im Verzeichnis anzeigt.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;
   $ cvs update
</pre>

   <p>Die Ausgabe sieht wie folgt aus:
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? example1
</pre>
   M bedeutet modifiziert (muss übergeben werden), A bedeutet hinzugefügt
   (muss übergeben werden), ? bedeutet, dass CVS nichts über diese Datei weiß
   (muss eventuell hinzugefügt werden?). Wenn Sie damit zufrieden sind, dass
   nichts vergessen wurde, und alle Dateien die benötigten Zugriffsrechte
   haben, sind sie bereit zum Übergeben.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;
   $ cvs commit -m 'Alle Änderungen für Debian durchgeführt'
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; .
</pre>

   <p>Der neue Quellcode-Baum wird sich in einem Verzeichnis befinden, das die
   Versionsnummer nicht beinhaltet. Das ist jedoch kein Problem, wie wir
   später sehen werden.

   <p>Falls Sie jedoch stattdessen das Debian-Verzeichnis neu erstellen
   (eventuell einfacher, jedoch weniger automatisiert):

<pre>
   $ mkdir debian
</pre>

   <p>Erstellen Sie alle benötigten Debian-Dateien und fügen Sie diese zur
   Quellcode-Verwaltung hinzu.

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>Danach wird die nächste Übergabe all ihre Dateien enthalten.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;
   $ cvs commit -m &lt;eine Meldung&gt;
</pre>

<li>Einen Release vorbereiten

   <p>Bevor Sie einige der Debian-Befehle ausführen können, die ein Paket
   bauen, müssen Sie das Modul ohne all die CVS Unterverzeichnisse
   auschecken. Dies wird mit dem `<kbd>export</kbd>' Befehl durchgeführt.
   Aber als erstes müssen Sie alle Änderungen übergeben und es mit einer
   Release-Nummer versehen.

<pre>
   $ cvs commit -m &lt;Meldung&gt;
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt;
</pre>


<li>Einen Release durchführen

   <p>Sie können entweder den cvs-buildpackage Mechanismus verwenden
   (bevorzugt), oder einen händischen Export. Prüfen Sie zuerst den
   cvs-buildpackage Weg als Trockenlauf (vergewissern Sie sich, dass die Tags
   passen) wie folgt (Sie sollten /etc/cvsdeb.conf konfiguriert haben):

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>Dann führen Sie den tatsächlichen Durchlauf unter der Annahme aus, dass
   sudo ein Programm ist, mit dem Sie root-Zugriff erlangen können.

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>Oder, um alles händisch zu tun:

   <p>Exportieren Sie das Paket.

<pre>
   $ cvs export -d &lt;paket&gt;-&lt;version&gt; \
         -r debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; \
             &lt;paket&gt;
</pre>

   <p>Nun können Sie mit dem üblichen Release-Export Mechanismus fortfahren.


<hr>

   <p>Sie sind fertig! Gratulation! Hier ein paar Aufgaben, die Sie an ihrem
   Quellcode-Baum vornehmen können:

<hr>

<li>Dateien löschen oder umbenennen

   <p>Der übliche Weg, eine Datei umzubenennen ist es, sie von ALT nach NEU zu
   kopieren, und dann die gewöhnlichen CVS-Befehle zu verwenden, um ALT aus
   dem Repository zu löschen und NEU hinzuzufügen. (Sowohl ALT als auch NEU
   können relative Pfade enthalten, zum Beispiel `<code>foo/bar.c</code>').

<pre>
   $ mv ALT NEU
   $ cvs remove ALT
   $ cvs add NEU
   $ cvs commit -m "ALT auf NEU umbenannt" ALT NEU
</pre>

   <p>Dies ist der einfachste Weg, eine Datei umzubenennen, sie ist
   fehlerfrei, und sie erhält den Entwicklungsverlauf. Beachten Sie, dass
   Sie um auf die Geschichte der Datei zugreifen zu können, die alte oder die
   neue Datei angeben müssen, je nachdem, welchen Teil der Geschichte Sie
   wünschen. Zum Beispiel zeigt Ihnen `<kbd>cvs log OLD</kbd>' die Log-Datei
   bis zum Zeitpunkt der Umbenennung.


<li>Ein Modul mit dem import Befehl aktualisieren

   <p>Wenn eine neue Version des Quellcodes herauskommt, importieren Sie ihn
   in das Repository mit dem gleichen `<kbd>import</kbd>' Befehl, den Sie auch
   zum Anlegen des Repositorys verwendet hatten. Der einzige Unterschied ist,
   dass Sie diesmal ein anderes Release-Tag verwenden, und eine andere
   Meldung.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;neues \
         Quellcode-Verzeichnis&gt;
   $ cvs import -m 'Neues Release importieren' debian/&lt;paket&gt; source-dist \
         upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>Nun müssen wir die vorgenommenen Änderungen in die neue Revision
   einarbeiten. Der beste Weg dies zu tun, ist unser Arbeitsverzeichnis
   umzubenennen (das auf dem alten Upstream-Quellcode basiert) und eine neue
   Kopie des Pakets auszuchecken, die die Änderungen <b>enthält</b>, die am
   Upstream-Quellcode vorgenommen wurden. Dies macht man wie folgt:

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird
   $ mv &lt;paket&gt; &lt;paket&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;paket&gt;
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird/&lt;paket&gt;
</pre>

   <p>Diese Befehle werden die neueste Überarbeitung von &lt;paket&gt;
   auschecken und die seit gestern vorgenommenen Änderungen am Vendor-Zweig
   `<code>source-dist</code>' in die Arbeitskopie einbringen. Falls es
   Konflikte während der Zusammenführung gibt, sollten diese wie gewöhnlich
   aufgelöst werden. Anschließend können die geänderten Dateien übergeben
   werden.

   <p>Die Verwendung eines Datums wie oben vorgeschlagen nimmt an, dass Sie
   nicht mehr als ein Release eines Produkts pro Tag importieren. Falls Sie
   dies tun, können Sie stattdessen immer etwas wie folgendes verwenden:

<pre>
   $ cvs checkout -jupstream_version_&lt;alteversion|tr . _&gt; \
                  -jupstream_version_&lt;neueversion|tr . _&gt; &lt;paket&gt;
</pre>

   <p>In diesem Fall sind die beiden oben angeführten Befehle gleich.

   <p>Bei Dateien, die nicht lokal verändert wurden, wird die neu erstellte
   Überarbeitung die HEAD-Überarbeitung.

   <p>Daher prüfen Sie, ob alle Dateien ordnungsgemäß aktualisiert wurden.
   Im Speziellen vergessen Sie nicht, die debian/changelog Datei zu
   ändern!

   <p>Wenn Sie zufrieden sind, können Sie die alte Version aus dem
   Arbeitsverzeichnis löschen. Prüfen Sie bitte doppelt, dass Sie das richtige
   Verzeichnis löschen!
   
<pre>
   $ rm -rf ../&lt;paket&gt;.old
</pre>

   <p>Jetzt sind Sie dazu bereit, ein Release vorzubereiten.

<li>Den Quellcode-Baum löschen, um Plattenplatz zu sparen

   <p>Um den aktuellen Arbeits-Quellcode-Baum zu löschen, empfehlen wir nicht
   <kbd>rm -rf</kbd> zu verwenden, sondern die CVS-Befehle, die zusätzlich
   prüfen, ob Sie lokale Änderungen vorgenommen haben, die noch nicht
   übergeben sind.

<pre>
   $ cd /wo/sich/ihr/Quellcode/Baum/befinden/wird
   $ cvs release -d &lt;paket&gt; 
</pre>


<li>Wörterverzeichnis

<pre>
   Tags         symbolische Namen für Überarbeitungen
   Repository	  Archiv der Quellcode-Dateien
</pre>

<li>Anhang:

 <p>A: CVS TAG KONVENTIONEN

<pre>
 |========================================================================|
 |Upstream Version     | &lt;version&gt;                                        |
 |Debian Überarbeitung | &lt;revision&gt;                                       |
 |Orig. tar Dateiname  | paket_&lt;version&gt;.orig.tar.gz                      |
 |Debian-Paket Name    | paket_&lt;version&gt;-&lt;revision&gt;_&lt;arch&gt;.deb            |
 |CVS Hersteller-Tag   | upstream_version_&lt;version  | tr . _&gt;             |
 |CVS aktuelles Tag    | debian_version_&lt;revision | tr . _&gt;               |
 |========================================================================|
</pre>

 <p>Beispiele:
<pre>
 |========================================================================|
 |                     | Upstream Quellcode      | Reine Debian-Pakete    |
 |========================================================================|
 |Upstream Version     | 2.76                    | 3.38                   |
 |Debian Überarbeitung | 1.2                     |                        |
 |Orig. tar Dateiname  | make_2.76.orig.tar.gz   |                        |
 |Debian-Paket Name    | make_2.76-1.2_i386.deb  | kpkg_3.38_i386.deb     |
 |CVS Hersteller-Tag   | upstream_version_2_76   | upstream_version_3_38  |
 |CVS aktuelles Tag    | debian_version_2_76-1_2 | debian_version_3_38    |
 |========================================================================|
</pre>

 <p>Beachten Sie, dass die Epoch-Nummern bei der Erstellung der CVS Tag-Namen
 ignoriert werden (sie werden üblicherweise dazu benutzt, um dpkg's Meinung
 über die Paketreihenfolge zu ändern, und sind daher üblicherweise auch nicht
 für CVS-Tags relevant).

</ol>
