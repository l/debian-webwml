#use wml::debian::template title="Debian »testing« Distribution" BARETITLE=true
#include "$(ENGLISHDIR)/releases/info"
#use wml::debian::translation-check translation="1.19"
# $Id$
# Translation: Gerfried Fuchs <alfie@debian.org> 2002-10-04

<p>Für grundlegende Benutzer-gerichtete Informationen über die testing
Distribution lesen Sie bitte <a href="$(DOC)/FAQ/ch-ftparchives#s-testing">die
Debian-FAQ</a>.</p>

<p>Ein wichtiges Detail, das beachtet werden sollte, sowohl für Benutzer und
die Entwickler von testing, ist, dass Sicherheitsaktualisierungen für testing
<strong>nicht vom Sicherheits-Team verwaltet werden</strong>. Für weitere
Informationen lesen Sie die <a href="../security/faq#testing">FAQ des
Sicherheits-Teams</a>.</p>

<p>Diese Seite behandelt primär die Aspekte von »testing«, die für
Debian-Entwickler wichtig sind.</p>


<h2>Wie »testing« arbeitet</h2>

<p>Die »testing« Distribution ist eine automatisch generierte Distribution.
Sie wird aus der »unstable« Distribution von einem Satz aus Skripten
generiert, die versuchen Pakete hinüber zu bewegen, die ausreichend
wahrscheinlich keine wichtigen Fehler enthalten. Sie machen es auf eine Art,
die sicherstellt, dass die Abhängigkeiten von anderen Paketen in testing immer
aufgelöst werden können.</p>

<p>Ein Paket (eine bestimmte Version davon) wird nach testing gebracht, wenn
es alle der folgenden Kriterien erfüllt:</p>

<ol>
  <li>Es muss in unstable für 10, 5 oder 2 Tage vorhanden sein, abhängig von
    der Dringlichkeit des Uploads;</li>

  <li>Es muss auf allen Architekturen übersetzt und aktuell sein, auf denen es
    zuvor für unstable übersetzt war;</li>

  <li>Es muss weniger, oder gleich viel, release-kritische Fehler als die
    aktuell in »testing« enthaltene Version haben (lesen Sie
    weiter unten für <a href="#faq">nähere Informationen</a>);</li>

  <li>All seine Abhängigkeiten müssen <em>entweder</em> von Paketen erfüllt
    werden können, die sich bereits in »testing« befinden, <em>oder</em> von
    der Gruppe der Pakete erfüllt werden, die zur gleichen Zeit installiert
    werden;</li>

  <li>Der Arbeitsgang des Installierens der Pakete nach »testing« darf keine
    Pakete beeinträchtigen, die sich augenblicklich in »testing« befinden.
    (Lesen Sie weiter unten für <a href="#faq">weitere
    Informationen</a>.)</li>
</ol>

<p>Ein Paket, das die ersten drei der oben angeführten Regeln erfüllt, wird
<q>Valid Candidate</q> (gültiger Kandidat) genannt.</p>

<p>Das Update-Skript zeigt an, wann jedes Paket aus »unstable« nach »testing«
eingebracht werden könnte. Die Ausgabe ist zweigeteilt:</p>

<ul>
  <li>Die <a href="http://ftp-master.debian.org/testing/update_excuses.html">\
      Update-Ausreden</a>
      [<a href="http://ftp-master.debian.org/testing/update_excuses.html.gz">\
      gzipped</a>]:
      Liste aller Kandidat-Paket Versionen und der grundsätzliche Status ihrer
      Übertragung nach »testing«; dies ist etwas kürzer und netter als
  </li>
  <li>Die <a href="http://ftp-master.debian.org/testing/update_output.txt">\
      Update Ausgabe</a>
      [<a href="http://ftp-master.debian.org/testing/update_output.txt.gz">\
      gzipped</a>]:
      Die komplette, eher grobe Ausgabe der »testing« Skripte, wie sie die
      Kandidaten durchlaufen.
  </li>
</ul>


<h2><a name="faq">Häufig gestellte/beantwortete Fragen</a></h2>

<h3><q>Was sind release-kritische Fehler, und wie werden sie gezählt?</q></h3>

<p>Alle Fehler von einigen höheren Dringlichkeiten werden standardmäßig als
<em><a href="http://bugs.debian.org/release-critical/">release-kritisch</a></em>
gezählt; im Augenblick sind das <strong>critical</strong>,
<strong>grave</strong> und <strong>serious</strong> Fehler.</p>

<p>Von solchen Fehlern wird angenommen, dass sie eine Auswirkung auf die
Chancen haben, dass ein Paket mit dem stabilen Release von Debian freigegeben
wird; allgemein gesehen kommt ein Paket, das offene release-kritische Fehler
hat, nicht nach »testing«, und wird infolgedessen nicht für »stable«
freigegeben.</p>

<p>Der »testing« Fehler-Zähler für ein Paket wird grob als der endgültige
Fehler-Zähler herangezogen, wenn die »testing« Version mit der »unstable«
Version verglichen wird. Die Fehler mit Tags für
<strong><current_release_name></strong> oder
<strong><current_testing_name></strong> werden nicht gezählt. Fehler mit dem
Tag <strong>sid</strong> werden jedoch gezählt.</p>


<h3><q>Wie kann ein Paket, das nach »testing« installiert wird, möglicherweise
andere Pakete beeinträchtigen?</q></h3>

<p>Die Distribution-Archive können nur eine Version
eines Paketes enthalten; ein Paket ist durch seinen Namen definiert.
Falls also das Source-Paket <tt>acmefoo</tt> nach »testing« installiert wird,
gemeinsam mit seinen Binär-Paketen <tt>acme-foo-bin</tt>,
<tt>acme-bar-bin</tt>, <tt>libacme-foo1</tt> und <tt>libacme-foo-dev</tt>,
wird die alte Version gelöscht.</p>

<p>Jedoch kann die alte Version ein Binär-Paket mit einer alten soname einer
Bibliothek zur Verfügung stellen, wie <tt>libacme-foo0</tt>. Das Löschen der
alten <tt>acmefoo</tt> wird <tt>libacme-foo0</tt> löschen, was jedes Paket
betrifft, das davon abhängig ist.</p>

<p>Offensichtlich betrifft dies hauptsächlich Pakete, die veränderliche Sätze
von Binär-Paketen in verschiedenen Versionen zur Verfügung stellen (daher
hauptsächlich Bibliotheken). Jedoch betrifft es ebenso Pakete, zu denen
Versionsabhängigkeiten mit den ==, &lt;= oder &lt;&lt; Varianten definiert
wurden.</p>

<p>Wenn die Menge der Binär-Pakete, die von einem Quellcode-Paket
bereitgestellt werden, sich auf diese Weise ändert, müssen alle
Pakete, die von den alten Binär-Dateien abhängen, aktualisiert werden,
damit sie stattdessen von den neuen Binär-Dateien abhängen. Da die
Installation eines solchen Quellcode-Pakets nach »testing« alle Pakete
in »testing« beeinträchtigt, die von ihm abhängen, muss dabei
sorgfältig vorgegangen werden: Alle abhängigen Pakete müssen
aktualisiert werden und bereit für die Installation nach »testing«
sein, damit sie nicht beeinträchtigt werden. Wenn alles bereit ist,
ist normalerweise auch noch das manuelle Eingreifen des Release-Betreuers
oder eines Assistenten nötig.</p>

<p>Wenn Sie Probleme wie diese mit komplizierten Gruppen von Paketen
haben, bitten Sie auf debian-devel oder debian-release um Hilfe.</p>


<h3><q>Ich versteh es immer noch nicht! Die »testing« Skripte sagen, dass
dieses Paket ein gültiger Kandidat ist, aber es ist immer noch nicht in
»testing«.</q></h3>

<p>Dies passiert meist dann, wenn die Installation des Paketes auf irgend eine
Art, direkt oder indirekt, einige andere Pakete beeinträchtigen würde.</p>

<p>Vergessen Sie nicht, die Abhängigkeiten ihres Pakets zu bedenken. Nehmen
wir an, ihr Paket ist von libtool abhängig, oder libltdl<var>X</var>. Ihr
Paket wird nicht nach »testing« kommen, bevor die richtige Version von libtool
ebenfalls bereit ist, mitzukommen.</p>

<p>Das wiederum wird nicht passieren, bevor das Installieren von libtool keine
Dinge beeinträchtigt, die sich bereits in »testing« befinden. Anders
ausgedrückt, bevor nicht alle anderen Pakete, die von libltdl<var>Y</var>
abhängig sind (wobei <var>Y</var> die frühere Version ist), neu übersetzt
wurden und all deren release-kritischen Fehler verschwunden sind, usw., wird
keines dieser Pakete nach »testing« wandern.</p>

<p>Dies ist es, wo die
<a href="http://ftp-master.debian.org/testing/update_output.txt">textliche
Ausgabe</a>
[<a href="http://ftp-master.debian.org/testing/update_output.txt.gz">\
gzipped</a>] nützlich ist: Sie gibt Hinweise (obgleich sehr knappe), welche
Pakete beeinträchtigt werden würden, wenn ein gültiger Kandidat zu »testing«
hinzugefügt wird.</p>


<h3><q>Wieso ist es manchmal schwierig, <kbd>Architecture: all</kbd> Pakete
nach »testing« zu bekommen?</q></h3>

<p>Wenn das <kbd>Architecture: all</kbd> Paket installiert wird, muss es
möglich sein, seine Abhängigkeiten auf <strong>all</strong>en Architekturen zu
erfüllen. Wenn es von bestimmten Paketen abhängt, die sich nur auf einer
beschränkten Anzahl der Debian Architekturen übersetzen lassen, dann kann es
dies nicht erfüllen.</p>

<p>Jedoch ignoriert »testing« im Augenblick die Installationsmöglichkeit von
<kbd>Architecture: all</kbd> Paketen auf nicht-i386 Architekturen. (<q>Es ist
ein grober Hack und ich bin nicht wirklich damit zufrieden, ihn gemacht zu
haben, aber hier ist er.</q> --aj)</p>


<h3><q>Mein Paket bleibt zurück, da es auf einigen Architekturen veraltet ist.
Was kann ich tun?</q></h3>

<p>Prüfen Sie den Status ihres Paketes in der
<a href="http://buildd.debian.org/build.php">Build-Log Datenbank</a>. Falls
sich das Paket nicht übersetzen lässt, wird es als <em>failed</em> markiert;
untersuchen Sie das Build-Log und beheben Sie die Probleme, die vom Quellcode
ihres Pakets verursacht wurden.</p>

<p>Falls Sie bemerken, dass einige Architekturen die neue Version ihres
Paketes gebaut haben, aber dies nicht in der Ausgabe der »testing«-Skripte
zu sehen ist, müssen Sie etwas geduldiger sein, bis der entsprechende
buildd-Betreuer die Dateien in das Debian-Archiv hochlädt.</p>

<p>Falls Sie bemerken, dass einige Architekturen ihre neue Version des Pakets
überhaupt nicht bauen, trotz der Tatsache, dass Sie eine Behebung für einen
früheren Fehler hochgeladen haben, ist der Grund wahrscheinlich, dass es als
auf Abhängigkeit wartend (Dep-Wait) markiert ist.  Sie können sich ebenfalls
die Liste dieser sogenannten
<a href="http://buildd.debian.org/stats/">möchte-bauen Zustände</a> ansehen, um
sicher zu gehen.</p>

<p>Diese Probleme werden üblicherweise nach einiger Zeit behoben, aber falls
Sie für längere Zeit gewartet haben (sagen wir, zwei Wochen oder länger),
informieren Sie den entsprechenden Portierungs-buildd Betreuer, falls eine
solche Adresse auf der <a href="$(HOME)/ports/">Portierungs-Webseite</a>
angegeben ist, oder die Mailingliste der Portierung.</p>


<h3><q>Gibt es irgendwelche Ausnahmen? Ich bin sicher, dass <tt>acmefoo</tt>
es gerade nach »testing« geschafft hat, obwohl es nicht alle Anforderungen
erfüllt hat.</q></h3>

<p>Der Release-Verwalter kann die Regeln auf zwei Arten umgehen:</p>

<ul>
  <li>Er kann entscheiden, dass die Beeinträchtigung, die durch die
    Installation einer neuen Bibliothek passiert, die Dinge verbessert statt
    verschlechtert, und sie gemeinsam mit ihren Abhängigkeiten hinein
    lassen.</li>
  <li>Er kann auch manuell Pakete aus »testing« herausnehmen, die nicht mehr
    funktionieren würden, damit neue Dinge installiert werden können.</li>
</ul>


<h3><q>Können Sie ein echtes, nicht-triviales Beispiel nennen?</q></h3>

<p>Hier ist eines: Wenn das Source-Paket <tt>apache</tt> nach »testing«
installiert wird, gemeinsam mit seinen Binär-Paketen <tt>apache</tt>,
<tt>apache-common</tt>, <tt>apache-dev</tt> und <tt>apache-doc</tt>, wird die
alte Version gelöscht.</p>

<p>Jedoch sind alle Apache-Module von <code>apache-common (&gt;=
<var>etwas</var>), apache-common (&lt;&lt; <var>etwas</var>)</code> abhängig,
daher beeinträchtigt diese Änderung all diese Abhängigkeiten. Folglich müssen
alle Apache-Module gegen die neue Version von Apache übersetzt werden, damit
»testing« aktualisiert werden kann.</p>

<p>Lassen Sie mich darauf etwas näher eingehen: Nachdem alle Module in
unstable aktualisiert wurden, um mit dem neuen Apache zusammenzuarbeiten,
versuchen die »testing« Skripte <tt>apache-common</tt> und erkennen, dass das
alle Apache-Module beeinträchtigen würde, da diese ein <code>Depends:
apache-common (&lt;&lt; <var>die aktuelle Version</var>)</code> besitzen, und
versuchen dann <tt>libapache-<var>foo</var></tt> um herauszufinden, dass es
nicht installiert wird, weil es ein <code>Depends: apache-common (&gt;=
<var>die neue Version</var>)</code> hat.</p>

<p>Jedoch werden sie später eine andere Logik anwenden (manches Mal durch einen
manuellen Eingriff ausgelöst): Sie ignorieren die Tatsache, dass
<tt>apache-common</tt> Sachen beeinträchtigt, und machen mit Dingen weiter, die
funktionieren; wenn es immer noch nicht funktioniert, wenn wir mit allem
fertig sind, was getan werden kann, zu schade, aber vielleicht
<strong>wird</strong> es funktionieren. Später werden sie all die zufälligen
<tt>libapache-<var>foo</var></tt> Pakete versuchen und sehen, dass diese
tatsächlich funktionieren.</p>

<p>Nachdem alles versucht wurde, prüfen sie, wie viele Pakete beeinträchtigt
wurden, bewerten, ob dies besser oder schlechter ist, als das was ursprünglich
vorhanden war, um entweder alles zu akzeptieren oder es zu vergessen. Sie
werden dies in <tt>update_output.txt</tt> in den »<code>recur:</code>« Zeilen
sehen.</p>

<p>Zum Beispiel:</p>

<pre>
         recur: [<var>foo</var> <var>bar</var>] <var>baz</var>
</pre>

<p>sagt grundsätzlich aus, <q>habe bereits entdeckt, dass <var>foo</var> und
<var>bar</var> Dinge verbessern und versuche nun <var>baz</var> um zu sehen,
was passiert, selbst wenn dies Dinge zerbricht</q>. Die Zeilen von
<tt>update_output.txt</tt>, die mit »<code>accepted</code>« beginnen, zeigen
Dingen an, die Dinge verbessern, und »<code>skipped</code>« Zeilen
verschlechtern die Dinge.</p>


<h3><q>Die <tt>update_output.txt</tt> Datei ist komplett unleserlich!</q></h3>

<p>Das ist keine Frage. ;-)</p>

<p>Nehmen wir ein Beispiel:</p>

<pre>
 skipped: cln (0) (150+4)
     got: 167+0: a-40:a-33:h-49:i-45
     * i386: ginac-cint, libginac-dev
</pre>

<p>Dies bedeutet, dass falls <tt>cln</tt> nach »testing« kommt,
<tt>ginac-cint</tt> und <tt>libginac-dev</tt> in »testing« auf i386 nicht mehr
installierbar sein werden. Beachten Sie, dass die Architekturen in
alphabetischer Reihenfolge geprüft werden und nur die Probleme auf der ersten
Architektur mit Problemen angezeigt werden &ndash; das ist der Grund, warum die
Alpha Architektur so oft angezeigt wird.</p>

<p>Die »got« Zeilen beinhalten die Anzahl der Probleme in »testing« auf den
verschiedenen Architekturen (bis zur ersten Architektur, in der ein Problem
gefunden wird &ndash; lesen Sie oben). Das »i-45« bedeutet, dass falls <tt>cln</tt>
nach »testing« gebracht würde, würde es 45 nicht installierbare Pakete auf
i386 geben. Einige der Einträge oberhalb und unterhalb von <tt>cln</tt>
zeigen, dass es zurzeit 43 nicht installierbare Pakete in »testing« auf i386
gibt.</p>

<p>Die »skipped: cln (0) (150+4)« Zeile bedeutet, dass es immer noch 150
Pakete nach diesem Paket durchzuarbeiten gibt, bis diese Prüfung aller Pakete
beendet ist, und dass 4 Pakete bereits gefunden wurden, von denen nicht
geplant ist sie zu aktualisieren, da sie Abhängigkeiten zerstören würden. Die
»(0)« ist bedeutungslos, Sie können sie gefahrlos ignorieren.</p>

<p>Beachten Sie, dass es mehrere Tests für alle Pakete in einem »testing«
Skript-Lauf gibt.</p>

<p><i>Jules Bean stellte ursprünglich die häufig gestellten Fragen und
Antworten zusammen.</i></p>
# Created: Sat Dec  8 12:44:29 GMT 2001


<h2>Zusätzliche Informationen</h2>

<p>Die Skripte erkennen auch Fehler, die als
schrecklich-ernst-sollten-überhaupt-nicht-hier-sein bezeichnet werden können.
Dies sind alle `kümmern Sie sich nicht mal drum, dieses Paket einzubringen'
Verstöße, die hoffentlich während des Freeze verschwinden werden, und an
Fehlerausmerz-Tagen und so weiter.<br>
Es gibt Listen von solchen Fehlern für alle drei Distributionen:</p>

<ul>
  <li><a href="http://ftp-master.debian.org/testing/testing_probs.html">\
    testing Probleme</a></li>
  <li><a href="http://ftp-master.debian.org/testing/unstable_probs.html">\
    unstable Probleme</a></li>
  <li><a href="http://ftp-master.debian.org/testing/stable_probs.html">\
    stable Probleme</a></li>
</ul>

<p>Zusätzlich dazu gibt es einige Statistiken über Binär-Pakete, die in
<a href="http://ftp-master.debian.org/testing/testing_outdate.txt">testing</a>,
<a href="http://ftp-master.debian.org/testing/stable_outdate.txt">stable</a> und
<a href="http://ftp-master.debian.org/testing/unstable_outdate.txt">unstable</a>
veraltet sind.</p>

<p>Björn Stenberg hat ein
<a href="http://bjorn.haxx.se/debian/">Frontend</a>
geschrieben, das dabei helfen soll, festzustellen, warum Pakete
nicht nach testing gelangen.</p>

<p>Sie könnten auch daran interessiert sein, eine ältere
<a href="http://lists.debian.org/debian-devel-0008/msg00906.html">E-Mail
Beschreibung</a> zu lesen. Der einzige große Nachteil ist, dass sie den
Paket-Pool nicht berücksichtigt, weil dieser von James Troup implementiert
wurde, nachdem sie geschrieben war.</p>

<p>Der Testing-Code ist auf
<a href="http://ftp-master.debian.org/testing/update_out_code/">\
ftp-master</a> verfügbar.</p>

<p><i>Anthony Towns gebührt der Dank für die Implementierung von
testing.</i></p>
