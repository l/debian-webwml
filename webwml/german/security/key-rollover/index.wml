#use wml::debian::template title="Schlüsselaustausch"
#use wml::debian::translation-check translation="1.32" maxdelta="1"

<p>
In der <a href="$(HOME)/security/2008/dsa-1571">Debian-Sicherheitsankündigung 1571</a>,
deckte das Debian-Sicherheitsteam eine Schwäche im Zufallszahlengenerator auf,
der von OpenSSL in Debian und seinen Derivaten verwendet wird. Als ein Ergebnis
dieser Schwäche sind bestimmte Verschlüsselungsschlüssel sehr viel einfacher,
als sie sein sollten, so dass ein Angreifer den Schlüssel mittels einer
Brute-Force-Attacke mit minimalem Wissen über das System erraten kann. Dies
betrifft insbesondere die Verwendung von Verschlüsselungsschlüsseln in
OpenSSH, OpenVPN und SSL-Zertifikaten.
</p>

<p>
Diese Seite dokumentiert, wie die Schlüssel für Pakete, deren Schlüssel durch
die OpenSSL-Verwundbarkeit betroffen sind, ausgetauscht werden können.
</p>

<ul>
<li><b><a href="#openssh">OpenSSH</a></b>
<li><b><a href="#openssl">OpenSSL: Generic PEM key generation instructions</a></b>

<li><a href="#bincimap">bincimap</a>
<li><a href="#boxbackup">boxbackup</a>
<li><a href="#cryptsetup">cryptsetup</a>
<li><a href="#dropbear">dropbear</a>
<li><a href="#ftpd-ssl">ftpd-ssl</a>
<li><a href="#gforge">gforge</a>
<li><a href="#kerberos">MIT Kerberos (krb5)</a>
<li><a href="#openswan">OpenSWAN / StrongSWAN</a>
<li><a href="#openvpn">OpenVPN</a>
<li><a href="#puppet">puppet</a>
<li><a href="#sendmail">sendmail</a>
<li><a href="#ssl-cert">ssl-cert</a>
<li><a href="#telnetd-ssl">telnetd-ssl</a>
<li><a href="#tinc">tinc</a>
<li><a href="#tor">tor</a>
<li><a href="#xrdp">xrdp</a>
</ul>

<p>
Andere Software verwendet kryptographische Schlüssel, ist aber
<a href="notvuln">nicht verwundbar</a>, da OpenSSL nicht verwendet wird,
um deren Schlüssel zu erzeugen oder zu übermitteln.
</p>

<ul>
<li><a href="notvuln#ckermit">ckermit</a>
<li><a href="notvuln#gnupg">GnuPG</a>
<li><a href="notvuln#iceweasel">Iceweasel</a>
<li><a href="notvuln#mysql">MySQL</a>
</ul>

<p>
Für Anleitungen zum Schlüsselaustausch für andere Software wird auf die
von Benutzern zusammengetragenen Informationen unter
<url http://wiki.debian.org/SSLkeys> verwiesen.
</p>

<h1><a name="openssh">OpenSSH</a></h1>

<p>
Ein aktualisiertes Paket wurde mit <a href="$(HOME)/security/2008/dsa-1576">DSA-1576</a>
herausgegeben, das die Schlüsseltransformation vereinfacht.
</p>

<p>1. Installieren Sie die Sicherheitsaktualisierungen aus DSA-1576</p>

<p>Sobald die Aktualisierung eingespielt wurde, werden schwache
Benutzerschlüssel, wenn möglich, automatisch zurückgewiesen (diese können
aber nicht in allen Fällen erkannt werden). Falls Sie solche Schlüssel
für die Benutzerauthentifizierung verwenden, werden sie ab sofort nicht
mehr funktionieren und müssen ersetzt werden (siehe Schritt 3).</p>

<p>OpenSSH-Rechner-Schlüssel können automatisch neu erzeugt werden, wenn
    die OpenSSH-Sicherheitsaktualisierung eingespielt wurde. Die
    Aktualisierung wird nach Bestätigung fragen, bevor dieser Schritt
    durchgeführt wird.</p>

<p>2. Aktualisierung der OpenSSH-Dateien <tt>known_hosts</tt></p>

<p>Die Neuerzeugung der Rechnerschlüssel wird eine Warnung ausgeben, wenn
    auf das System mit SSH zugegriffen wird, bis der Rechnerschlüssel in
    der Datei known_hosts auf dem Klient aktualisiert wurde. Die Warnung
    wird wie folgt aussehen:</p>

<pre>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
</pre>

Auf Deutsch lautet diese Meldung in etwa wie folgt:

<pre>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@ WARNING: IDENTIFIZIERUNG DES ENTFERNTES RECHNERS HAT SICH GEÄNDERT @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
ES IST MÖGLICH, DASS JEMAND ETWAS BÖSES TUT!
Jemand könnte Sie zurzeit abhören (man-in-the-middle-(Mann in der Mitte)-Angriff)!
Es ist auch möglich, dass der RSA-Rechnerschlüssel vor kurzem geändert wurde.
</pre>

<p>In diesem Fall wurde der Rechnerschlüssel einfach geändert und Sie
    sollten die entsprechende Datei <tt>known_hosts</tt>, wie in der
    Meldung beschrieben, aktualisieren.

Es wird empfohlen, dass Sie einen vertrauenswürdigen Kanal zum Austausch
des Server-Schlüssels verwenden. Er befindet sich in der Datei
<tt>/etc/ssh/ssh_host_rsa_key.pub</tt> auf dem Server;
sein Fingerabdruck kann mit dem folgenden Kommando gedruckt werden:</p>

    <p><code>ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub</code></p>

<p>Zusätzlich zu benutzerspezifischen <tt>known_hosts</tt>-Dateien, kann
    eine systemweite Datei <tt>/etc/ssh/known_hosts</tt> existieren. Diese
    Datei wird sowohl vom ssh-Klient als auch von sshd für die
    <tt>hosts.equiv</tt>-Funktionalität verwendet. Diese Datei muss auch
    aktualisiert werden.</p>

<p>3. Überprüfen aller OpenSSH-Benutzerschlüssel</p>

<p>Der sicherste Weg ist es, alle OpenSSH-Benutzerschlüssel neu zu
    erzeugen, es sei denn, es kann mit ausreichender Bestimmtheit
    sichergestellt werden, dass der Schlüssel auf einem nicht betroffenen
    System erstellt wurde.</p>

<p>Um zu testen, ob Ihr Schlüssel betroffen ist, können Sie
    <tt>ssh-vulnkey</tt> starten, was in der Sicherheitsaktualisierung enthalten ist.
    Standardmäßig wird <tt>ssh-vulnkey</tt> den Standardort für Benutzerschlüssel
    (<tt>~/.ssh/id_rsa</tt>, <tt>~/.ssh/id_dsa</tt> und <tt>~/.ssh/identity</tt>), Ihre Datei
    <tt>authorized_keys</tt> (<tt>~/.ssh/authorized_keys</tt> und
    <tt>~/.ssh/authorized_keys2</tt>) und die Rechnerschlüssel des Systems
    (<tt>/etc/ssh/ssh_host_dsa_key</tt> und <tt>/etc/ssh/ssh_host_rsa_key</tt>) überprüfen.</p>

<p>Sie können alle Ihre eigenen Schlüssel wie folgt testen, unter der
    Voraussetzung, dass sie sich an den Standardorten (<tt>~/.ssh/id_rsa</tt>,
    <tt>~/.ssh/id_dsa</tt> oder <tt>~/.ssh/identity</tt>) befinden:</p>

    <p><code>ssh-vulnkey</code></p>

<p>Um alle Schlüssel auf Ihrem System zu überprüfen:</p>

    <p><code>sudo ssh-vulnkey -a</code></p>

<p>Um einen Schlüssel an einem nicht standardmäßigem Ort zu testen:</p>

    <p><code>ssh-vulnkey <var>/Pfad/zum/Schlüssel</var></code></p>

<p>Falls <tt>ssh-vulnkey</tt> die Meldung <q>Unknown (no blacklist information)</q>
    ausgibt, hat es keine Informationen darüber, ob der Schlüssel betroffen ist.
    Im Zweifelsfall sollte der Schlüssel zerstört und ein neuer erzeugt
    werden.
</p>

<p>4. Neuerzeugen beliebiger betroffener Benutzerschlüssel</p>

<p>Für die Benutzerauthentifizierung verwendete OpenSSH-Schlüssel müssen
manuell neu erzeugt werden, inklusive derjenigen, die nach der
Erzeugung auf ein anderes System übertragen wurden.</p>

<p>Neue Schlüssel können mit <tt>ssh-keygen</tt> erzeugt werden, z.B.:</p>

<pre>
$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 user@host
</pre>

<p>5. Aktualisierung der <tt>authorized_keys</tt>-Dateien (falls nötig)</p>

<p>Sobald die Benutzerschlüssel neu erzeugt wurden, müssen die relevanten
    öffentlichen Schlüssel in <tt>authorized_keys</tt>-Dateien (und eventuell
    <tt>authorized_keys2</tt>-Dateien) auf entfernten Systemen übertragen
    werden. Stellen Sie sicher, dass die betroffenen Schlüssel gelöscht werden.</p>

<h1><a name="openssl">OpenSLL: Allgemeine PEM-Schlüsselerzeugungsinstruktionen</a></h1>

<p>
Dies ist nur eine Erinnerung für jene, die PEM-kodierte Zertifikate
(neu)erzeugen. Ihre Site hat wahrscheinlich andere Richtlinien dafür, wie
Schlüssel verwaltet werden, denen Sie folgen sollten. Zusätzlich müssen Sie
die Zertifikate eventuell erneut durch eine weitere Zertifikatsautorität
signieren lassen, anstatt ein selbst zertifiziertes Zertifikat, wie im
Folgenden gezeigt, verwenden:
</p>

<pre>
cd /etc/ssl/private
openssl genrsa 1024 &gt; mysite.pem
cd /etc/ssl/certs
openssl req -new -key ../private/mysite.pem -x509 -days 9999 -out mysite.pem
</pre>

<h1><a name="bincimap">bincimap</a></h1>

<p>
The bincimap package automatically creates a self-signed certificate
through the openssl program for the bincimap-ssl service, and puts it
into /etc/ssl/certs/imapd.pem. To regenerate, run:
</p>

<pre>
rm -f /etc/ssl/certs/imapd.pem
dpkg-reconfigure bincimap
</pre>

<h1><a name="boxbackup">boxbackup</a></h1>

<p>
Boxbackup is not present in Debian stable, only in testing/Lenny.
</p>

<p>
Upstream has published a first impact analysis of key material created
on system with insufficient random PRNG. You can read the details
<a href="http://lists.warhead.org.uk/pipermail/boxbackup/2008-May/004476.html">here</a>.
</p>

<p>
If the PRNG in your OpenSSL was insufficiently random, you need to:
</p>

<ul>
<li>Regenerate all affected certificates, which have been generated or
signed on an affected system</li>
<li>Regenerate all the data keys (*-FileEncKeys.raw)</li>
<li>Destroy the data stored on your server to an appropriate level of
security (overwrite with zeros at the least, more if you're paranoid)</li>
<li>Upload everything again</li>
<li>Take appropriate measures under the assumption that you have been
storing your data in plain text on a public server without authentication.
(ie, start from scratch, destroying all trace of the backed up
data, and take other measures to mitigate the exposure of your
secrets)</li>
</ul>

<h1><a name="cryptsetup">cryptsetup</a></h1>

<p>
Cryptsetup itself does not use openssl for encryption (this applies to
both LUKS and dm-crypt devices).
</p>

<p>
<em>If</em> cryptsetup has been configured to use SSL-encrypted keyfiles (a
non-default setup which must be explicitly configured by the user)
and a broken version of openssl was used to generate the keyfile, the
keyfile encryption may be weaker than expected (as the salt is not
truly random).
</p>

<p>
Die Lösung besteht entweder darin, die Schlüsseldatei erneut zu verschlüsseln
(falls Sie sich halbwegs sicher sein können, dass der verschlüsselte 
Schlüssel nicht dritten Parteien bekannt geworden ist) oder die betroffene(n)
Partition(en) zu überschreiben und mit einem neuen Schlüssel neu zu 
installieren.</p>
</p>

<p>
Instructions for re-encrypting a keyfile:
</p>

<p>
Do the following for each SSL-encrypted keyfile, replacing
&lt;ssl_encrypted_key_path&gt; with the path to the actual keyfile:
</p>

<pre>
tmpkey=\$(tempfile)
openssl enc -aes-256-cbc -d -salt -in &lt;ssl_encrypted_key_path&gt; -out "$tmpkey"
shred -uz &lt;ssl_encrypted_key_path&gt;
openssl enc -aes-256-cbc -e -salt -in "$tmpkey" -out &lt;ssl_encrypted_key_path&gt;
shred -uz "$tmpkey"
</pre>

<h1><a name="dropbear">dropbear</a></h1>

<p>
If you have /etc/ssh/*host* keys, either remove them, or follow the
<a href="#openssh">openssh instructions</a> first, before updating dropbear's
keys.
</p>

<p>
Dropbear's postinst converts existing openssh keys to dropbear format,
if it cannot find the dropbear host keys.
</p>

<pre>
rm /etc/dropbear/*_host_key
dpkg-reconfigure dropbear
</pre>

<p>
Note that keys that have been generated by Dropbear itself are not
vulnerable (it uses libtomcrypt rather than OpenSSL).
</p>

<h1><a name="ftpd-ssl">ftpd-ssl</a></h1>

<pre>
rm -f /etc/ftpd-ssl/ftpd.pem /etc/ssl/certs/ftpd.pem
dpkg-reconfigure ftpd-ssl
</pre>

<p>
this covers the default setup. if the local admin has setup further
ssl infrastructure beyond that, these keys will need to be regenerated
as well.
</p>

<h1><a name="gforge">gforge</a></h1>

<p>
The gforge-web-apache2 package in sid and lenny sets up the website
with a dummy certificate if no existing certificate is found. Users are then
encouraged to replace it with a "real" one. The dummy certificate in
question is the Snake Oil one, so it should already be known as a weak
one (even without the SSL bug), but some users may accept
it without a second thought. 
</p>

<h1><a name="kerberos">MIT Kerberos (krb5)</a></h1>

<p>
No part of MIT Kerberos in Debian 4.0 ("Etch") uses OpenSSL, and so Kerberos
in Debian 4.0 is not affected at all.
</p>

<p>
In Lenny the separate binary package krb5-pkinit uses OpenSSL.  MIT
Kerberos itself does not generate long-term key pairs even when the PKINIT
plugin is used, so any vulnerable long-term key pairs would have been
generated outside of the MIT Kerberos software itself. The PKINIT plugin
only references existing key pairs and isn't responsible for key
management.
</p>
<p>
Long-term key pairs used with PKINIT may be affected if generated on an
affected Debian system, but such generation is external to MIT Kerberos.
</p>
<p>
However, the OpenSSL random key functions are used for the DH exchange
when PKINIT authentication is used, which means that an attacker may be
able to use brute-force to gain access to the KDC response to a PKINIT
authentication and subsequently gain access to any sessions created using
service tickets from that authentication.
</p>
<p>
Any KDCs using the PKINIT plugin from Lenny should have their libssl0.9.8
packages upgraded immediately and the Kerberos KDC restarted with:
</p>
<pre>
/etc/init.d/krb5-kdc restart
</pre>
<p>
Any Kerberos ticket-granting tickets (TGTs) or encrypted sessions resulting
from PKINIT authentication using a Kerberos KDC with the affected libssl
should be treated as suspect; it's possible that attackers with packet
captures will be able to compromise those keys and sessions.
</p>

<h1><a name="openswan">OpenSWAN / StrongSWAN</a></h1>

<pre>
rm /etc/ipsec.d/private/`hostname`Key.pem /etc/ipsec.d/certs/`hostname`Cert.pem
dpkg-reconfigure (open|strong)swan
/etc/init.d/ipsec restart
</pre>

<p>
Vorsicht: Neustarten des Dienstes ipsec beendet alle aktuell offenen
IPSec-Verbindungen. Diese müssen eventuell vom anderen Ende neu gestartet werden.
</p>

<h1><a name="openvpn">OpenVPN</a></h1>

<p>
Backup your secret key files. While key names are arbitrary, they can
be detected by running
</p>
<pre>grep secret /etc/openvpn/*.conf</pre>

<p>
Recreate them using
</p>
<pre>openvpn --genkey --secret SECRET_FILENAME</pre>

<p>
Then copy the shared secret keys to the remote hosts and restart the VPN
on each host with
</p>
<pre>/etc/init.d/openvpn force-reload</pre>

<h1><a name="puppet">puppet</a></h1>

<p>
There are two methods to handle puppet certificates, one is via capistrano,
the second is manually.
</p>

<p>
Regenerating Puppet SSL Certificates using capistrano is detailed here:
<a href="http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL">http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL</a>
</p>

<p>
The manual steps are as follows:
</p>

<ol>
<li>You need to wipe and regenerate your CA info:
<pre>
/etc/init.d/puppetmaster stop
rm $vardir/ssl/*
/etc/init.d/puppetmaster start
</pre>
<p>
However, if you are running mongrel, instead of starting puppetmaster from
the init script, you will need to first stop the front-end web listener
(apache, nginx, etc.) and then do the following:
</p>
<pre>
puppetmasterd --daemonize ; sleep 30 ; pkill -f 'ruby /usr/sbin/puppetmasterd'
</pre>
<p>
The above is necessary because for some reason when running with mongrel,
puppetmaster will not regenerate its CA.
</p>
</li>
<li>Wipe all the client certs
<pre>
/etc/init.d/puppet stop
rm $vardir/ssl/*
</pre> 
</li>
<li>Have each client request a new cert:
<pre>
puppetd --onetime --debug --ignorecache --no-daemonize
</pre> 
</li>
<li>Once all the requests have rolled in, you can sign them all at once:
<pre>
puppetca --sign --all
</pre> 
</li>
<li>Start up your puppet clients:
<pre>
/etc/init.d/puppet start
</pre>
</li>
</ol>

<p>
You could also enable autosign temporarily, if you are comfortable with that.
</p>

<h1><a name="sendmail">Sendmail</a></h1>

<p>
Sendmail (sowohl in Etch als auch in Lenny) erstellt optional bei der
Installation vorgegebene OpenSSL-Zertifikate.
</p>

<p>
  Die Schlüsselaustauschprozedur ist trivial:
<pre>
/usr/share/sendmail/update_tls new
</pre>
</p>

<p>
  Falls Sie die Vorlagen in /etc/mail/tls angepasst haben, werden die Werte
  dort erneut zum Erstellen der neuen Zertifikate verwandt.
</p>

<h1><a name="ssl-cert">ssl-cert</a></h1>

<p>
The snakeoil certificate /etc/ssl/certs/ssl-cert-snakeoil.pem can be
recreated with:
</p>

<pre>make-ssl-cert generate-default-snakeoil --force-overwrite</pre>

<h1><a name="telnetd-ssl">telnetd-ssl</a></h1>

<pre>
rm -f /etc/telnetd-ssl/telnetd.pem /etc/ssl/certs/telnetd.pem
dpkg-reconfigure telnetd-ssl
</pre>

<p>
This covers the default setup. If the local admin has setup further
SSL infrastructure beyond that, these keys will need to be regenerated
as well.
</p>

<h1><a name="tinc">tinc</a></h1>

<p>
Remove all suspect public and private key files:
</p>
<ol>
<li>Remove rsa_key.priv.</li>
<li>Edit all files in the hosts/ directory and remove the public key blocks.</li>
</ol>

<p>
Generate a new public/private key pair:
</p>
<pre>
tincd -n &lt;netname&gt; -K
</pre>

<p>
Exchange your host config file with the new public key with other
members of your VPN. Do not forget to restart your tinc daemons.
</p>

<h1><a name="tor">tor</a></h1>

<p>
Tor is not in stable, but affected in Lenny.
</p>

<p>
Clients running 0.1.2.x are not affected.  Tor nodes or hidden service
providers running any version, as well as everyone on 0.2.0.x are
affected.
</p>

<p>
Please see the
<a href="http://archives.seul.org/or/announce/May-2008/msg00000.html">vulnerability
announcement</a> on the Tor announce mailing list.
</p>

<p>
Upgrading to 0.1.2.19-3 (available in testing, unstable, backports.org, and
the usual <a
href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org
repository</a>) or 0.2.0.26-rc-1 (available in experimental and the usual <a
href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org
repository</a>) is recommended. If you run a relay these versions will force
new server keys (/var/lib/tor/keys/secret_*) to be generated.
</p>

<p>
Should you run a Tor node without using the package's infrastructure
(debian-tor user, /var/lib/tor as DataDirectory etc.) you manually need
to remove bad keys.  See the advisory link posted above.
</p>

<p>
If you are hidden service provider, and have created your key in
the affected timeframe with a bad libssl then please delete your hidden
service's private key. This will change your hidden service's host name
and may require reconfiguring your servers.
</p>

<p>
If you are running 0.2.0.x, an upgrade is highly recommended -- 3 of the
6 v3 authority servers have compromised keys.  Old 0.2.0.x versions
will stop working in a week or two.
</p>

<h1><a name="xrdp">xrdp</a></h1>

<p>
xrdp uses generated keys. Most clients do not check those keys by
default, therefore changing them is painless. You just have to:
</p>

<pre>
rm /etc/xrdp/rsakeys.ini
/etc/init.d/xrdp restart
</pre>

<p>
xrdp is not in stable.
</p>
