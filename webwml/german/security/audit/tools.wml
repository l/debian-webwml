#use wml::debian::template title="Werkzeuge für Sicherheit-Audits"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.18"
# $Id$
# Translator: Helge Kreutzmann <kreutzm@itp.uni-hannover.de> 2005-06-14

<p>Es sind mehrere Pakete innerhalb Debians verfügbar,
die dazu entwickelt wurden, bei Quellcode-Audits zu helfen. Diese
beinhalten:
</p>

<ul>
<li><a href="http://packages.debian.org/flawfinder">Flawfinder</a>
<ul>
<li><a href="examples/flawfinder">Beispiele für die Verwendung von Flawfinder</a></li>
</ul></li>
<li><a href="http://packages.debian.org/its4">ITS4</a>
<ul>
<li>Es gibt kein Beispiel für ITS4, da es aus der Unstable-Distribution
entfernt wurde.</li>
</ul></li>
<li><a href="http://packages.debian.org/rats">RATS</a>
<ul>
<li><a href="examples/RATS">Beispiele für die Verwendung von RATS</a></li>
</ul></li>
<li><a href="http://packages.debian.org/pscan">Pscan</a>
<ul>
<li><a href="examples/pscan">Beispiele für die Verwendung von Pscan</a></li>
</ul></li>
</ul>

<p>Max Vozeler hat einen Satz an Perl-Modulen für einige dieser Werkzeuge
geschrieben, die von Interesse sein könnten, wenn Sie automatisierte
Audits durchführen wollen. Sie können die Module auf seiner
<a href="http://hinterhof.net/~max/audit-perl/">Audit::Source</a>-Seite
finden.</p>


<p>Beachten Sie auch, dass es weitere Werkzeuge für einen gegebenen Satz
an Sicherheits-Verwundbarkeiten gibt, die noch nicht für Debian paketiert
wurden, aber für einen Auditor nützlich sein könnten. Diese beinhalten:
</p>

<ul>
<li>Werkzeuge gezielt für XSS-Fehler:
<ul>
<li><a href="http://freshmeat.net/projects/xsslint/">Xsslint</A></li>
<li><a href="http://www.devitry.com/screamingCSS.html">ScreamingCSS</A></li>
</ul></li>
<li>Werkzeuge, um Web-Browsers zu testen:
<ul>
<li><a href="http://www.securityfocus.com/archive/1/378632">MangleMe</a></li>
</ul></li>
</ul>

<p>Keines dieser Werkzeuge ist perfekt und sie können nur als Richtlinie für
weitere Untersuchungen verwendet werden, aber angesichts der Tatsache, wie 
einfach sie zu benutzen sind, ist es sinnvoll, sich die Zeit zu nehmen, sie
auszuprobieren.
</p>

<p>Jedes der Werkzeuge hat verschiedene Stärken und Schwächen, daher ist die
Verwendung von mehr als einem ratsam.</p>


<h2>Flawfinder</h2>

<p>Flawfinder ist ein Python-Werkzeug, das entwickelt wurde, um C und C++
Quellcode zu analysieren und nach möglichen Sicherheitsdefekten zu schauen.
</p>

<p>Wenn es auf ein Verzeichnis voll mit Quellcode angewendet wird, dann
gibt es einen Bericht der von ihm erkannten möglichen Probleme aus, 
sortiert nach Risiko (wobei <i>Risko</i> eine Ganzzahl zwischen 1 und 5
ist). Um geringe Risiken auszublenden ist es möglich, dem Programm zu
sagen, nicht über Defekte unter einer bestimmten Risikostufe zu berichten.
Standardmäßig erfolgt die Ausgabe in reinem Text, aber ein HTML-Bericht
ist auch verfügbar.
</p>

<p>Das Programm durchsucht den Code und schaut nach der Verwendung von
Funktionen, die innerhalb seiner Datenbank von häufig missbrauchten
Funktionen enthalten sind.
</p>

<p>Um beim Lesen des Berichts zu helfen ist es möglich zu veranlassen,
dass die Ausgabe eine Zeile über die verwendete Funktion enthält; dies
kann sinnvoll sein, um sofort ein Problem zu erkennen oder entsprechend
es auszuschließen.
</p>

<p>Sie können ein Beispiel für die Verwendung von Flawfinder und seine
Ausgabe im <a href="examples/">Beispiele-für-Audits-Abschnitt</a> sehen.</p>

<h2>ITS4</h2>

<p>ITS4 ist ein im Non-Free-Bereich des Debian-Archivs enthaltenes Werkzeug;
es ist nur für die alte stabile Distribution verfügbar.
</p>

<p>ITS4 kann dazu verwendet werden, sowohl C- als auch C++-Code auf mögliche
Sicherheitslöcher hin zu durchsuchen, ähnlich wie Flawfinder.
</p>

<p>Die von ihm erstellte Ausgabe versucht intelligent zu sein und einige
der Fälle, in denen der Aufruf der gefährlichen Funktionen sorgfältig 
erfolgt ist, auszuschließen.
</p>


<h2>RATS</h2>

<p>RATS ist ein ähnliches Werkzeug wie die oben aufgeführten mit der 
Ausnahme, dass es eine viel größere Anzahl an Sprachen unterstützt. 
Derzeit hat es Unterstützung für C, C++, Perl, PHP und Python.
</p>

<p>Das Werkzeug verwendet einfache XML-Dateien um seine Verwundbarkeiten
einzulesen, wodurch es eines der am einfachsten zu modifizierenden Werkzeuge
ist. Neue Funktionen können einfach für jede der unterstützten Sprachen
hinzugefügt werden.
</p>

<p>Sie können ein Beispiel für die Verwendung von RATS und dessen Ausgabe im
<a href="examples/">Beispiele-für-Audits-Abschnitt</a> sehen.</p>

<h2>Pscan</h2>

<p>Pscan unterscheidet sich von den bisher beschriebenen Werkzeugen, da es
überhaupt kein Allzweck-Durchsuchprogramm ist. Stattdessen ist es ein 
Programm, das gezielt Formatzeichenketten-Fehler entdeckt.
</p>

<p>Das Werkzeug versucht mögliche Punkte bei der Verwendung von variadischen
Funktionen innerhalb des C- und C++-Quellcodes, wie beispielsweise
<tt>printf</tt>, <tt>fprintf</tt> und <tt>syslog</tt>, zu finden.</p>

<p>Formatzeichenkettenfehler sind recht einfach zu entdecken und zu beheben;
obwohl sie die jüngste Klasse der Software-Angriffe sind dürfte die Mehrheit
davon bereits gefunden und repariert worden sein.
</p>

<p>Sie können ein Beispiel für die Verwendung von Pscan und dessen Ausgabe im
<a href="examples/">Beispiele-für-Audits-Abschnitt</a> sehen.</p>


<h2>Scanner-Ausgabe verstehen</h2>

<p>Jedes der allgemeinen Durchsuch-Werkzeuge wird Ausgaben, die den
erkannten Fehler beschreiben, beinhalten und möglicherweise Ratschläge
erteilen, wie der Code korrigiert werden kann.
</p>

<p>Zum Beispiel ist das folgende aus der Ausgabe von RATS entnommen und
beschreibt die Gefahren von <tt>getenv</tt>:</p>

<p>&quot;Environment variables are highly untrustable input. They may
be of any length, and contain any data. Do not make any assumptions
regarding content or length. If at all possible avoid using them, and
if it is necessary, sanitize them and truncate them to a reasonable
length.&quot;</p>

<p>Auf deutsch: &quot;Umgebungsvariablen sind höchst unvertrauenswürdige
Eingaben. Sie können beliebig lang sein und alle möglichen Daten enthalten. 
Treffen Sie keine Annahmen über Inhalt oder Länge. Falls irgendwie möglich
vermeiden Sie deren Benutzung und falls es notwendig ist, bereinigen Sie sie
und schneiden Sie sie auf eine vernünftige Länge&quot;</p>

<p>Falls Sie weiteren Rat zur Korrektur von berichteten Löchern suchen,
sollten Sie ein Buch über sicheres Programmieren studieren, wie
beispielsweise das <a href="http://www.dwheeler.com/secure-programs/">Secure
Programming for Linux and Unix HOWTO</a> von David A. Wheeler.</p>

<p>(Bedenken Sie beim Berichten von Sicherheitspunkten, dass ein Patch, der
das Loch schließt, sehr geschätzt wird)</p>

<p>Diskussionen in Bezug auf bestimmte problematische Code-Stücke können
auch (auf Englisch) auf der <a
href="http://shellcode.org/mailman/listinfo/debian-audit">debian-audit
Mailingliste</a> geführt werden, seien Sie nur vorsichtig, es nicht
offensichtlich zu machen, welches Programm den Defekt enthält.
</p>

