#use wml::debian::template title="Инструменты аудита безопасности"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.24" maintainer="Lev Lamberov"

<p>В архиве Debian доступны несколько пакетов, которые
разработаны облегчения проведения аудита исходного кода. Вот они:</p>

<ul>
<li><a href="https://packages.debian.org/flawfinder">Flawfinder</a>
<ul>
<li><a href="examples/flawfinder">Пример использования flawfinder</a></li>
</ul></li>
<li><a href="http://archive.debian.net/woody/its4">ITS4</a>
<ul>
<li>Пример использования ITS4 отсутствует, поскольку пакет был удалён из нестабильного выпуска.</li>
</ul></li>
<li><a href="https://packages.debian.org/rats">RATS</a>
<ul>
<li><a href="examples/RATS">Пример использования RATS</a></li>
</ul></li>
<li><a href="https://packages.debian.org/pscan">pscan</a>
<ul>
<li><a href="examples/pscan">Пример использования pscan</a></li>
</ul></li>
</ul>

<p>Заметьте также, что существуют и другие инструменты, созданные специально для поиска определённого набора 
уязвимостей в безопасности, для которых пока может быть и не созданы пакеты Debian, но которые могут 
быть полезны тому, кто проводит аудит. Среди них:</p>

<ul>
<li>Инструменты для поиска ошибок XSS:
<ul>
<li><a href="http://freecode.com/projects/xsslint/">Xsslint</a></li>
<li><a href="http://www.devitry.com/screamingCSS.html">ScreamingCSS</a></li>
</ul></li>
<li>Инструменты для тестирования браузеров:
<ul>
<li><a href="http://www.securityfocus.com/archive/1/378632">MangleMe</a></li>
</ul></li>
</ul>

<p>Ни один инструмент не является совершенным; инструменты могут использоваться только в качестве руководств
для дальнейшего исследования, но учитывая то, как они просты в использовании, полезно
выделить на них время.</p>

<p>Каждый из этих инструментов имеет различные сильные и слабые стороны, поэтому рекомендуется
использовать более одного инструмента.</p>


<h2>Flawfinder</h2>

<p>flawfinder &mdash; это инструмент, написанный на Python, разработанный для анализа исходного
кода на C и C++ в поиске потенциальных проблем с безопасностью.</p>

<p>Когда в качестве параметра указывается каталог, содержащий исходный код, этот инструмент выведет
отчёт о потенциальных проблемах, которые были обнаружены; отчёт будет отсортирован по риску
(где <i>риск</i> &mdash; это целое число от 1 до 5). Для отключения незначительных рисков можно
передать программе параметр, тогда программа не будет сообщать об ошибках, уровень риска которых
ниже определённого уровня.  По умолчанию вывод будет иметь вид обычного
текста, но можно вывести отчёт и в формате HTML.</p>

<p>Программа работает, сканируя код в поисках использования
функций, которые содержатся в её базе данных функций,
которые обычно используются неправильно.</p>

<p>Для облегчения чтения отчёта можно указать параметр, использование которого приведёт к тому, что
отчёт будет содержать строку, содержащую используемую функцию;
это может быть полезно для немедленного обнаружения проблемы или для её
исключения.</p>

<p>Вы можете посмотреть пример использования flawfinder, и его вывод
в <a href="examples/">разделе примеров аудита</a>.</p>

<h2>ITS4</h2>

<p>ITS4 &mdash; инструмент, содержащийся в разделе non-free архива Debian;
он доступен только для выпуска <q>woody</q>.</p>

<p>ITS4 может использоваться для сканирования кода на C и на C++ в поисках потенциальных дыр
в безопасности подобно flawfinder.</p>

<p>На результат программы можно влиять для исключения случаев, 
где вызовы опасных функций производятся осторожно.</p>


<h2>RATS</h2>

<p>RATS &mdash; инструмент, похожий на приведённые выше, с тем лишь исключением,
что он поддерживает более широкий спектр языков.
В настоящее время в нём имеется поддержка C, C++, Perl, PHP и Python.</p>

<p>Этот инструмент использует простой файл XML для хранения информации об уязвимостях,
что делает его наиболее простым для настройки из доступных инструментов.
Новые функции могут быть легко добавлены для поддерживаемых
языков.</p>

<p>Вы можете посмотреть пример использования RATS и его вывод
в <a href="examples/">разделе примеров аудита</a>.</p>

<h2>pscan</h2>

<p>pscan отличается от уже приведённых инструментов,
поскольку он вообще не является сканером общего назначения. Эта программа,
предназначена для обнаружения ошибок в форматных строках.</p>

<p>Этот инструмент пытается найти потенциальные проблемы использования
таких вариативных функций в исходном коде на C и C++, как
<tt>printf</tt>, <tt>fprintf</tt> и <tt>syslog</tt>.</p>

<p>Ошибки форматных строк легко обнаружить и исправить, несмотря
на то, что эти ошибки являются наиболее свежим классом атаки ПО, большинство
из них вероятно уже найдено и исправлено.</p>

<p>Вы можете посмотреть пример использования pscan, и его вывод
в <a href="examples/">разделе примеров аудита</a>.</p>


<h2>Понимание вывода сканера</h2>

<p>Каждый инструмент общего сканирования в качестве результатов работы выдаст вывод,
описывающий обнаруженную проблему и возможно содержащий совет о том, как исправить
код.</p>

<p>Например, следующий вывод RATS
описывает опасность <tt>getenv</tt>:</p>

<p>&quot;Environment variables are highly untrustable input. They may
be of any length, and contain any data. Do not make any assumptions
regarding content or length. If at all possible avoid using them, and
if it is necessary, sanitize them and truncate them to a reasonable
length.&quot;</p>

<p>Если вам нужны дальнейшие советы о том, как исправить обнаруженную дыру,
вам следует изучить книгу о безопасном программировании, напр.
<a href="http://www.dwheeler.com/secure-programs/">HOWTO по
безопасному программированию для Linux и Unix</a> Дэвида А. Уилера (David A. Wheeler).</p>

<p>(Помните, что при отправке отчёта о проблеме безопасности приветстуется
заплата, закрывающая дыру)</p>

<p>Обсуждение закрытия очень трудного куска
кода может также проводиться в 
<a href="https://lists.debian.org/debian-security/">списке рассылки
debian-security</a>, но поскольку это публичный список рассылки с публичным архивом,
пишите о проблемах в коде так, чтобы не было понятно, о какой
программе идёт речь.</p>

