#use wml::debian::template title="Использование CVS с пакетами Debian"
#use wml::debian::translation-check translation="1.8" maintainer="Lev Lamberov"

<p>Этот короткий документ предназначен для того, чтобы помочь в
переводе пакетов под управление CVS. Вероятно, это
интересно лишь нескольким людям, которые не очень хорошо знакомы с CVS и
управлением версиями. Кроме того, в
<code>/usr/share/doc/cvs-buildpackage</code> имеется сценарий
с именем <code>cvs-pkginit</code> (и сценарий, и его страница руководства сжаты
gzip), который выводит конспект настоящего документа.

<p>Например, чтобы перевести в CVS пакет foo версии bar1 Debian ревизия 3,
попробуйте следующую команду:
<pre>
% cvs-pkginit foo bar1 3
</pre>
и посмотрите вывод.

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>Замечание: в дальнейшем то, что заключено в угловые скобки,
предполагается в качестве изменяемого в зависимости от конкретного случая, всё остальное
следует трактовать буквально. Например, если вы говорите о пакете с
версией 2.1.82 в основной ветке разработки, то &lt;$версия&gt; означает 2.1.82, а
версия_основной_ветки_&lt;$версия | tr  . _&gt; означает версия_основной_ветки_2_1_82.

<ol>
<li>Настройка CVS

<pre>
   $ CVSROOT=/где/ваш/репозиторий/должен/быть
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>Это позволит вам отделить ваши пакеты Debian от всего остального в вашем
   репозитории, либо в настоящий момент, либо в будущем. Даже если вы думаете, что
   вам не нужна CVS для чего-либо ещё, проще сейчас отделить ваш
   репозиторий, чем потом сожалеть о том, что вы этого не сделали (позже в вашем
   репозитории окажется целая свалка всяческого барахла).

   <p>Если планируется, что CVS будет использоваться несколькими людьми, вам следует
   убедиться, что они могут изменять репозиторий с помощью CVS. Выберите
   группу (или набор групп), которые имеют доступ к части
   репозитория, и установите права:

<pre>
   \# chgrp &lt;архив&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>Это гарантирует, что члены архивной группы получат права на
   настройку репозитория. Теперь вам следует убедиться, что
   правильные группы людей могут изменять части
   репозитория.

<pre>
   \# mkdir $CVSROOT/debian/&lt;пакет1&gt;
   \# chgrp &lt;группа1&gt; $CVSROOT/debian/&lt;пакет1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;пакет1&gt;
   \# mkdir $CVSROOT/debian/&lt;пакет2&gt;
   \# chgrp &lt;группа2&gt; $CVSROOT/debian/&lt;пакет2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;пакет2&gt;
</pre>

   <p>Как обычному пользователю вам следует сделать ваш CVS-репозиторий публичным,
   либо используя <kbd>"-d /где/ваш/репозиторий/должен/быть"</kbd>,
   либо помещая такой фрагмент в ваш профиль.

<pre>
   $ CVSROOT=/где/ваш/репозиторий/должен/быть
   $ export CVSROOT
</pre>


<li>Использование модулей

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>В дальнейшем &lt;пакет&gt; будет именем пакета, совпадающим с таковым в
   файле debian/changelog.

   <p>Добавьте следующие строки, первая необходима, вторая может быть
   дублирована и является очевидной:

<pre>
   modules   CVSROOT modules
   &lt;пакет&gt; debian/&lt;пакет&gt;
</pre>

<pre>
   \# cvs commit -m 'Определите первые модули'
</pre>


<li>Подготовка к использованию CVS

   <p>Вставьте ваше дерево исходного кода с помощью следующих команд (допустим,
   вы уже подготовили его для Debian, и имеется файл orig.tar.gz). Заметьте, что
   исходный код из основной ветки разработки импортируется с помощью -ko (проследите
   за двоичными файлами), но не локальные изменения, которые мы производим. Заметьте, что
   числа эпохи игнорируются во время определения имени тега CVS (они
   обычно используются для изменения мнения dpkg о порядке пакетов
   и не релевантны для тегов CVS).

   <p>Измените каталог на тот, где у вас находится распакованное и приведённое к формату Debian
   разрабатываемое дерево исходного кода вне CVS, которое мы пытаемся
   ввести в CVS (вообще, оно пока не в CVSROOT).

   <p>Я ПОВТОРЯЮ: В дальнейшем &lt;пакет&gt; будет именем пакета, совпадающим с таковым в
   файле debian/changelog.

<pre>
   $ cd /где/находится/ваше/дерево/исходного/кода
   $ tar zvfx &lt;пакет&gt;_&lt;версия&gt;.orig.tar.gz
   $ cd &lt;пакет&gt;_&lt;версия&gt;.orig
   $ cvs import -ko -m 'Импортирование голого кода' \
       debian/&lt;пакет&gt; source-dist версия_основной_ветки_&lt;версия|tr . _&gt;
</pre>

   <p>Вы можете изменить тег ветви source-dist на что
   пожелаете. (Сопровождающий cvs-buildpackage обычно использует тег
   основной ветки разработки (что является упражнением в избыточности ;-))).

   <p>Если вы настроили CVS как суперпользователь, и не настроили групповые права на запись,
   вам нужно создать $CVSROOT/debian/&lt;пакет&gt; от лица суперпользователя и изменить
   группу или владельца в репозитории на определённую группу
   или, соответственно, пользователя. Импорт в CVS выведет предупреждение, что
   не удаётся создать каталог debian/&lt;пакет&gt;, но это нормально.

   <p>Следующим шагом является извлечение всего дерева и встраивание всех ваших
   изменений.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода
   $ cvs checkout &lt;пакет&gt;
</pre>

   <p>Если вы уже создали версию в формате Debian, но ещё не использовали
   CVS, вы может потребоваться выполнить следующие команды для того, чтобы
   встроить ваши изменения. После этого вы должны пометить выпуск тегом, чтобы
   в дальнейшем иметь возможность извлекать его.

<pre>
   $ cd /где/находится/ваше/дерево/исходного/кода&lt;пакет&gt;-&lt;версия&gt;
   $ diff -qrBbw . /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;/ | grep -v CVS
   $ FILES_CHANGED_LOCALLY="&lt;вывод команды выше&gt;"
   $ tar cf - $FILES_CHANGED_LOCALLY | \
       tar -C /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt; -xvpf -
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;
</pre>

   <p>Убедитесь, что файл debian/rules исполняем,
   поскольку он должен быть исполняем при экспортировании, и
   при выполнении dpkg-buildpackage на экспортированном исходном
   коде не возникнут проблемы. Вообще, убедитесь, что <b>все</b> файлы имеются правильные
   права до того, как добавлять их в CVS-репозиторий.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;
   $ cvs add debian &lt;любые другие добавленные файлы&gt;
</pre>

   <p>Кроме того, заметьте, что вы должны добавить все дополнительные файлы, которые
   должны быть помещены в репозиторий, вручную, в особенности все файлы в
   подкаталоге debian. Кроме того, заметьте, что команда cvs add
   <i>не</i> работает рекурсивно, поэтому вам следует вручную добавить
   все подкаталоги, которые у вас есть. (cd debian; cvs add *)

   <p>Запуск cvs update покажет вам статус
   всех файлов в каталоге.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;package&gt;
   $ cvs update
</pre>

   <p>Вывод может быть таким:
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? example1
</pre>
   M означает, что файл изменён (изменение должно быть внесено в репозиторий), A означает, что файл добавлен (изменение должно быть
   внесено в репозиторий), ? означает, что CVS не известно об этом файле (может быть он
   должен быть добавлен?). Когда вы будете удовлетворены, и ничего не будет
   упущено, а все файлы будут иметь правильные права, вы будете готовы
   поместить изменения в репозиторий.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;
   $ cvs commit -m 'Сделал все debian-изменения'
   $ cvs tag debian_версия_&lt;версия|tr . _&gt;-&lt;debian-ревизия|tr . _&gt; .
</pre>

   <p>Новое дерево исходного кода будет находиться в каталоге, которые не содержит
   номера версии. Это, как мы увидим позже, не является проблемой.

   <p>Если вы создаёте каталог debian с нуля (это может
   быть проще, но не так автоматизировано):

<pre>
   $ mkdir debian
</pre>

   <p>Создайте все нужные файлы debian и добавьте в систему контроля.

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>После внесите изменения, чтобы все ваши файлы были добавлены.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;
   $ cvs commit -m &lt;какое-то сообщение&gt;
</pre>

<li>Подготовка выпуска

   <p>До того, как вы сможете запустить некоторые команды Debian, которые соберут
   пакет, вам следует извлечь модуль без всех подкаталогов
   CVS. Это делается с помощью команды «<kbd>export</kbd>». Но,
   во-первых, вам следует внести все ваши изменения и пометить их
   номером выпуска. 

<pre>
   $ cvs commit -m &lt;сообщение&gt;
   $ cvs tag debian_версия_&lt;версия|tr . _&gt;-&lt;debian-ревизия|tr . _&gt;
</pre>


<li>Делаем выпуск

   <p>Вы можете либо использовать механизм cvs-buildpackage (что предпочтительно), либо
   экспортировать всё вручную. Во-первых, проверьте cvs-buildpackage во время
   простого выполнения (убедитесь, что теги совпадают) так (нужен настроенный
   /etc/cvsdeb.conf):

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>Затем фактически запустите команду, где sudo &mdash; программа, которую
   вы хотите запустить с правами суперпользователя.

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>Либо сделайте всё это вручную:

   <p>Извлеките пакет.

<pre>
   $ cvs export -d &lt;пакет&gt;-&lt;версия&gt; \
         -r debian_версия_&lt;версия|tr . _&gt;-&lt;debian-ревизия|tr . _&gt; \
             &lt;пакет&gt;
</pre>

   <p>Теперь вы можете продолжить выполнение обычного механизма экспорта выпуска.


<hr>

   <p>Готово! Поздравляем! Вот ещё несколько задач, которые вы можете
   выполнить на вашем дереве исходного кода:

<hr>

<li>Удалите или переименуйте файл

   <p>Обычным способом перемещения файла является копирование СТАРОГО файлы в НОВЫЙ, затем вызов
   обычных команд CVS для удаления СТАРОГО файла из репозитория и добавление
   НОВОГО файла в репозиторий. (И СТАРЫЙ, и НОВЫЙ файлы могут содержать относительные пути, напр.
   «<kbd>foo/bar.c</kbd>»).

<pre>
   $ mv СТАРЫЙ НОВЫЙ
   $ cvs remove СТАРЫЙ
   $ cvs add НОВЫЙ
   $ cvs commit -m "Переименовал СТАРЫЙ в НОВЫЙ" СТАРЫЙ НОВЫЙ
</pre>

   <p>Это самый простой способ переместить файл, этот способ не подвержен ошибкам и
   сохраняет историю того, что было сделано. Заметьте, что для доступа к
   истории файла, вам следует указать старое или новое имя
   в зависимости от того, к какой части истории вы хотите получить доступ. Напр.,
   «<kbd>cvs log СТАРЫЙ</kbd>» выдаст журнал изменений вплоть до момента
   переименования файла.


<li>Обновление модуля командой import

   <p>Когда появится новый выпуск исходного кода, вы импортируете его в
   репозиторий с помощью той же команды «import», которую вы использовали для настройки
   репозитория в начале. Единственная разница состоит в том, что вы
   указываете в этот раз другой тег выпуска и другое сообщение.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;новый каталог исходного кода&gt;
   $ cvs import -m 'Импортирование нового выпуска' debian/&lt;пакет&gt; source-dist \
         версия_ основной_ветки_&lt;версия|tr . _&gt;
</pre>

   <p>Теперь нам нужно включить сделанные нами изменения в новую
   ревизию. Лучшим способом сделать это является следующий: выйдете из вашей рабочей копии
   (основанной на более старом выпуске основной ветки) и извлеките новую копию
   пакета, <b>добавляя</b> сделанные изменения в исходный код
   основной ветки. Вот как это сделать:

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода
   $ mv &lt;пакет&gt; &lt;пакет&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;пакет&gt;
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/&lt;пакет&gt;
</pre>

   <p>Команда, приведённая выше, извлекает последнюю ревизию &lt;пакета&gt;,
   внося изменения, сделанные в ветке поставщика «source-dist» со
   вчерашнего дня в рабочую копию. Если возникнут какие-либо конфликты во время внесения
   изменений, они должны быть разрешены обычным путём. Затем,
   изменённые файлы можно будет внести в репозиторий.

   <p>Использование даты, как предложено выше, предполагает, что вы не импортируете
   более одного выпуска продукта за один день. Если вы импортируете более одного
   выпуска, вы всегда можете использовать следующую команду:

<pre>
   $ cvs checkout -jверсия_основной_ветки_&lt;старая_версия|tr . _&gt; \
                  -jверсия_основной_ветки_&lt;новая_версия|tr . _&gt; &lt;пакет&gt;
</pre>

   <p>В этом случае две команды, приведённые выше, эквивалентны.

   <p>Для файлов, которые не были изменены локально, заново созданная
   ревизия становится головной ревизией.

   <p>Поэтому, проверьте, все ли файлы правильно
   обновлены. В особенности, на забудьте изменить файл debian/changelog!

   <p>Когда вы будете удовлетворены, вы можете удалить старую версию
   его каталога. Убедитесь, что удаляете
   правильный каталог! 
   
<pre>
   $ rm -rf ../&lt;пакет&gt;.old
</pre>

   <p>Теперь вы готовы к подготовке выпуска.

<li>Удалите дерево исходного кода для сохранения пространства на диске

   <p>Для удаления фактического рабочего дерева исходного кода, не рекомендуется использовать
   <kbd>rm -rf</kbd>, используйте команду CVS, которая также проверит, сделали ли вы
   какие-либо локальные изменения, которые ещё не были внесены в репозиторий.

<pre>
   $ cd /где/будет/находиться/ваше/дерево/исходного/кода/
   $ cvs release -d &lt;пакет&gt; 
</pre>


<li>Глоссарий

<pre>
   Теги		символические имена для ревизий
   Репозиторий	архив исходного кода
</pre>

<li>Дополнение:

 <p>A: СОГЛАШЕНИЯ О ТЕГАХ В CVS

<pre>
 |================================================================================================|
 |версия основной ветки разработки | &lt;версия&gt;                                               |
 |ревизия Debian                   | &lt;ревизия&gt;                                              |
 |имя файла orig tar               | пакет_&lt;версия&gt;.orig.tar.gz                             |
 |имя пакета Debian                | пакет_&lt;версия&gt;-&lt;ревизия&gt;_&lt;архитектура&gt;.deb |
 |CVS тег поставщика               | версия_основной_ветки_&lt;версия  | tr . _&gt;               |
 |CVS текущий тег                  | debian_версия_&lt;ревизия | tr . _&gt;                       |
 |================================================================================================|
</pre>

 <p>Примеры:
<pre>
 |=================================================================================|
 |                      | исходный код основной ветки | пакет Debian               |
 |=================================================================================|
 |версия основной ветки | 2.76                        | 3.38                       |
 |ревизия Debian        | 1.2                         |                            |
 |имя файла orig tar    | make_2.76.orig.tar.gz       |                            |
 |имя пакета Debian     | make_2.76-1.2_i386.deb      | kpkg_3.38_i386.deb         |
 |CVS тег поставщика    | версия_основной_ветки_2_76  | версия_основной_ветки_3_38 |
 |CVS текущий тег       | debian_версия_2_76-1_2      | debian_версия_3_38         |
 |=================================================================================|
</pre>

 <p>Заметьте, что числа эпох игнорируются во время определения имени тега CVS
 (обычно они используются для изменения мнения dpkg о порядке пакетов,
 и не релевантны для тегов CVS).

</ol>
