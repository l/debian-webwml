#use wml::debian::template title="&ldquo;Тестируемый&rdquo; выпуск Debian" BARETITLE=true
#include "$(ENGLISHDIR)/releases/info"
#use wml::debian::translation-check translation="1.35" maintainer="Lev Lamberov"

<p>Простую, ориентированную на пользователей информацию о тестируемом выпуске
вы можете посмотреть в <a href="$(DOC)/manuals/debian-faq/ch-ftparchives#s-testing">ЧаВО Debian</a>.</p>

<p>Обычным пользователям и разработчикам тестируемого выпуска важно знать, что
обновления безопасности для тестируемого выпуска <strong>не поддерживаются
командой безопасности</strong>. Дополнительную информацию смотрите в
<a href="../security/faq#testing">ЧаВО команды безопасности</a>.</p>

<p>Эта страница в первую очередь содержит те аспекты <q>тестируемого</q> выпуска, которые важны для
разработчиков Debian.</p>

<h2>Как работает <q>тестируемый</q> выпуск</h2>

<p><q>Тестируемый</q> выпуск генерируется автоматически.
Он создается из <q>нестабильного</q> выпуска при помощи набора сценариев, которые
пытаются переместить пакеты, не имеющие, как кажется, серьезных ошибок, мешающих выпуску (release-critical
bugs). Эти сценарии выполняют перемещение пакетов с учётом их зависимостей.</p>

<p>Пакет (конкретная версия пакета) будет перемещена в тестируемый выпуск, когда он
удовлетворяет всем следующим критериям:</p>

<ol>
  <li>Пакет должен находиться в нестабильном выпуске 10, 5 или 2 дня, в зависимости от
  срочности загрузки;</li>

  <li>Он должен быть скомпилирован и обновлён для всех архитектур, для
  которых он был ранее скомпилирован в нестабильном выпуске;</li>

  <li>Он не должен содержать ошибок, мешающих выпуску и которые не содержатся в
  версии пакета, уже находящейся в <q>тестируемом</q> выпуске (<a href="#faq">дополнительную
  информацию</a> см. ниже);</li>

  <li>Все его зависимости <em>либо</em> должны быть удовлетворены
  пакетами, уже находящимися в <q>тестируемом</q> выпуске, <em>либо</em> должны удовлетворяться группой
  пакетов, которые устанавливаются одновременно с ним;</li>

  <li>Операция установки пакета в <q>тестируемый</q> выпуск не должна ломать
  какие-либо пакеты, уже находящиеся в <q>тестируемом</q> выпуске. (<a href="#faq">дополнительную
  информацию</a> см. ниже.)</li>
</ol>

<p>Пакет, удовлетворяющий первым трём условиям из обозначенных выше, называется
<q>Годным кандидатом (Valid Candidate)</q>.</p>

<p>Сценарий обновления показывает, когда каждый пакет может быть перемещен из <q>нестабильного</q> выпуска
в <q>тестируемый</q>. Сценарий предоставляет два вывода:</p>

<ul>
  <li><a href="https://ftp-master.debian.org/testing/update_excuses.html">\
      причины обновления</a>
      [<a href="https://ftp-master.debian.org/testing/update_excuses.html.gz">\
      в формате gzip</a>]:
      список всех версий пакетов-кандидатов и простой статус попытки их
      перемещения в <q>тестируемый</q> выпуск; этот вывод более краток и более аккуратный, чем
  </li>
  <li> <a href="https://ftp-master.debian.org/testing/update_output.txt">\
      вывод обновления</a>
      [<a href="https://ftp-master.debian.org/testing/update_output.txt.gz">\
      в формате gzip</a>]:
      полный, необработанный вывод сценариев <q>тестируемого</q> вывода, содержащий
      информацию о рекурсивном прохождении по списку кандидатов
  </li>
</ul>

<h2><a name="faq">Часто задаваемые вопросы (с ответами)</a></h2>

# Note to translators: these two first items are almost the same as
# http://www.debian.org/doc/manuals/developers-reference/pkgs#faq

<h3><q>Что такое ошибки, мешающие выпуску (release-critical bugs), и как они подсчитываются?</q></h3>

<p>Все ошибки с высокой важностью по умолчанию считаются
<em><a href="https://bugs.debian.org/release-critical/">ошибками, мешающими выпуску</a></em>;
в настоящее время это ошибки с важностью <strong>critical</strong>, <strong>grave</strong> и
<strong>serious</strong>.</p>

<p>Предполагается, что эти ошибки оказывают влияние на шансы пакета
войти в стабильный выпуск Debian: вообще, если пакет
содержит открытые ошибки, мешающие выпуску, он не попадет в <q>тестируемый</q> выпуск и,
следовательно, не будет выпущен в составе <q>стабильного</q> выпуска.</p>

<p>
Количество ошибок в <q>тестируемом</q> выпуске представляет собой все ошибки, мешающие выпуску, которые
отмечены как применимые к комбинациям <tt>пакет/версия</tt>,
доступным в <q>тестируемом</q> выпуске для выпускаемой архитектуры.
</p>


<h3><q>Как установка пакета в <q>тестируемый</q> выпуск может сломать другие
пакеты?</q></h3>

<p>Структура архивов выпуска такова, что они могут содержать только
одну версию пакета; пакет, определяется его именем. Поэтому когда
пакет с исходным кодом <tt>acmefoo</tt> устанавливается в <q>тестируемый</q> выпуск вместе со
своими двоичными пакетами <tt>acme-foo-bin</tt>, <tt>acme-bar-bin</tt>,
<tt>libacme-foo1</tt> и <tt>libacme-foo-dev</tt>, то старая версия
удаляется.</p>

<p>Тем не менее, старые версии могут предоставлять двоичный пакет со старой
библиотекой с тем же именем, как например <tt>libacme-foo0</tt>. Удаление старого
<tt>acmefoo</tt> удалит <tt>libacme-foo0</tt>, что сломает все
пакеты, зависящие от этого пакета.</p>

<p>Очевидно, это в первую очередь оказывает влияние на пакеты, предоставляющие изменение набора
двоичных пакетов разных версий (в основном библиотек). Тем не менее,
это также оказывает влияние на пакеты, у которых зависимости по версии
объявлены как ==, &lt;= или &lt;&lt;.</p>

<p>Когда набор двоичных пакетов, предоставляемый пакетом с исходным кодом, изменяется указанным образом,
все пакеты, зависящие от старых двоичных файлов, должны быть обновлены так,
чтобы они зависели от новых двоичных файлов. Так как установка такого
пакета с исходным кодом в <q>тестируемый</q> выпуск ломает все пакеты, зависящие от него в
<q>тестируемом</q> выпуске, следует быть осторожным: все зависящие пакеты должны быть
обновлены и готовы для установки, чтобы они не были сломаны,
и, когда всё готово, обычно требуется вмешательство менеджера выпуска или его
ассистента.</p>

<p>Если вы испытываете проблемы со сложными группами пакетов,
для помощи свяжитесь с debian-devel или debian-release.</p>

<h3><q>Я всё ещё не понимаю! Сценарии <q>тестируемого</q> выпуска говорят, что этот
пакет является годным кандидатом, но он всё ещё не попал в
<q>тестируемый</q> выпуск.</q></h3>

<p>Скорее всего это происходит потому, что когда пакет устанавливается, напрямую или не напрямую,
он сломает некоторые другие пакеты.</p>

<p>Проверьте зависимости вашего пакета. Допустим ваш пакет
зависит от libtool или от libltdl<var>X</var>. Ваш пакет не может войти в
<q>тестируемый</q> выпуск, пока нужная версия libtool не будет готова войти в него.</p>

<p>В свою очередь, это не произойдёт пока установка libtool будет ломать пакеты,
уже находящиеся в <q>тестируемом</q> выпуске. Другими словами, пока все другие пакеты, которые зависят от
libltdl<var>Y</var> (где <var>Y</var> является более ранней версией) не
будут перекомпилированы, и все их ошибки, мешающие выпуску, не будут закрыты и т.д., ни один из этих
пакетов не войдёт в <q>тестируемый</q> выпуск.</p>

<p>Вот когда <a href="https://ftp-master.debian.org/testing/update_output.txt">\
текстовый вывод</a>
[<a href="https://ftp-master.debian.org/testing/update_output.txt.gz">в формате gzip</a>]
оказывается полезен: он даёт подсказки (хотя и очень краткие) о том, какие пакеты
ломаются, когда годный кандидат добавляется в <q>тестируемый</q> выпуск (<a
href="$(DOC)/manuals/developers-reference/pkgs#details">\
подробная информация в справочнике разработчика</a>).
</p>

<h3><q>Почему иногда трудно добавить пакеты с <kbd>Архитектура: all</kbd>
в <q>тестируемый</q> выпуск?</q></h3>

<p>Если должен быть установлен пакет с <kbd>Архитектура: all</kbd>, его
зависимости должны удовлетворяться на <strong>всех</strong>
архитектурах. Если он зависит от определённых пакетов, которые компилируются только на
ограниченном наборе архитектур Debian, то его зависимости не могут быть удовлетворены.</p>

<p>Тем не менее, в данное время <q>тестируемый</q> выпуск игнорирует возможность установки
пакетов с <kbd>Архитектура:all</kbd> на не-i386 архитектуры. (<q>Это
серьезный хак и я не то, чтобы рад, сделать это, но вот пожалуйста.</q>
&mdash;aj)</p>

<h3><q>Мой пакет застрял, так как он устарел на некоторых архитектурах.
Что мне делать?</q></h3>

<p>Проверьте статус вашего пакета в
<a href="https://buildd.debian.org/build.php">базе данных журналов сборки</a>.
Если пакет не собран, он будет отмечен как <em>провалившийся (failed)</em>;
исследуйте журналы сборки и исправьте проблемы, вызванные
исходным кодом вашего пакета.</p>

<p>Если вы заметили, что для некоторых архитектур новая
версия вашего пакета собралась, но он всё ещё не показывается в выводе сценарием <q>тестируемого</q> выпуска,
то вам следует немного потерпеть пока соответствующий buildd-сопровождающий
не загрузит файлы в архив Debian.</p>

<p>Если вы заметили, что для некоторых архитектур ваша новая версия
пакета вообще не собиралась, несмотря на тот факт, что вы загрузили исправление для более ранней
неудачной сборки, причина, вероятнее всего, состоит в том, что пакет отмечен как ожидающий зависимости
(Dep-Wait). Для верности вы также можете посмотреть список этих так называемых
<a href="https://buildd.debian.org/stats/">
wanna-build состояний</a>.</p>

<p>Эти проблемы обычно в конце концов исправляются, но если вы ждёте уже
большой промежуток времени (например, две недели или больше), уведомите соответствующего
сопровождающего переноса buildd, если он указан на
<a href="$(HOME)/ports/">веб-странице переноса</a>, или напишите в список рассылки
этого переноса.</p>

<p>Если вы явным образом исключили какую-то архитектуру из списка Architecture
в управляющем файле (control file), а пакет уже был собран для этой архитектуры
ранее, вам нужно запросить удаление старого двоичного пакета для
этой архитектуры из архива до того, как ваш пакет сможет перейти в
тестируемый выпуск. Вам следует отправить отчёт об ошибке в <q>ftp.debian.org</q>, запрашивая удаление
пакетов исключённой архитектуры из нестабильного архива. Как правило,
в целях этикета следует уведомить список рассылки соответствующего переноса.</p>

<h3><q>Есть ли исключения? Я уверен, что <tt>acmefoo</tt> попал
в <q>тестируемый</q> выпуск, хотя он не удовлетворяет всем требованиям.</q></h3>

<p>Менеджеры выпуска могут отменять эти правила двумя способами:</p>

<ul>
  <li>Они могут решить, что поломка, вызванная установкой новой
      библиотеки, сделает всё лучше, а не хуже, и позволят ей войти
      выпуск со всей флотилией зависимостей.</li>
  <li>Они могут вручную удалить пакеты из <q>тестируемого</q> выпуска, которые
      были бы сломаны, поэтому новое ПО может быть установлено.</li>
</ul>

<h3><q>Покажите реальный, нетривиальный пример</q></h3>

<p>Вот он: когда пакет с исходным кодом <tt>apache</tt> устанавливается в
<q>тестируемый</q> выпуск вместе со своими двоичными пакетами <tt>apache</tt>,
<tt>apache-common</tt>, <tt>apache-dev</tt> и <tt>apache-doc</tt>, старая
версия удаляется.</p>

<p>Тем не менее, все пакеты с модулями Apache зависят от <code>apache-common (&gt;=
<var>что-то</var>), apache-common (&lt;&lt; <var>что-то</var>)</code>,
поэтому это изменение сломает все эти зависимости. Следовательно, все модули Apache
должны быть перекомпилированы с новой версией Apache для того, чтобы
<q>тестируемый</q> выпуск был обновлён.</p>

<p>Давайте рассмотрим это более тщательно: после того как все модули
будут обновлены в нестабильном выпуске так, чтобы они работали с новой версией Apache, сценарии <q>тестируемого</q>
проверят пакет <tt>apache-common</tt> и обнаружат, что он ломает все модули Apache,
поскольку они имеют параметр <code>Зависит: apache-common (&lt;&lt; <var>текущая
версия</var>)</code>, и затем проверят <tt>libapache-<var>foo</var></tt> и обнаружат, что
он не устанавливается, поскольку имеет параметр <code>Зависит: apache-common (&gt;=
<var>новая версия</var>)</code>.</p>

<p>Тем не менее, позже они применят другую логику (иногда она вызывается
вручную): они будут игнорировать тот факт, что <tt>apache-common</tt> ломает
пакеты, и продолжат; если пакет всё ещё не работает после того,
как мы сделаем всё, что можно, очень жаль, но может быть он <strong>будет</strong>
работать. Позже сценарии проверят все случайные пакеты <tt>libapache-<var>foo</var></tt>
и увидят, что они работают.</p>

<p>После того, как всё было попробовано, они попытаются проверить то, сколько пакетов будет
сломано, выяснят, лучше это или хуже, чем то, что было изначально, и
если да, примут всё и забудут об этом пакете. Вы увидите это в
<tt>update_output.txt</tt> на строках <q><code>recur:</code></q>.</p>

<p>Например:</p>

<pre>
         recur: [<var>foo</var> <var>bar</var>] <var>baz</var>
</pre>

<p>по сути, говорит, что <q>уже обнаружено, что <var>foo</var> и
<var>bar</var> лучше, я не пытаюсь <var>baz</var>, чтобы
посмотреть, что происходит, даже несмотря на то, что это ломает пакеты</q>. Строки
<tt>update_output.txt</tt>, начинающиеся с <q><code>accepted (принято)</code></q>, обозначают, что
то, что появится лучше, а строки, начинающиеся с <q><code>skipped (пропущено)</code></q> обозначают, что
то, что может появится, хуже.</p>

<h3><q>Файл <tt>update_output.txt</tt> совершенно нечитаем!</q></h3>

<p>Это не вопрос. ;-)</p>

<p>Давайте рассмотрим пример:</p>

<pre>
 skipped: cln (0) (150+4)
     got: 167+0: a-40:a-33:h-49:i-45
     * i386: ginac-cint, libginac-dev
</pre>

<p>Это означает, что если <tt>cln</tt> войдёт в <q>тестируемый</q> выпуск, то <tt>ginac-cint</tt>
и <tt>libginac-dev</tt> станут неустанавливаемыми в <q>тестируемом</q> выпуске на i386.
Заметьте, что архитектуры проверяются в алфавитном порядке и показываются только
проблемы первой архитектуры &mdash; вот почему
чаще всего показывается архитектура alpha.</p>

<p>Строки с <q>got</q> содержат количество проблем в <q>тестируемом</q> выпуске на
разных архитектурах (до первой архитектуры, где найдена
проблема &mdash; см. выше). <q>i-45</q> означает, что если бы <tt>cln</tt> вошёл в
<q>тестируемый</q> выпуск, в выпуске было бы 45 неустанавливаемых пакетов на i386. Некоторые из
пунктов, приведённых над и под <tt>cln</tt>, показывают, что 43 пакета были неустанавливаемыми
в <q>тестируемом</q> выпуске на i386 в это время.</p>

<p>Строка <q>skipped: cln (0) (150+4)</q> означает, что остаётся 150
пакетов, которые следует проверить, чтобы проверка всех пакетов
была завершена, и что 4 пакета уже не планируются
для обновления, так как они будут ломать зависимости. Число <q>(0)</q> не
важно, вы можете его игнорировать.</p>

<p>Заметьте, что проводится несколько проверок всех пакетов в одном запуске сценария
<q>тестируемого</q> выпуска.</p>

<p><em>Изначально часто задаваемые вопросы и ответы на них собрал
Жиль Бьян (Jules Bean).</em></p>
# Created: Sat Dec  8 12:44:29 GMT 2001

<h2>Дополнительная информация</h2>

<p>Следующие страницы содержат дополнительную информацию о текущем состоянии
тестируемого выпуска и миграции пакетов из нестабильного выпуска в тестируемый:</p>

<ul>
<li>Статистика по устаревшим двоичным пакетам в
<a href="https://ftp-master.debian.org/testing/testing_outdate.txt">testing</a>,
<a href="https://ftp-master.debian.org/testing/stable_outdate.txt">stable</a>
<li>Проблемы с зависимостями в
<a href="http://qa.debian.org/debcheck.php?list=INDEX&amp;dist=testing">testing</a>,
<a href="http://qa.debian.org/debcheck.php?list=INDEX&amp;dist=stable">stable</a>
<li>Заметим, что есть <a href="http://release.debian.org/migration/">веб-интерфейс</a>,
который помогает понять, почему пакеты не попали в тестируемый выпуск</ul>

<p>Также вам может быть интересно прочитать старое
<a href="https://lists.debian.org/debian-devel-0008/msg00906.html">письмо
с объяснением</a>. Его единственный главный недостаток в том, что в нём
не учитывается пул пакетов, так как он был реализован Джеймсом Троупом (James Troup)
после того, как было написано письмо.</p>

<p>Тестирующий код доступен с
<a href="https://ftp-master.debian.org/testing/update_out_code/">ftp-master</a>.</p>

<p><em>За реализацию тестирования благодарим Энтони Тоунса (Anthony Towns).</em></p>
