<sect>Compatibility issues <label id="Compatibility">
<P>
<sect1>How compatible is Debian with other distributions of Linux?
	<label id="other distribs">
<P>
Debian developers communicate with other Linux distribution creators
in an effort to maintain binary compatibility across Linux distributions.
Most commercial Linux products run as well under Debian as they do on the
system upon which they were built.

<P>
Debian GNU/Linux adheres to the
<!-- XXX update to FHS when it is ready -->
<url url="http://www.pathname.com/fhs/" name="Linux File System Structure">.
However, there is room for interpretation in some of
the rules within this standard, so there may be differences between a
Debian system and other Linux systems.
The newest release of this FSSTND standard is now called FHS and we
plan to move to it shortly.

<sect1>How source code compatible is Debian with other Unix systems?
	<label id="other Unices">
<P>
For most applications Linux source code is compatible
with other  Unix systems. It supports almost everything that
is available in System V Unix systems and the free and commercial
BSD-derived systems. However in the Unix business such claim has nearly no
value because there is no way to prove it. In the software
development area complete compatibility is required instead of
compatibility in &dquot;about most&dquot; cases. So years ago the need
for standards arose, and nowadays POSIX.1 (IEEE Standard 1003.1-1990)
is one of the major standards for source code compatibility in
Unix-like operating systems.

Linux is intended to adhere to POSIX.1, but the POSIX standards cost
real money and the POSIX.1 (and FIPS 151-2) certification is quite
expensive; this made it more difficult for the Linux developers to
work on complete POSIX conformance. The certification costs make it
unlikely that Debian will get an official conformance certification
even if it completely passed the validation suite. (The
validation suite is now freely available, so it is expected that
more people will work on POSIX.1 issues.)

<!--
<P>
<bf>(The authors would very much like to
give you a pointer to an on-line document that described that standard,
but the IEEE is another one of those organizations that gets away with
declaring standards and then requiring that people PAY to find out what
they are.  This makes about as much sense as having to find out the
significance of various colored lights on traffic signals.)</bf>
-->

<P>
Unifix GmbH (Braunschweig, Germany) developed a Linux system that has
been certified to conform to FIPS 151-2 (a superset of POSIX.1). This
technology was available in Unifix' own distribution called Unifix
Linux 2.0 and in Lasermoon's Linux-FT.
<!-- I had to comment this out for obvious reasons... SVD
 <url
url="http://www.lasermoon.co.uk/linux-ft/linux-ft.html"
name="Linux-FT">. Currently Unifix merges its patches into the Linux
kernel, gcc and other tools; so it is expected that their fixes
towards POSIX.1 conformance will be available in Debian (and other
distributions).
-->

<sect1>
Can I use Debian packages (&dquot;.deb&dquot; files) on my Red Hat/Slackware/... Linux system? Can I use Red Hat packages (&dquot;.rpm&dquot; files) on my Debian GNU/Linux system?
<label id="other packages">
<P>
Different Linux distributions use different package formats and different
package management programs.

<!-- stupid tags -->
<descrip>
<tag/You probably can:/A program to unpack a Debian package
onto a Linux host that is been built from a `foreign' distribution
is available, and will generally work, in the sense that files will be
unpacked.  The converse is probably also true, that is, a program to
unpack a Red Hat or Slackware package on a host that is based on Debian Linux
will probably succeed in unpacking the package and placing most files in
their intended directories.  This is largely a consequence of the existence
(and broad adherence to) the Linux File System Standard.
<P>
<tag/You probably do not want to:/Most package managers write
administrative files when they
are used to unpack an archive.  These administrative files are generally
not standardized.  Therefore, the effect of unpacking a Debian package
on a `foreign' host will have unpredictable (certainly not useful) effects
on the package manager on that system.  Likewise, utilities from other
distributions might succeed in unpacking their archives on Debian systems,
but will probably cause the Debian package management system to fail when the
time comes to upgrade or remove some packages, or even simply to report
exactly what packages are present on a system.
<P>
<tag/A better way:/The Linux File System Standard (and therefore
Debian GNU/Linux) requires that subdirectories under <tt>/usr/local/</tt> be
entirely under the user's discretion.  Therefore, users can unpack
`foreign' packages into this directory, and then manage their configuration,
upgrade and removal individually.
</descrip>
<P>

<!-- It would be useful to document all the ways in which Debian and Red Hat
systems differ.  I believe such a document would do a lot to dispell
fears of using a Unix system. SGK
-->

<sect1>Is Debian able to run my very old &dquot;a.out&dquot; programs?
<label id="a.out">
<P>
Do you still have such a program?

To <em>execute</em> a program whose binary is in <tt>a.out</tt>
(i.e., QMAGIC or ZMAGIC) format,
<itemize>

  <item>Make sure your kernel has <tt>a.out</tt>
  support built into it, either directly (CONFIG_BINFMT_AOUT=y) or as a
  module (CONFIG_BINFMT_AOUT=m).  (Debian's kernel-image package contains
  the module <tt>binfmt_aout</tt>.)
  <P>
  If your kernel supports <tt>a.out</tt> binaries by a module, then be
  sure that the <tt>binfmt_aout</tt> module is loaded.  You can do this
  at boot time by entering the line <tt>binfmt_aout</tt> into the file
  <tt>/etc/modules</tt>.  You can do it from the command line by
  executing the command <tt>insmod DIRNAME/binfmt_aout.o</tt> where
  <tt>DIRNAME</tt> is the name of the directory where the modules that
  have been built for the version of the kernel now running are stored.
  On a system with the 2.0.36 version of the kernel,
  <tt>DIRNAME</tt> is likely to be <tt>/lib/modules/2.0.36/fs/</tt>.

  <item>install the package <tt>libc4</tt>.
<p>
By the time Debian 2.0 is released, it is very likely that the
<tt>libc4</tt> package had been already removed from the distribution. If
this is the case, you might want to look for an old Debian CD-ROM
(Debian 1.3.1 still had this package).

<item>If the program you want to execute is an <tt>a.out</tt> X client, then
install the <tt>xcompat</tt> package.
<p>

</itemize>

<P>
If you have a commercial application in <tt>a.out</tt> format, now would
be a good time to ask them to send you an <tt>ELF</tt> upgrade.
<P>

<!-- Nowadays, this is of very little interest.
     I'm commenting this out. SVD.

<sect1>Can Debian be used to compile &dquot;a.out&dquot; programs?
<P>
Well, yes, as long as you get the required packages from an old Debian
CD-ROM... Since the a.out format is really obsolete by now, we do not
include the libc4 development tools in the distribution anymore.

If for whatever reason you need to compile something in a.out format, you
will need the packages <tt>libc4-dev</tt>, <tt>aout-binutils</tt>,
and <tt>aout-gcc</tt>.

Then you would have to place the <tt>a.out</tt> tools ahead of the normal
tools in your path. That is, execute the command <tt>export
PATH=/usr/i486-linuxaout/bin:$PATH</tt> (This is not essential, just
advantageous.)  If you are only going to do this once, you could execute:
<tt>PATH=/usr/i486-linuxaout/bin:$PATH make [target]</tt>.

-->

<sect1>Is Debian able to run my old libc5 programs?
<P>
Yes. Just install the required libraries from the <tt>oldlibs</tt>
section, which are included in Debian 2.0 for compatibility with older
applications.

<sect1>Can Debian be used to compile libc5 programs?
<P>
Yes. In Debian, your system can be fully upgraded to libc6 (including the
development packages), and yet it is possible to develop programs for
libc5. Just install the required <tt>-altdev</tt> packages. The minimum
set of packages you will need is: <tt>altgcc</tt> in section
<tt>devel</tt> and <tt>libc5-altdev</tt> in section <tt>oldlibs</tt>.

Then you would have to place the <tt>libc5</tt> tools ahead of the normal
tools in your path. That is, execute the command <tt>export
PATH=/usr/i486-linuxlibc1/bin:$PATH</tt> (This is not essential, just
advantageous.)  If you are only going to do this once, you could execute:
<tt>PATH=/usr/i486-linuxlibc1/bin:$PATH make [target]</tt>.

<sect1>How should I install a non-Debian package?
	<label id="non-Debian programs">
<P>
Files under the directory <tt>/usr/local/</tt> are not under the control
of the Debian package management system.  Therefore, it is good practice
<!-- XXX /usr/local/src ???
Yes, I think this is right. SVD
-->
to place the source code for your program in /usr/local/src/.  For example,
you might extract the files for a package named &dquot;foo.tar&dquot;
into the directory <tt>/usr/local/src/foo</tt>.  After you compile them,
place the binaries in <tt>/usr/local/bin/</tt>, the libraries in
<tt>/usr/local/lib/</tt>, and the configuration files in
<tt>/usr/local/etc/</tt>.
<P>
If your programs and/or files really must be placed
in some other directory, you could still store them in <tt>/usr/local/</tt>,
and build the appropriate symbolic links from the required location
to its location in <tt>/usr/local/</tt>, e.g., you could make the link
<verb>ln -s /usr/local/bin/foo /usr/bin/foo</verb>
<P>
 In any case, if you obtain a package whose copyright allows
redistribution, you should consider making a Debian package of it, and
uploading it for the Debian system.  Guidelines for becoming a package
developer are included in the
<ref id="DebianDocs" name="Debian policy manual">.

<sect1>Why can't I compile programs that require libtermcap?
	<label id="termcap">
<P>
Debian uses the <tt>terminfo</tt> database and the <tt>ncurses</tt> library
of terminal interface routes, rather than the <tt>termcap</tt> database
and the <tt>termcap</tt> library.  Users who are compiling programs that
require some knowledge of the terminal interface should replace references
to <tt>libtermcap</tt> with references to <tt>libncurses</tt>.
<P>
To support binaries that have already been linked with the <tt>termcap</tt>
library, and for which you do not have the source,
Debian provides a package called <tt>termcap-compat</tt>.  This provides
both <tt>libtermcap.so.2</tt> and <tt>/etc/termcap</tt>.  Install this
package if the program fails to run with the error message
&dquot;can't load library 'libtermcap.so.2'&dquot;, or
complains about a missing <tt>/etc/termcap</tt> file.

<sect1>Why can't I install AccelX?
	<label id="AccelX">
<P>
AccelX uses the <tt>termcap</tt> library for installation. See <ref
id="termcap" name="about termcap"> above.

<sect1>Why do I get &dquot;Can't find libX11.so.6&dquot; errors when I try to run <tt>foo</tt>?
<P>
This error message could mean that the program is linked
against the <tt>libc5</tt> version of the X11 libraries.
In this case you need to install the <tt>xlib6</tt> package, from the
<tt>oldlibs</tt> section.

<sect1>Can I install and compile a kernel without some Debian-specific tweaking?
<P>
Yes.  But you have to understand the Debian policy with respect to headers.
<P>
The Debian C libraries are built with the most recent <em>stable</em>
releases of the <tt>gcc</tt> headers.
<!-- QUESTION: gcc headers or *kernel* headers??  SVD -->
<p>
For example, the Debian-1.2 release
used version 5.4.13 of the headers.  This practice contrasts with the Linux
kernel source packages distributed at all Linux FTP archive sites,
which uses even more recent versions of the headers.  The kernel headers
distributed with the kernel source are located in
<tt>/usr/include/linux/include/</tt>.
<P>
If you need to compile a program with kernel headers that are newer
than those provided by <tt>libc6-dev</tt>, then you must add
<tt>-I/usr/src/linux/include/</tt> to your command line when compiling.
This came up at one point, for example, with the packaging of the
automounter daemon (<tt>amd</tt>).  When new kernels changed some
internals dealing with NFS, <tt>amd</tt> needed to know about them.  This
required the inclusion of the latest kernel headers.
