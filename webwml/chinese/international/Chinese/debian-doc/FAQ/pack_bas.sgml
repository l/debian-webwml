<sect>Basics of the Debian Package Management System<label id="pms">
<P>

<sect1>What is a Debian package?<label id="package">
<P>
Packages generally contain all of the files necessary
to implement a set of related commands or features.  There are
two types of Debian packages:
<itemize>
<item><em>Binary packages</em>, which contain executables, configuration
files, man/info pages, copyright
information, and other documentation.   These packages
are distributed in a Debian-specific
<ref id="deb-format" name="archive format">; they are usually distinguished
by having a '.deb' file extension.
Binary packages can be unpacked using the Debian utility <tt>dpkg</tt>;
details are given in its manual page.

<item><em>Source packages</em>, which consist of a <tt>.dsc</tt> file
 describing the source package (including the names of the following
files), a <tt>.orig.tar.gz</tt> file that contains the original
unmodified source in gzip-compressed tar format and usually a
<tt>.diff.gz</tt> file that contains the Debian-specific changes to the
original source.  The utility <tt>dpkg-source</tt> packs and unpacks
Debian source archives; details are provided in its manual page.
</itemize>

<P>
Installation of software by the package system uses
&dquot;dependencies&dquot; which are carefully designed by
the package maintainers.  These dependencies are documented
in the <tt>control</tt> file associated
with each package.  For example, the package containing the
GNU C compiler (<tt>gcc</tt>) &dquot;depends&dquot; on the package
<tt>binutils</tt> which includes the linker and assembler.
If a user attempts to install <tt>gcc</tt> without having first installed
<tt>binutils</tt>,
Debian's package system will send an error message that it also needs
<tt>binutils</tt>, and will install <tt>gcc</tt> only if the user agrees
to install <tt>binutils</tt> first.  (However, this facility can be
overridden by the insistent user.)  See more
<ref id="depends" name="details on package dependencies"> below.
<P>
Debian's packaging tools can be used to:
<itemize>
<item>manipulate and manage packages or parts of packages,
<item>aid the user in the break-up of packages that must be transmitted
through a limited-size medium such as floppy disks,
<item>aid developers in the construction of package archives, and
<item>aid users in the installation of packages which reside on a remote
FTP site.
</itemize>

<sect1>What is the format of a Debian binary package?<label id="deb-format">
<P>
A Debian &dquot;package&dquot;, or a Debian archive file, contains the
executable files, libraries, and documentation associated with a particular
suite of program or set of related programs.  Normally, a Debian archive
file has a filename that ends in <tt>.deb</tt>.

The internals of this Debian binary packages format are described in
the <tt>deb</tt>(5) manual page. This internal format is subject
to change, therefore always use <tt>dpkg-deb</tt>(8) for
manipulating <tt>.deb</tt> files.

<sect1>Why are Debian package file names so long? <label id="pkgname"></>
<P>
The Debian binary package file names conform to the following convention:
&lt;foo&gt;_&lt;VersionNumber&gt;-&lt;DebianRevisionNumber&gt;.deb

<P>
Note that <tt>foo</tt> is supposed to be the package name.
As a check, one can learn the package name associated with a
particular Debian archive file (.deb file) in one of these ways:
<itemize>
<item>inspect the &dquot;Packages&dquot; file in the directory
where it was stored in a Debian FTP archive site.  This file contains
a stanza describing each package; the first field in each stanza is the
formal Package Name.
<item>use the command <tt>dpkg --info foo_VVV-RRR.deb</tt>.  This sends
a message to STDOUT which gives, among other things, the
Package Name corresponding to the archive file being unpacked.
</itemize>

<P>
The <tt>VVV</tt> component is the version number specified by the
upstream developer.  There are no standards in place here, so the version
number may have formats as different as
&dquot;960428&dquot; and &dquot;2.7.2.l.3&dquot;.

<P>
The <tt>RRR</tt> component is the Debian revision number, and is
specified by the
Debian developer (or an individual user if he chooses to build the package
himself).  This number corresponds to the revision level of the Debian
package (which includes the Debian-specific Makefile, called
<tt>debian/rules</tt>, as well as the Debian control file, usually called
<tt>debian/control</tt>).  Thus, a new revision level usually signifies
changes in the Debian Makefile, the Debian control file, the installation
or removal scripts, or in the configuration files used with the package.

<!--
<P>
The <tt>Arch</tt> component identifies the processor for which the
package was built.  This is commonly <tt>i386</tt>, which refers to
chips compatible to Intel's 386 or later versions.  For other
possibilities see <ref id="dirtree" name="Debian's FTP directory structure">.
-->

<sect1>What is a Debian control file?<label id="CtlFile">
<P>
Specifics regarding the contents of a Debian control file are provided
in the <url
url="ftp://ftp.debian.org/debian/doc/package-developer/programmer.ps.gz"
name="dpkg programmer's manual">.  Briefly,
a sample control file is shown below for the Debian package hello:
<!-- XXX below 'non-programmers' were better, but this is a verbatim copy -->
<!-- update to Debian 1.2 -->
<tscreen><verb>
Package: hello
Version: 1.3-13
Architecture: i386
Depends: libc5 (>= 5.2.18)
Installed-Size: 31
Maintainer: Ian Jackson <ian@chiark.greenend.org.uk>
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
 allows nonprogrammers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
</verb></tscreen>
<P>
The Package field gives the package name.  This is the name by which the
package can be manipulated by the package tools, and usually similar
to but not necessarily the same as the first component string in the
Debian archive file name.
<p>
The version field gives both the upstream developer's
version number and (in the last component) the revision level of the Debian
package of this program as explained in <ref id="pkgname">. <!-- XXX missing name -->
<p>
The Architecture field specifies the chip for which this particular
binary was compiled.
<P>
The Depends field gives a list of packages that have to be
installed in order to install this package successfully.
<P>
The Installed-Size indicates how much disk space the installed package
will consume. This is intended to be used by installation front-ends in
order to show whether there is enough disk space available to install the
program .
<!--
<P>
The Section line gives the &dquot;section&dquot; where this Debian package
is stored at the Debian FTP sites.  This is the name of a subdirectory
(within one of the main directories, see <ref id="dirtree" name="more about
the Debian FTP directory structure">) where the package is stored.
<P>
Priority
-->
<p>
The Maintainer field gives the e-mail address of the person who is
currently responsible for maintaining this package.
<P>
The Description field gives a brief summary of the package's features.

<!--
<P>
The Conflicts field tells the user (and the Debian package maintenance
tools) what other packages cannot co-exist with the programs in this package.
The Replaces field tells what packages will be replaced when this one
is installed. The Provides field tells what packages will be installed
by this package; this is a mechanism by which multiple packages can be
distributed as a single package, which is in some cases an aid to the
package maintenance system.
-->
<P>

<sect1>What is a Debian conffile?<label id="conffile"></>
<P>
Conffiles are listings of configuration files, usually placed in
<tt>/etc</tt>, that the package management system will not overwrite
when a package is upgraded.
This ensures that local values for the contents of these files
will be preserved, and is a critical feature enabling the in-place upgrade
of packages on a running system.

To determine exactly which files are preserved during an upgrade, run<tt> dpkg --status package</tt>.

<sect1>What is a Debian preinst, postinst, prerm, and postrm script? <label id="PrePost"></>
<P>
These files are executable scripts which are automatically run before
or after a package is installed.
Along with a file named <tt>control</tt>, all of these files are part
of the &dquot;control&dquot; section of a Debian archive file.
<P>
The individual files are:
<descrip>
<tag/preinst/  This script executes before that  package
will be unpacked from its Debian archive
(&dquot;.deb&dquot;) file.
Many 'preinst' scripts stop services for packages which are being
upgraded until their installation or upgrade is completed
(following the successful execution of the 'postinst' script).

<tag/postinst/ This script typically completes any required
configuration of the package <tt>foo</tt> once <tt>foo</tt> has been unpacked
from its Debian archive (&dquot;.deb&dquot;) file.
Often, 'postinst' scripts ask the
user for input, and/or warn the user that if he accepts default values,
he should remember to go back and re-configure that package as the
situation warrants.  Many 'postinst' scripts then execute any commands
necessary to start or restart a service once a new package has been
installed or upgraded.  <em>It is a good idea to check the contents of
the 'postinst' script for any configuration advice, when trying out a
package for the first time.</em>

<tag/prerm/ This script typically stops any daemons which
are associated with a package.  It is executed before the removal
of files associated with the package.

<tag/postrm/ This script typically modifies links or other
files associated with <tt>foo</tt>. (See notes on <ref id="virtual"
name="Virtual packages">.)

</descrip>

Currently all of the control files can be found in <tt>/var/lib/dpkg/info</tt>.
The files relevant to package <tt>foo</tt> begin with the name
&dquot;foo&dquot; and have file extensions of &dquot;preinst&dquot;,
&dquot;postinst&dquot;, etc., as appropriate.  The file <tt>foo.list</tt>
in that directory
lists all of the files that were installed with the package <tt>foo</tt>.
(Note that the location of these files is a dpkg internal; you should not
rely on it.)

<sect1>What is a Required/Important/Standard/Optional/Extra package?  <P>
<P>
Each Debian package is assigned a <em>priority</em> by the distribution
maintainers, as an aid to the package management system.  The priorities
are:

<itemize>
<item><bf>Required</bf> packages are necessary for the proper
 functioning of the system.
 This inludes all tools that are necessary to repair system defects.
 You must not remove these packages or your system may
 become totally broken and you may probably not even be able to use
 dpkg to put things back.  Systems with only the Required packages are
 probably unusable, but they do have enough functionality to allow
 the sysadmin to boot and install more software.

<item><bf>Important</bf> packages should be found on any Unix-like system.
Other packages which the system will not run well or be usable without
will be here.
This does <em>NOT</em> include Emacs or X11 or TeX or any other large
applications.  These packages only constitute the bare infrastructure.

<item><bf>Standard</bf> packages are standard on any Linux system,
including a reasonably small but not too limited character-mode system.
This is what will install by default if users do not select anything else.
It does not include many large applications, but it does include Emacs
(this is more of a piece of infrastructure than an application) and
a reasonable subset of TeX and LaTeX (if this turns out to be possible
without X).

<item><bf>Optional</bf> packages include all those that you might reasonably
want to install if you did not know what it was or do not have specialized
requirements.  This includes X11, a full TeX distribution, and lots
  of applications.
<item><bf>Extra</bf> packages conflict with others with higher priorities,
  or are only likely to be useful if you already know what they are or
  have specialized requirements.
</itemize>

<sect1>What is a Virtual Package?<label id="virtual">
<P>
A virtual package is a generic name that applies to any one of a group
of packages, all of which provide similar basic functionality.
For example, both the <tt>tin</tt> and <tt>trn</tt> programs
are both news readers, and should therefore satisfy any dependency of
a program that required a news reader on a system in order to work
or to be useful.
They are therefore both said to provide the &dquot;virtual package&dquot;
called <tt>news-reader</tt>.

<P>
Similarly, <tt>smail</tt> and <tt>sendmail</tt> both provide the
functionality of a mail transport agent.  They are therefore said to
provide the virtual package, &dquot;mail transport agent&dquot;.
If either one is installed, then any program depending on the
installation of a <tt>mail-transport-agent</tt> will be satisfied by
the existence of this virtual package.

<P>
Debian provides a mechanism so that, if more than one package which
provide the same virtual package is installed on a system,
then system administrators can set one as the preferred package.
The relevant command is <tt>update-alternatives</tt>, and is
described further in the section on <ref id="diverse" name="diversions">.

<sect1>
What is meant by saying that a file Depends/Recommends/Suggests/Conflicts/Replaces/Provides another package?<label id="depends">
<P>
The Debian package system has a range of package &dquot;dependencies&dquot;
which are designed to indicate (in a single flag) the level at which
Program A can operate independently of the existence of Program B on
a given system:
 <itemize>
 <item>Package A <em>depends</em> on Package B if B absolutely must
be installed in order to run A.  In some cases, A depends not only
on B, but on a version of B.  In this case, the version dependency is usually
a lower limit, in the sense that A depends on any version of B more recent
than some specified version.
 <item>Package A <em>recommends</em> Package B, if the package maintainer
judges that most users would not want A without also having the
functionality provided by B.
 <item>Package A <em>suggests</em> Package B if B contains files that
are related to (and usually enhance) the functionality of A.
  <item>Package A <em>conflicts</em> with Package B when A will not
operate if B is installed on the system.  Most often, conflicts are
cases where A contains files which are an improvement over those in B.
&dquot;Conflicts&dquot; are often combined with &dquot;replaces&dquot;.
  <item>Package A <em>replaces</em> Package B when files installed
by B are removed and (in some cases) over-written by files in A.
  <item>Package A <em>provides</em> Package B when all of the files and
functionality of B are incorporated into A.  This mechanism provides
a way for users with constrained disk space to get only that part of
package A which they really need.
 </itemize>

More detailed information on the use of these terms can be found in the
<htmlurl
url="ftp://ftp.debian.org/debian/doc/package-developer/programmer.ps.gz"
name="Debian programmer's manual">.

<sect1>What is meant by Pre-Depends?
<P>
&dquot;Pre-Depends&dquot; is a special dependency.
<P>
In the case of most packages, <tt>dpkg</tt> will unpack its archive
file (i.e., its <tt>.deb</tt> file) independently of whether or not the
files on which it depends exist on the system.  Simplistically,
unpacking means  that <tt>dpkg</tt> will extract the files from the archive
file that were meant to be installed on your filesystem, and put them
in place.  If those packages <em>depend</em> on the existence of some
other packages on your system, <tt>dpkg</tt> will refuse to complete the
installation by executing its &dquot;configure&dquot; action until the
other packages are installed.
<P>
However, for some packages, <tt>dpkg</tt> will refuse even to unpack
them until certain dependencies are resolved.  Such packages are said
to &dquot;Pre-depend&dquot; on the presence of some other packages.
The Debian project provided this mechanism to support the safe upgrading
of systems from <tt>a.out</tt> format to <tt>ELF</tt> format, where
the <em>order</em> in which packages were unpacked was critical.

More detailed information on the use of these terms can be found in the
<htmlurl
url="ftp://ftp.debian.org/debian/doc/package-developer/programmer.ps.gz"
name="Debian programmer's manual">.

<sect1>What is meant by unknown/install/remove/purge/hold in the package status?
<P>
These &dquot;want&dquot; flags tell what the user wanted to do with
a package (as indicated either by the user's actions in
the &dquot;Select&dquot; section of <tt>dselect</tt>, or by the user's
direct invocations of <tt>dpkg</tt>).  Their meanings are:
<itemize>
<item>unknown  - the user has not said whether he wants the package
<item>install  - the user wants the package installed or upgraded
<item>remove   - the user wants the package removed, but does not want to
  remove any existing configuration files.
<item>purge    - the user wants the package to be removed completely, including
configuration files.
<item>hold     - the user wants this package not to be processed, i.e., he
wants to keep the current version with the current status whatever that is.
</itemize>

<sect1>How do I install a source package?
<p>
Debian source packages are not &dquot;installed&dquot;, they are just
unpacked in whatever directory you want to build the binary packages they
produce. Source packages are distributed in a directory called
<tt>source</tt>, and you have to download them manually (i.e. there
is no tool like dselect or dpkg-ftp to fetch source packages).

<sect1>How do I build binary packages from a source package?
<p>
You will need all of .dsc, .tar.gz and .diff.gz to compile the
source (there is no .diff.gz for a Debian native package). Once you have
them, if you have the <tt>dpkg-dev</tt> package installed, the command
<p>
<tt>dpkg-source -x foo_version-debversion.dsc</tt>
<p>
extracts the package into a directory called <tt>foo-version</tt>. If you
want just to compile the package, you may cd into <tt>foo-version</tt>
and issue the command
<p>
<tt>debian/rules binary</tt>
<p>
under root.

<sect1>Where will I get detailed info on creating Debian packages?
<p>
See <ref id="DebianDocs"
  name="the dpkg programmer's manual and the Debian policy manual">
