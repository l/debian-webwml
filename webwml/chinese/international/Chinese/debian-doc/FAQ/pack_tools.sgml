<sect>The Debian Package Management Tools<label id="PkgTools"></>
<P>

<sect1>What program(s) does Debian provide for managing its packages?
<P>
<!-- XXX <sect2> in sgml2xxx does no section numbering, so don't use <tt> -->
<sect2>dselect<label id="dselect">
<P>
This program is a menu-driven interface to the
  Debian package management system.  It is particularly useful for
  first-time installations and large-scale upgrades.  <tt>dselect</tt> can
  <itemize>
    <item>guide the user as he/she chooses among packages to install or remove,
     ensuring that no packages are installed that conflict with one another,
     and that all packages required to make each package work properly are
     installed;
    <item>warn the user about inconsistencies or incompatibilities in their
    selections;
    <item>determine the order in which the packages must be installed;
    <item>automatically perform the installation or removal; and
    <item>guide the user through whatever configuration process are required for
    each package.
  </itemize>
<P>
  <tt>dselect</tt> begins by presenting the user with a menu of 7 items, each
  of which is a specific action. The user can select one of the actions by
  using the arrow keys to move the highlighter bar, then pressing the ENTER
  key to select the highlighted action.
  <P>
  What the user sees next depends on the action he selected.  If he
  selects any option but <tt>Access</tt> or <tt>Select</tt>, then
  <tt>dselect</tt> will simply proceed to execute the specified action:
  e.g., if the user selected the action <tt>Remove</tt>, then dselect would
  proceed to remove all of the files selected for removal when the user
  last chose the <tt>Select</tt> action.
  <P>
  Both the <tt>Access</tt> menu item and the <tt>Select</tt> menu item
  lead to additional menus.  In both cases, the menus are presented as
  split screens; the top screen gives a scrollable list of choices, while
  the bottom screen gives a brief explanation (&dquot;info&dquot;) for
  each choice.
  <P>
  Extensive on-line help is available:  Use the '?' key to get to a help
  screen, then use the '.' key to see each of the several pages of help
  one screen at a time.
  <P>Some users find it easier to navigate <tt>dselect</tt> when it is
  colorized.  To see color screens in <tt>dselect</tt>, be sure that
  you have executed:
  <tt>export TERM=linux</tt> before invoking <tt>dselect</tt>.
  <P>
  The order in which the actions are presented in the first <tt>dselect</tt>
  menu represents the order in which a user would normally choose
  <tt>dselect</tt> to install packages.  However, a user can pick any of the
  main menu choices as often as needed (including not at all, depending on
  what one wants to do).
  <itemize>
    <item>Begin by choosing an &dquot;Access Method&dquot;.  This is the
    method by which the user plans on accessing Debian packages; e.g., some
    users have Debian packages available on CD-ROM, while others plan to fetch
    them using anonymous ftp. The selected &dquot;Access Method&dquot; is
    stored after
    <tt>dselect</tt> exits, so if it does not change, then this
    option need not be invoked again.

    <item>Then &dquot;Update&dquot; the list of available packages.  To do this,
    <tt>dselect</tt> reads the file &dquot;Packages.gz&dquot; which should be
    included in the top level of the directory where the Debian packages to be
    installed are stored.  (But if it is not there, <tt>dselect</tt> will offer
    to make it for you.)

    <item><tt>Select</tt> specific packages for installation on his system.
    <P>
    After choosing this menu item, the user is first presented with a full
    screen of help; he can exit it (and any help screen) by pressing the
    SPACEBAR.  Better (for first time users) is to read <em>all</em>
    of the help screen, but repeatedly pressing the '.' key to fetch one
    page of help after another.  Once the user exits the Help screen, he sees
    the split-screen menu for choosing packages to install (or remove).
    The top screen is a relatively narrow window into the list of Debian's
<!-- XXX keep numbers up-to-date -->
    2200 packages; the bottom screen is a window into &dquot;info&dquot;
    about the package or group of packages which are highlighted in the top.
    <P>
    First-time users are often confused by these aspects of the <tt>Select</tt>
    screen:
    <itemize>
      <item>&dquot;Deselecting&dquot; a packages:
      One can specify which packages should be removed (previously
      called &dquot;deselecting&dquot; an item) by highlighting a package
      name or the label for a group of packages (e.g., &dquot;All&dquot;)
      and then pressing either:
         <itemize>
         <item>the '-' key.  This removes most of the files associated
         	with the package, but preserves the files listed as
         	<ref id="conffile" name="configuration files">
		and other configuration information.
         <item>the '_' key.  This removes <em>every</em> file
         that is part of the package.
         </itemize>
      Note that if you &dquot;deselect&dquot; &dquot;All Packages&dquot; your
      system will be reduced to the initial installed base packages.  This is
      probably what you wanted.

      <item>Putting a package &dquot;on hold&dquot; (by pressing '='):
      This effectively tells <tt>dselect</tt> not to upgrade a package even if the
      version currently installed on your system is not as recent as the version
      that is available in the Debian repository you are using (this was
      specified when you set the <tt>Access Method</tt>).  (The version that is
      available in the repository is given in the file <tt>Packages.gz</tt> that is
      read when the &dquot;Update&dquot; menu choice is activated.)
      <P>
      Putting a package on &dquot;unhold&dquot; (by pressing ':'):  This
      is the default, and means that the packages will be upgraded if a newer
      version is available.

      <item>The order in which the packages are presented:  The default order is
      to present packages by Priority; within each priority, packages are
      presented in order of the directory (a.k.a. section) of the archive in
      which they are stored.  Given this sort order, some packages in
      section A (say) may be presented first, followed by some packages in
      section B, followed by more packages (of lower priority) in section A.
      Users can select a different presentation order by using the 'o' key
      to cycle between various options for sorting the packages.

      <item>Meanings of the labels at the top of the screen:
      The labels at the top can be expanded by using the 'v' (verbose) key.
      This action pushes much of the text that formerly fit onto the display
      off to the right.  To see it, press the right arrow; to scroll back to the
      left, press the left arrow.

      <item>What to do with a package conflict/dependency screen:
      If a user selects (for installation or removal) a package, e.g.,
      <tt>foo.deb</tt> that depends on or recommends another package, e.g.,
      <tt>blurf.deb</tt>, then <tt>dselect</tt> will place the user in
      a sub-screen of the main selection screen.
      This process begins by presenting the user with a full-screen Help
      file, which can be escaped by pressing SPACEBAR.  Thereafter, the
      user can choose among the related packages, accepting the suggested
      actions (to install or not), or rejecting them.  To do the latter,
      press SHIFT-D; to return to the former, press SHIFT-U.  In any case,
      the user can save his selections and return to the main selection screen
      by pressing SHIFT-Q.
      </itemize>
    <item>Users returning to the main menu can then select the
    &dquot;Install&dquot; menu item to unpack and configure
    the selected packages.  Alternatively, users wishing to remove files
    can choose the &dquot;Remove&dquot; menu item.  At any point, users can
    choose &dquot;Quit&dquot; to exit dselect; users'
    selections are preserved by <tt>dselect</tt>.
  </itemize>

<sect2>dpkg<label id="dpkg">
<P>
This is the main package management program. <tt>dpkg</tt>
can be invoked with many options.  Some common uses are:
  <itemize>
    <item>Find out all the options:  <tt>dpkg --help</tt>.
    <item>Print out the control file (and other information) for a specified
    package: <tt>dpkg --info foo_VVV-RRR.deb</tt>

    <item>Install a package (including unpacking and configuring) onto the
    file system of the hard disk: <tt>dpkg --install foo_VVV-RRR.deb</tt>.

    <item>Unpack (but do not configure) a Debian archive into the file system of
    the hard disk: <tt>dpkg --unpack foo_VVV-RRR.deb</tt>.  Note that this
    operation does <em>not</em> necessarily leave the package in a usable
    state; some files may need further customization to run properly.
    This command removes any already-installed version of the program and
    runs the <ref id="PrePost" name="preinst">
    script associated with the package.

    <item>Configure a package that already has been unpacked:
    <tt>dpkg --configure foo</tt>.  Among other things, this action
    runs the <ref id="PrePost" name="postinst"> script associated with
    the package.
    It also updates the files listed in the <tt>conffiles</tt> for this package.
    Notice that the 'configure' operation takes as its argument a
    package name (e.g., foo), <em>not</em> the name of a Debian archive file
    (e.g., foo_VVV-RRR.deb).

    <item>Extract a single file named &dquot;blurf&dquot; (or a group of files
    named &dquot;blurf*&dquot; from a Debian archive:
    <tt>dpkg --fsys-tarfile foo_VVV-RRR.deb | tar -xf - blurf*</tt>

    <item>Remove a package (but not its configuration files):
    <tt>dpkg --remove foo</tt>.

    <item>Remove a package (including its configuration files):
    <tt>dpkg --purge foo</tt>.

    <item>List the installation status of packages containing the string
	&dquot;foo*&dquot;:
    <tt>dpkg --list 'foo*'</tt>.
  </itemize>

<P>
<sect2>dpkg-deb<label id="dpkg-deb">
<P>
This program manipulates Debian archive(<tt>.deb</tt>) files.
Some common uses are:
  <itemize>
  <item>Find out all the options:  <tt>dpkg-deb --help</tt>.
  <item>Determine what files are contained in a Debian
  archive file:  <tt>dpkg-deb --contents foo_VVV-RRR.deb</tt>)
  <item>Extract the files contained in a named Debian archive into a
  user specified directory:  <tt>dpkg-deb --extract foo_VVV-RRR.deb tmp</tt>
  extracts each of the files in <tt>foo_VVV-RRR.deb</tt> into the
  directory <tt>tmp/</tt>.  This is convenient for examining the contents
  of a package in a localized directory, without installing the package
  into the root file system.
  </itemize>
More information is given in the manual page <tt>dpkg-deb</tt>(1).


<P>
<sect2>dpkg-split<label id="dpkgsplt">
<P>
This program splits large
package into smaller files (e.g., for writing onto a set of floppy disks),
and can also be used to merge a set of split files back into a single file.
It can only be used on a Debian system, since it calls the program
<tt>dpkg-deb</tt> to parse the debian package file into its component records.
For example, to split a big .deb file into N parts,
  <itemize>
  <item>Execute the command <tt>dpkg-split --split foo.deb</tt>.
  This will produce N files each of approximately 460 KBytes long in the
  current directory.
  <item>Copy those N files to floppy disks.
  <item>Copy the contents of the floppy disks onto the hard disk of your choice
  on the other machine.
  <item>Join those part-files together using <tt>dpkg-split --join "foo*"</tt>.
  </itemize>

<sect1>Debian claims to be able to update a running program; how is this accomplished?
<P>
Debian GNU/Linux provides a program called the
<tt>start-stop-daemon</tt> which is used by installation scripts
to start daemons at boot time or to stop daemons when the kernel runlevel
is changed (e.g., from multi-user to single-user or to halt).
The <tt>start-stop-daemon</tt> command is also used when a new package
containing a daemon is installed, to stop running daemons, and restart
them as necessary, e.g., when a package is being installed with an
updated configuration script.

<sect1>How can I tell what packages are already installed on a Debian system?
<P>
To learn the status of all the packages installed on a Debian system,
execute the command <tt>dpkg --list</tt>.  This prints out a one-line
summary for each package, giving a 2-letter status symbol, the package
name, the version which is <em>installed</em>, and a very brief description.
<P>
To learn the status of packages whose names match the string any pattern
beginning with &dquot;foo&dquot; by executing the command
<tt>dpkg --list 'foo*'</tt>
<P>
To get a more verbose report for a particular package, execute the
command:  <tt>dpkg --status foo</tt>.


<sect1>How can I find out what package produced a particular file?<label id="ContentsFile">
<P>
To identify the package that produced the file named <tt>foo</tt> execute
either:

<itemize>
<item><tt>dpkg --search filename</tt>.
<P>
This searches for <tt>filename</tt> in installed packages.
(This is (currently) equivalent to
searching all of the files having the file extension of <tt>.list</tt>
in the directory <tt>/var/lib/dpkg/info/</tt>.)

<item><tt>grep foo Contents</tt>, or <tt>zgrep foo Contents.gz</tt>.
<P>
This searches for files which contain the substring <tt>foo</tt>
in their full path names.  The files <tt>Contents</tt> and <tt>Contents.gz</tt>
reside in the major package directories (stable, non-free, contrib, development)
at a Debian FTP site.  A <tt>Contents</tt> file refers only to the packages
in the subdirectory tree where it resides.  Therefore, a user
might have to search more than one <tt>Contents</tt> files to
find the package containing the file <tt>foo</tt>.
<P>
This method has the advantage over <tt>dpkg --search</tt> in that it will
find files in packages that are not currently installed on your
system.

</itemize>
