#use wml::debian::template title="CVS を使用した Debian パッケージ管理"
#use wml::debian::translation-check translation="1.8"

<p>この短い文書は、パッケージの CVS
管理への変換において簡単な手助けを与えることだけを目的としています。
おそらく、あまり CVS
やバージョン管理に詳しくない人以外には興味深いものではないでしょう。
また、<code>/usr/share/doc/cvs-buildpackage</code> 以下に
<code>cvs-pkginit</code> というスクリプトがあり (これにはスクリプトと
man ページが両方入っています)、この HOWTO 文書の概要を出力します。</p>

<p>例えば、パッケージ foo、バージョン bar1、Debian 改訂 3
を変換するのに</p>

<pre>
% cvs-pkginit foo bar1 3
</pre>

<p>を実行して概要をつかんでください。</p>

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>注: 以下の説明では、山形括弧 &lt;&gt; の中はその都度変更、
それ以外についてはそのままで入力します。例えば、上流のバージョンが
2.1.82 のパッケージであれば &lt;バージョン&gt; は 2.1.82 を、
upstream_version_&lt;バージョン | tr  . _&gt; は upstream_version_2_1_82.
の意味になります。</p>

<ol>
<li>CVS の設定

<pre>
   $ CVSROOT=/where/your/repository/will/be
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>これで、Debian パッケージとそれ以外が今後リポジトリ中で分離されることになります。
   他の目的で CVS が必要になることはないと思っても、
   後で後悔するよりも、ここでリポジトリを作って分類しておくのが得策です
   (後からリポジトリに移すのは手間が増えることになります)。</p>

   <p>もし複数の人が、CVS を使うのであればその人たちが 、CVS
   を使って実際にリポジトリを変更できることを確認しなければなりません。
   リポジトリの一部へのアクセスを許可するグループ (または一組のグループ)
   を選択して権限をセットしてください:</p>

<pre>
   \# chgrp &lt;アーカイブ&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>これで、アーカイブグループのメンバーがリポジトリの
   設定を許可されていることを確かめます。次は正しいグループで
   リポジトリの一部を変更できることを確認する必要があります。</p>

<pre>
   \# mkdir $CVSROOT/debian/&lt;パッケージ1&gt;
   \# chgrp &lt;グループ1&gt; $CVSROOT/debian/&lt;パッケージ1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;パッケージ1&gt;
   \# mkdir $CVSROOT/debian/&lt;パッケージ2&gt;
   \# chgrp &lt;グループ2&gt; $CVSROOT/debian/&lt;パッケージ2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;パッケージ2&gt;
</pre>

   <p>一般ユーザで <kbd>"-d /where/your/repository/will/be"</kbd>
   を指定するかプロファイルに書き込んで、CVS
   リポジトリを公開してください。</p>

<pre>
   $ CVSROOT=/where/your/repository/will/be
   $ export CVSROOT
</pre>
</li>

<li>モジュールの使用

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>以下において、&lt;パッケージ&gt; は debian/changelog
   ファイル中と同様にパッケージ名にしてください。</p>

   <p>以下の行を追加してください。先頭行は必須です。
   二行目は複製でもかまいません。一目瞭然なものがいいでしょう:</p>

<pre>
   modules   CVSROOT modules
   &lt;パッケージ&gt; debian/&lt;パッケージ&gt;
</pre>

<pre>
   \# cvs commit -m '一つ目のモジュールを定義'
</pre>
</li>

<li>CVS を使う準備

   <p>以下のコマンドでソースツリーを加えます (すでに debian 化が済んで
   orig.tar.gz ファイルがあるものと仮定しています)。
   上流ソースが -ko オプション付き (バイナリファイルに注意してください)
   でインポートされますがここでは手元の変更は入っていないことに注意してください。
   CVS タグ名の決定にはエポックは無視されることに注意してください
   (これは一般に dpkg が判断するパッケージの順序を変更するのに使用され、
   通常 CVS タグとして適切ではありません)。</p>

   <p>CVS に入れようとしている debian
   化した開発ソースツリーの場所へ移動してください
   (これは通常 CVSROOT 以下にありません)。</p>

   <p>繰り返します: 以下で、&lt;パッケージ&gt; は debian/changelog
   ファイル中と同様にパッケージ名にしてください。</p>

<pre>
   $ cd /where/your/source/tree/resides/
   $ tar zvfx &lt;パッケージ&gt;_&lt;バージョン&gt;.orig.tar.gz
   $ cd &lt;パッケージ&gt;_&lt;バージョン&gt;.orig
   $ cvs import -ko -m 'そのままのソース' debian/&lt;パッケージ&gt; \
       source-dist upstream_version_&lt;バージョン|tr . _&gt;
</pre>

   <p>ブランチタグの source-dist は好きなように変更してください。
   (cvs-buildpackage メンテナは常に上流のタグを使います
   (余計なことですが ;-)))。</p>

   <p>CVS を root で設定し、グループに書き込み権限を与えていない場合、
    root で $CVSROOT/debian/&lt;パッケージ&gt; を作成し、
    リポジトリの所有ユーザかグループを特定のグループかユーザに
    変更しなければなりません。CVS インポートすると
    debian/&lt;パッケージ&gt;
    ディレクトリを作成できないという警告が表示されますが、
    これは大丈夫です。

   <p>次の段階はツリー全体をチェックアウトし、変更をすべて組み込むことです。

<pre>
   $ cd /where/your/source/tree/will/reside
   $ cvs checkout &lt;パッケージ&gt;
</pre>

   <p>これまで CVS を使うことなく debian 化したバージョンを作成した場合、
   以下のコマンドを実行して変化を組み込むこともできます。
   それから、そのリリースにタグを付けておけば、
   後でそれをチェックアウトすることができます。</p>

<pre>
   $ cd /where/your/source/tree/resides/&lt;パッケージ&gt;-&lt;バージョン&gt;
   $ diff -qrBbw . /where/your/source/tree/will/reside/&lt;パッケージ&gt;/ | grep -v CVS
   $ FILES_CHANGED_LOCALLY="&lt;上の出力&gt;"
   $ tar cf - $FILES_CHANGED_LOCALLY | \
       tar -C /where/your/source/tree/will/reside/&lt;パッケージ&gt; -xvpf -
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
</pre>

   <p>debian/rules
   ファイルを実行可能にしてエクスポートしたときに実行可能になるように、
   また、エクスポートしたソースで dpkg-buildpackage
   を実行して問題がないか確認してください。
   一般に、ファイルが<b>すべて</b>正しい権限になっているか、CVS
   リポジトリに追加する前に確認してください。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
   $ cvs add debian &lt;追加した他のファイルについても同様&gt;
</pre>

   <p>また、リポジトリに入れるべきファイル、特に debian
   サブディレクトリ中の全ファイルを手作業で追加しなければならないことに
   注意してください。さらに、cvs add コマンドは再帰的には<i>働かない</i>、
   つまりサブディレクトリについてもすべて手作業で追加しなければならない
   ことに注意してください。(cd debian; cvs add *)</p>

   <p>良いことに cvs update
   の実行でディレクトリ中の全ファイルの状態が示されます。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
   $ cvs update
</pre>

   <p>出力はこのようになります:</p>
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? example1
</pre>
   <p>M は修正されていること (格納しなければならない)、
    A は追加されていること (格納しなければならない)、
    ? は CVS がそのファイルについて情報を持たないこと
    (多分追加する必要があるのでしょう)、をそれぞれ示します。
    足りないものはない、ファイルの権限はすべて想定通り、
    だと判断できたら格納の手順に入ります。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
   $ cvs commit -m 'Made all debian changes'
   $ cvs tag debian_version_&lt;バージョン|tr . _&gt;-&lt;debian-revision|tr . _&gt; .
</pre>

   <p>新しいソースツリーがあるディレクトリはバージョン番号を含みません。
   これは後で参照する時には全く問題にはなりません。</p>

   <p>代わりに、スクラッチから debian ディレクトリを作成する場合
   (簡単になるかもしれません。手作業が増えますが。):</p>

<pre>
   $ mkdir debian
</pre>

   <p>必要な debian ファイルをすべて作成し、ソース制御に追加してください。</p>

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>次のチェックインでファイルはすべて含まれます。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
   $ cvs commit -m &lt;メッセージ&gt;
</pre>
</li>

<li>リリースの準備

   <p>パッケージをビルドするのに Debian コマンドを実行する前に、
   CVS サブディレクトリをすべて除いて、
   モジュールをチェックアウトしなければなりません。これは
   `<kbd>export</kbd>' コマンドで実行できますが、
   まずすべての変更を格納してリリース番号をつける必要があります。</p>
<pre>
   $ cvs commit -m &lt;メッセージ&gt;
   $ cvs tag debian_version_&lt;バージョン|tr . _&gt;-&lt;debian-revision|tr . _&gt;
</pre>
</li>

<li>リリースの作成

   <p>cvs-buildpackage 機構の使用 (推奨)
   または手作業でエクスポートを行います。まず、
   cvs-buildpackage をドライランで(タグが合っていることを確認して)
   次のように実行してテストします
   (/etc/cvsdeb.conf を設定していることが前提です):</p>

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>そして実際に実行します。root になれるのであれば、sudo なしで実行できます。</p>

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>手作業ですべて行う場合:</p>

   <p>パッケージのチェックアウト</p>

<pre>
   $ cvs export -d &lt;パッケージ&gt;-&lt;バージョン&gt; \
         -r debian_version_&lt;バージョン|tr . _&gt;-&lt;debian-revision|tr . _&gt; \
             &lt;パッケージ&gt;
</pre>

   <p>これで普通のリリースのエクスポート機構を続けることができます。</p>

<hr>

   <p>終わりです!
   おめでとう!
   ソースツリー上でできる作業がいくらかあります:</p>
<hr>

<li>ファイルの削除、リネーム

   <p>ファイルを移動する普通の方法は OLD を NEW にコピーし、
   それから普通の CVS コマンドでリポジトリから OLD を削除、そして
   NEW を追加します (OLD 及び NEW はともに相対パス、例えば
   `<kbd>foo/bar.c</kbd>' を含めることができます)。

<pre>
   $ mv OLD NEW
   $ cvs remove OLD
   $ cvs add NEW
   $ cvs commit -m "OLD から NEW にリネーム" OLD NEW
</pre>

   <p>これは最も簡単なファイルの移動方法で、間違えにくく、
   それまでの履歴は保存されます。
   ファイルの履歴にアクセスする場合、
   履歴のどの部分にアクセスするのかにより、
   新旧どちらかの名前を指定しなければならないことに注意してください。
   例えば `<kbd>cvs log OLD</kbd>' ではリネームまでのログを取得します。</p>

</li>

<li>インポートコマンドによるモジュールの更新

   <p>新しいリリースのソースが入手できたら、まず第一に、
   リポジトリを設定したときと同様に `import'
   コマンドによりリポジトリにインポートします。
   リリースタグの名前とメッセージが異なるだけです。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/&lt;new source directory&gt;
   $ cvs import -m 'Import new release' debian/&lt;パッケージ&gt; source-dist \
         upstream_version_&lt;バージョン|tr . _&gt;
</pre>

   <p>ここで、新しい改訂に加えた変更を組み込まなければなりません。
   最もよい方法は作業コピーを移動し (旧版の上流ソースに基づいて)、
   パッケージの新しいコピーをチェックアウトして上流ソースでの変更を
   <b>組み込む</b>方法です。方法を示します:</p>

<pre>
   $ cd /where/your/source/tree/will/reside
   $ mv &lt;パッケージ&gt; &lt;パッケージ&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;パッケージ&gt;
   $ cd /where/your/source/tree/will/reside/&lt;パッケージ&gt;
</pre>

   <p>上のコマンドは、&lt;パッケージ&gt; の最新版をチェックアウトし、
   ベンダブランチ `source-dist'
   に対して前日以降に加えられた変更を作業コピーにマージします。
   マージの際に衝突があった場合は普通の方法で対処します。
   それから、変更したファイルを格納します。</p>

   <p>上で提案している日付の使用は、同じ日に同一製品の複数のリリースを
   インポートすることはないものと仮定しています。
   そうでない場合、次のような方法が常に使えます:</p>

<pre>
   $ cvs checkout -jupstream_version_&lt;oldversion|tr . _&gt; \
                  -jupstream_version_&lt;newversion|tr . _&gt; &lt;パッケージ&gt;
</pre>

   <p>この場合、上記の二つのコマンドは等価です。</p>

   <p>ローカルで変更されていないファイルの新しく作成された改訂は
   head リビジョンになります。</p>

   <p>なので、ファイルがすべて正しく更新されているか確認してください。
   特に、debian/changelog ファイルを変更するのを忘れないでください!</p>

   <p>問題なければ、作業ディレクトリの古いバージョンは削除してもかまいません。
   削除するディレクトリを絶対に間違えないようにしてください!</p>

<pre>
   $ rm -rf ../&lt;パッケージ&gt;.old
</pre>

   <p>これで、リリースの準備が整いました。</p>
</li>

<li>ソースツリーを削除してディスク容量を空ける

   <p>作業用のソースツリーの削除にあたって、<kbd>rm -rf</kbd> ではなく
   CVS コマンドを使って手元で変更して格納していないものがないか、
   確認することを勧めます。</p>

<pre>
   $ cd /where/your/source/tree/will/reside/
   $ cvs release -d &lt;パッケージ&gt;
</pre>
</li>

<li>用語
<pre>
   タグ         特定のリビジョンに付ける象徴的な名前
   リポジトリ   ソースファイルのアーカイブ
</pre>
</li>

<li>付録:

   <p>A: CVS タグの慣例</p>

<pre>
 |=========================================================================================|
 |上流バージョン      | &lt;バージョン&gt;                                                 |
 |Debian 改訂         | &lt;改訂&gt;                                                       |
 |Orig tar ファイル名 | package_&lt;バージョン&gt;.orig.tar.gz                             |
 |Debian パッケージ名 | package_&lt;バージョン&gt;-&lt;改訂&gt;_&lt;アーキテクチャ&gt;.deb |
 |CVS ベンダタグ      | upstream_version_&lt;バージョン  | tr . _&gt;                      |
 |CVS 現行タグ        | debian_version_&lt;改訂 | tr . _&gt;                               |
 |=========================================================================================|
</pre>

   <p>例:</p>
<pre>
 |======================================================================|
 |                    | 上流ソース             | Debian 独自パッケージ  |
 |======================================================================|
 |上流バージョン      | 2.76                   | 3.38                   |
 |Debian 改訂         | 1.2                    |                        |
 |Orig tar ファイル名 | make_2.76.orig.tar.gz  |                        |
 |Debian パッケージ名 | make_2.76-1.2_i386.deb | kpkg_3.38_i386.deb     |
 |CVS ベンダタグ      | upstream_version_2_76  | upstream_version_3_38  |
 |CVS 現行タグ        | debian_version_2_76-1_2| debian_version_3_38    |
 |======================================================================|
</pre>

   <p>CVS タグ名の決定にあたって、エポック数は無視されることに注意してください
   (これは一般に dpkg
   が判断するパッケージの順序を変更するのに使用され、通常 CVS
   タグとして適切ではありません)。</p>

</li>
</ol>
