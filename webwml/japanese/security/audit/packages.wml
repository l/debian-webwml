#use wml::debian::template title="監査パッケージ優先順位付けガイドライン"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.14"

<p>Debian ディストリビューションの監査を実行する際に最初に生じる問題の一つは、
監査対象のパッケージを決定することです。</p>

<p>理想的にはすべてのパッケージを監査することになるでしょうが、
アーカイブ全体には膨大な数のパッケージがあるので、
作業に優先順位をつける簡単な方法がなくてはなりません。</p>

<p>単純なガイドラインとしては、最初に監査する価値があるのは以下のパッケージです。</p>

<ol>
<li>setuid や setgid をされてインストールされているあらゆるバイナリ。</li>

<li>ネットワーク越しにサービスを提供するあらゆるもの。</li>

<li>リモートからアクセス可能なあらゆる CGI/PHP スクリプト。</li>

<li>root 権限で実行される cronjob やその他の自動化スクリプトを含んでいるあらゆるもの。</li>

</ol>

<p>一般に、人気があるパッケージは優先順位を上げてください。
これらのパッケージに何らかの問題があれば、より多くのユーザに影響があるからです。</p>

<p><a href="http://popcon.debian.org/">Debian 人気コンテスト</a>では、
調査に参加しているボランティアにどのパッケージが最も人気があるのかを明らかにするための調査を行い続けています。</p>

<p>特に、<a href="http://popcon.debian.org/by_vote">投票による (by vote)
パッケージの順序付け</a>を見てください。この<q>投票による</q>リストでは、
調査に参加しているユーザがどの程度の頻度でパッケージを使用しているかによって、
パッケージを順位付けています。</p>

<p>パッケージが (特に上述の基準のいずれかを満たすなど) セキュリティ上重要であり、
(このような調査で) 人気もある場合は、<em>間違いなく</em>監査の対象です。</p>


<h2><tt>setuid</tt> や <tt>setgid</tt> をされたバイナリ</h2>

<p><tt>setuid</tt> や <tt>setgid</tt>
をされたバイナリは、伝統的にセキュリティ監査の対象となっています。
これらのパーミッションのいずれかを持つ脆弱なバイナリを突く侵害行為で、ローカルユーザは、
本来持っていない権限を利用する手段を得ることが可能だからです。</p>

<p>検索の補助となる手段として、現行安定版 (stable) リリースに含まれる setuid や setgid
をされたバイナリの完全な一覧がこちらに存在します。</p>

<ul>

<li><a href="http://lintian.debian.org/tags/setuid-binary.html">Debian の
Setuid されたバイナリの Lintian Report</a></li>

<li><a href="http://lintian.debian.org/tags/setgid-binary.html">Debian の
Setgid されたバイナリの Lintian Report</a></li>

</ul>

# TODO (jfs): the above does not provide the same information as was available at
# http://shellcode.org/Setuid/
# ask Steve Kemp to move this feature to a Debian-administered machine?
# (or to the Alioth project)
#

<p>setuid や setgid
をされたバイナリの中からどれを選択するかに関しては、
そのようなバイナリの中でもセキュリティ問題への繋がりやすさに差がある、
ということを覚えておくことが重要です。例えば、setuid(root)
をされたバイナリは、setgid(games) や setuid(bugs)
をされたバイナリよりも先に監査すべきです。</p>


<h2>ネットワークサーバ</h2>

<p>セキュリティ監査の実施ということになると、明らかに思い浮かびやすいもう 1
つの対象はネットワークに繋がったサーバです。
ネットワークに繋がったサーバに悪用可能な問題があると、
攻撃者がリモートからマシンを侵害できるようになりうるからです。</p>

<p>通常、
リモートからのセキュリティ侵害はローカルからのセキュリティ侵害よりもはるかに重大です。</p>

<h2>オンラインのスクリプト</h2>

<p>オンラインのスクリプト、特に CGI スクリプトは、実はネットワークサーバと同等です。
ウェブサーバ自体は安全かもしれませんが、その上で動作するスクリプトも同程度に重要なのです。</p>

<p>ネットワーク越しに利用可能なスクリプトのバグは、
接続を待ち受けているサーバのバグと同程度に重大です。
どちらのバグでもマシンへのセキュリティ侵害が可能になってしまうからです。</p>

<h2>cronjob やシステムのサービス</h2>

<p>あちこちに多数あるわけではありませんが、
パッケージ内に含まれている自動化スクリプトや cronjob などには目を通す価値があります。</p>

<p>ログファイルの掃除などに使用される多くのサポートツールが、デフォルトでは root
権限で実行されます。</p>

<p>シンボリックリンク攻撃の悪用が成功してしまうと、
ローカルからの侵害を招く可能性があります。</p>
