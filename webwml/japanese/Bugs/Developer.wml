#use wml::debian::template title="Debian BTS &mdash; 開発者情報" NOHEADER=yes NOCOPYRIGHT=true
#include "$(ENGLISHDIR)/Bugs/pkgreport-opts.inc"
#use wml::debian::translation-check translation="1.83"

<h1>パッケージメンテナとバグ対応者向けのバグ処理システムに関する情報</h1>

<p>まず初めに、バグ報告はユーザから通常の電子メールとして
<code>submit@bugs.debian.org</code> に提出されます。
このバグ報告は通し番号が与えられ、
ユーザには受領通知が送られ、<code>debian-bugs-dist</code>
メーリングリストに転送されます。報告者が <code>Package</code>
行にメンテナのいるパッケージ名を指定した場合は、
該当するメンテナにもその写しが送られます。</p>

<p><code>Subject</code> 行には <code>Bug#</code><var>nnn</var><code>:</code>
が追加されます。<code>Reply-To</code> には、そのバグ報告の提出者と
<var>nnn</var><code>@bugs.debian.org</code> が設定されます。</p>

<ul class="toc">
  <li><a href="#closing">バグ報告のクローズ (解決)</a></li>
  <li><a href="#followup">フォローメッセージ</a></li>
  <li><a href="#severities">Severity (重要度) レベル</a></li>
  <li><a href="#tags">バグ報告のタグ</a></li>
  <li><a href="#forward">バグ報告を転送したことの記録</a></li>
  <li><a href="#owner">バグの所有者を変更する</a></li>
  <li><a href="#maintincorrect">パッケージメンテナが間違っている場合</a></li>
  <li><a href="#requestserv">バグを再オープン (reopen)、再指定 (reassign)、操作する</a></li>
  <li><a href="#subscribe">バグ報告を購読する</a></li>
  <li><a href="#subjectscan">廃止されつつあるサブジェクト検査機能</a></li>
  <li><a href="#x-debian-pr"><code>X-Debian-PR: quiet</code> 機能は廃止</a></li>
</ul>


<h2><a name="closing">バグ報告のクローズ (解決)</a></h2>

<p>Debian のバグ報告はその問題が解決したときクローズ (解決)
しなければなりません。パッケージ中の問題はそのバグの修正を含むパッケージが
Debian アーカイブに入ったときのみ解決したとみなされます。</p>

<p>ふつう、バグ報告をクローズすべきなのはそのバグの報告者と
そのバグが報告されたパッケージのメンテナだけです。この規則には例外があります。
たとえば、不明なパッケージや一般的な擬似パッケージに対するバグなどです。
よく分からないなら、バグ報告をクローズするのではなく、まず
debian-devel メーリングリストで助言を求めましょう。</p>

<p>バグ報告は <var>nnn</var><code>-done@bugs.debian.org</code>
に電子メールを送ることによってクローズしなければなりません。
メッセージの本文はそのバグがどのように修正されたのかの説明を含む必要があります。</p>

<p>バグ追跡システムから受けとった電子メールがあるなら、
そのバグ報告をクローズするにはメールリーダプログラムで返信を作り、<code>To</code>
欄を編集して、たとえば <var>nnn</var><code>@bugs.debian.org</code>
のかわりに <var>nnn</var><code>-done@bugs.debian.org</code>
を使うだけでいいです (<var>nnn</var><code>-close</code>
は、<var>nnn</var><code>-done</code> のエイリアスとして用意されています)。</p>

<p>可能なら、
バグ追跡システムがどのリリースのパッケージにその修正が含まれるのか分かるように、
バグを閉じる際のメッセージの<a
href="Reporting#pseudoheader">疑似ヘッダ</a>内に <code>Version</code>
行を書いておいてください。</p>

<p>バグ報告をクローズしようとしている人、それを提出した人および
<code>debian-bugs-closed</code>
メーリングリストにそのバグ報告のステータスが変更されたことが通知されます。
報告の提出者とこのメーリングリストには <var>nnn</var><code>-done</code>
へ送られたメッセージの内容も送られます。</p>


<h2><a name="followup">フォローメッセージ</a></h2>

<p>バグ追跡システムはバグ報告をフォワードする時に、<code>Reply-To</code>
ヘッダに報告者のメールアドレスとそのバグのメールアドレス
(<var>nnn</var><code>@bugs.debian.org</code>)
を含めます。これらは別個のメールアドレスであることに注意してください。</p>

<p>クローズされていないバグ報告に開発者が返信したい時は、単にそのバグ報告に返信します。
<code>Reply-To</code> ヘッダをそのまま使うわけです。
これはバグ報告をクローズ<strong>しません</strong>。</p>

<p>バグ追跡システムは、<var>nnn</var><code>@bugs.debian.org</code>
として受け取ったメッセージをパッケージメンテナに転送し、バグ報告の追加情報として記録して
<code>debian-bugs-dist</code> に転送します。</p>

<p><var>nnn</var><code>-submitter@bugs.debian.org</code>
にメッセージを送ると、そのバグの報告者に明示的にメールを送り、
コピーをバグ追跡システムに置くことができます。
この場合、パッケージメンテナにはメッセージが送られません。</p>

<p><code>debian-bugs-dist</code>
には適当でないフォローメッセージを送りたい場合、<var>nnn</var><code>-quiet@bugs.debian.org</code>
や <var>nnn</var><code>-maintonly@bugs.debian.org</code>
を送信に使うことができます。<var>nnn</var><code>-quiet@bugs.debian.org</code>
へのメールは、バグ追跡システムに記録されますが特定の人やメーリングリストには配送されません。
<var>nnn</var><code>-maintonly@bugs.debian.org</code>
へのメールは、バグ追跡システムに記録されてパッケージメンテナだけに配送されます。</p>

<p>もし確固とした受取人変更の意図がないのであれば、メーラーの
<q>reply to all recipients (すべての受取人に返事をする)</q>や
<q>followup (フォローする)</q>
の機能を<em>使ってはいけません</em>。特にフォローメッセージを
<code>submit@bugs.debian.org</code> に送らないように注意してください。</p>

<p>受信通知メッセージを抑制するためのヘッダに関する情報や、
バグ追跡システムを使ってカーボンコピーを送る方法については、<a
href="Reporting">バグ報告の説明</a>を見てください。</p>


<h2><a name="severities">Severity (重要度) レベル</a></h2>

<p>バグシステムは、それぞれのバグ報告について severity (重要度)
レベルを記録します。デフォルトでは <code>normal (通常)</code>
に設定されますが、バグ報告の際に疑似ヘッダに <code>Severity</code>
行を入れる (<a href="Reporting#pseudoheader">Debian にバグを報告する方法</a>を参照)
か、<a href="#requestserv">コントロールリクエストサーバ</a>に
<code>severity</code> コマンドを送ることで変更できます。
複数のタグを指定する場合は、コンマ、スペース、またはその両方を使って区切ってください。
</p>


<p>severity レベルには以下のものがあります。</p>

<dl>
<dt><code>critical (致命的)</code></dt>
<dd>システム上の関係のないソフトウェア (またはシステム全体)
を破壊する、重大なデータの欠落を引き起こす、または、
そのパッケージをインストールしたシステム上でセキュリティホールが生じる場合。</dd>

<dt><code>grave (重大)</code></dt>
<dd>問題のあるパッケージが使用できない、またはほとんど使用できない。
またはデータの欠落を引き起こす、そのパッケージを使用するユーザの
アカウントにアクセスを許してしまうセキュリティホールが生じる場合。</dd>

<dt><code>serious (深刻)</code></dt>
<dd><a href="$(DOC)/debian-policy/">Debian
ポリシーに対して見すごせない違反</a>がある (大まかに言うと、<q>must</q>や
<q>required</q>の要件に違反している)、またはパッケージメンテナあるいはリリースマネージャの意見として
そのパッケージがリリースに適していないと判断された場合。</dd>

<dt><code>important (重要)</code></dt>
<dd>バグがパッケージの有用性を大きく損なっている場合
    (ただし、誰にとっても完全に使用できなくなっている場合を除く)。</dd>

<dt><code>normal (通常)</code></dt>
<dd>デフォルト値。通常のバグ。</dd>

<dt><code>minor (軽度)</code></dt>
<dd>問題がパッケージの利用に影響しない、
かつ修正はたいした事がないと思われる場合。</dd>
 
<dt><code>wishlist (要望)</code></dt>
<dd>将来的な要望、主に設計上の理由により修正が非常に困難なバグ。</dd>
</dl>

<p><em><a href="http://bugs.debian.org/release-critical/">リリースクリティカル</a></em>
とみなされる重要度があります。これはそのバグがそのパッケージを
Debian の安定版でリリースするのに影響があるという意味です。
現在、<strong>critical</strong>、<strong>grave</strong>
そして <strong>serious</strong> がこれに該当します。
これらの深刻度がもたらすいかなる問題についての完全で正式なルールは、<a
href="http://release.debian.org/testing/rc_policy.txt">Lenny
のリリースクリティカル問題</a>のリストを見てください。</p>

<h2><a name="tags">バグ報告のタグ</a></h2>

<p>それぞれのバグ報告は規定されたタグをつけることができます。
これらのタグは、パッケージのページやすべてのバグの記録を閲覧したときに、
バグ報告のリストのなかに表示されます。</p>

<p>タグは、バグの報告時に擬似ヘッダに <code>Tags</code> 行を指定すること
(<a href="Reporting#pseudoheader">バグ報告の勧め (使用説明書)</a> を参照)
や、<a href="#requestserv">コントロールリクエストサーバ</a>に対して
<code>tags</code> コマンドを用いることで設定することができます。</p>

<p>現在のバグのタグは以下のものがあります。 <bts_tags></p>

<dl>

<dt><code>patch (パッチ)</code></dt>
  <dd>バグ報告に、バグを修正するためのパッチや簡単な手順が含まれています。
  パッチがあってもバグを適切に解決できない場合や別の問題を生じる場合は、
  このタグは使うべきではありません。</dd>

<dt><code>wontfix (修正予定無)</code></dt>
  <dd>このバグは修正されないでしょう。バグ修正に任意の 2 種類の選択肢があって
  メンテナと報告者がそれぞれ異なる方法を望んでいる場合や、
  修正することによってより悪い問題が生じる場合や、その他の理由があるでしょう。</dd>

<dt><code>moreinfo (追加情報)</code></dt>
  <dd>このバグは報告者が詳細情報を提供しないかぎり特定できません。
  報告者が適当な期間 (数ヶ月) 中に詳細情報を提供しなければ、
  バグはクローズされるでしょう。これは、<q>動きません</q>というようなバグ報告のためにあります。
  何が動かないのでしょう?</dd>

<dt><code>unreproducible (再現不可能)</code></dt>
  <dd>このバグはメンテナのシステムでは再現できなかったものです。
  問題の原因調査のために、第三者の協力が必要とされています。</dd>

<dt><code>help (助けを求む)</code></dt>
  <dd>メンテナは、このバグを処理するのに助けを必要としています。</dd>

<dt><code>pending (保留)</code></dt>
  <dd>バグの解決法が発見され、まもなくアップロードが行なわれます。</dd>

<dt><code>fixed (修正済)</code></dt>
  <dd>(例えばノンメンテナ・アップロードのおかげなどで)
  このバグは修正されたかうまく動くようになりましたが、解決のために必要な事項がまだ残っています。
  かつての<q>fixed</q>という severity (重要度) はこのタグに置き換えられました。</dd>

<dt><code>security (セキュリティ)</code></dt>
  <dd>このバグはパッケージのセキュリティ問題を説明します
  (例: アクセスされてはいけないデータへのアクセスを許可する不正な許可属性がある、
  やれるべきではない方法でシステムを制御できるバッファオーバーフローがある、
  修正すべき DoS 攻撃の穴がある、等)。ほとんどのセキュリティバグは、critical
  (致命的) や grave (重大) の severity (重要度) も設定すべきです。</dd>

<dt><code>upstream (上流)</code></dt>
  <dd>このバグは、パッケージの上流の部分に影響します。</dd>

<dt><code>confirmed (確認済)</code></dt>
  <dd>メンテナはこのバグを読み、理解し、その内容に基本的に合意しましたが、
  まだ修正していません。(このタグの使用はできるだけ控えてください。
  大量の未解決バグに対処しなければならないメンテナが使うことを想定したタグです。)</dd>

<dt><code>fixed-upstream (上流で解決済)</code></dt>
  <dd>このバグは、上流メンテナによって修正されましたが、
  まだパッケージにはなっていません
  (何らかの理由で: たとえば、変更が複雑すぎてバックポートできないとか、
  あまりに些細なので無視しているとか)。</dd>

<dt><code>fixed-in-experimental (experimental で解決済)</code></dt>
  <dd>このバグは experimental
  ディストリビューションのパッケージで修正されていますが、unstable
  ディストリビューションではまだです。</dd>

<dt><code>d-i (インストーラ)</code></dt>
  <dd>このバグは、debian-installer に関するものです。
  インストーラの開発に関係するけれども、
  インストーラの直接の構成要素ではないパッケージに対するバグの場合、
  このタグを使ってください。</dd>

<dt><code>ipv6</code></dt>
  <dd>このバグは、インターネットプロトコル v6 (IPV6)
  のサポートに関係します。</dd>

<dt><code>lfs (巨大ファイルサポート)</code></dt>
  <dd>このバグは、大きなファイル (2 ギガバイトを超える)
  のサポートに関係します。</dd>

<dt><code>l10n</code></dt>
  <dd>このバグは、パッケージの地域化に関するものです。</dd>

<dt><code>potato</code></dt>
  <dd>このバグは特に Debian の potato リリースに適応されるものです。</dd>

<dt><code>woody</code></dt>
  <dd>このバグは特に woody ディストリビューションに適応されるものです。</dd>

<dt><code>sarge</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  sarge のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、sarge で修正されるまでアーカイブに入りません。</dd>

<dt><code>sarge-ignore (sarge では無視)</code></dt>
  <dd>このリリースクリティカルバグは、sarge
  のリリースの目的のために、無視されます。
  <strong>このタグは、リリースマネージャだけが使うべきものです。
  リリースマネージャからの明示的な許可がない限りは使わないでください。</strong></dd>

<dt><code>etch</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  etch のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、etch で修正されるまでアーカイブに入りません。</dd>

<dt><code>etch-ignore</code></dt>
  <dd>このリリースクリティカルバグは、etch
  のリリースの目的のために、無視されます。
  <strong>このタグは、リリースマネージャだけが使うべきものです。
  リリースマネージャからの明示的な許可がない限りは使わないでください。</strong></dd>

<dt><code>lenny</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  lenny のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、lenny で修正されるまでアーカイブに入りません。</dd>

<dt><code>lenny-ignore</code></dt>
  <dd>このリリースクリティカルバグは、lenny
  のリリースの目的のために、無視されます。
  <strong>このタグは、リリースマネージャだけが使うべきものです。
  リリースマネージャからの明示的な許可がない限りは使わないでください。</strong></dd>

<dt><code>squeeze</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  squeeze のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、squeeze で修正されるまでアーカイブに入りません。</dd>

<dt><code>squeeze-ignore</code></dt>
  <dd>このリリースクリティカルバグは、squeeze
  のリリースの目的のために、無視されます。
  <strong>このタグは、リリースマネージャだけが使うべきものです。
  リリースマネージャからの明示的な許可がない限りは使わないでください。</strong></dd>

<dt><code>wheezy</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  wheezy のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、wheezy で修正されるまでアーカイブに入りません。</dd>

<dt><code>wheezy-ignore</code></dt>
  <dd>このリリースクリティカルバグは、wheezy
  のリリースの目的のために、無視されます。
  <strong>このタグは、リリースマネージャだけが使うべきものです。
  リリースマネージャからの明示的な許可がない限りは使わないでください。</strong></dd>

<dt><code>sid</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  sid のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、sid で修正されるまでアーカイブに入りません。</dd>

<dt><code>experimental</code></dt>
  <dd>これは 2 つの効果を持つディストリビューションタグです。
  バグに対してセットすると、そのバグは (たとえほかのディストリビューションタグが
  設定されていてほかのディストリビューションにも影響する可能性があったとしても)
  experimental のみに適応されるものとなります。その他の点では通常のバグ/修正/放置のルール
  が適用されます。このバグ報告は、experimental で修正されるまでアーカイブに入りません。</dd>

</dl>

<p>最後の 8 つのディストリビューションタグの意味は最近変わりました。-ignore タグは、
パッケージをテスト版 (testing) に移行できるよう、そのバグを無視します。
リリースタグは、問題のバグが指定された一連のリリースにおいて修正されるまでは
アーカイブされるべきでないことを示します。リリースタグは、指定された一連の
リリースにおいてのみそのバグをバグとみなすべきだということを示してもいます。
[言いかえれば、何かリリースタグがセットされている場合、対応するリリースタグ
がセットされて<strong>いない</strong>リリースについては、そのバグは
<strong>ありません</strong>。何もセットされていなければ、通常の found/fixed
ルールが適用されます。]
</p>

<p>
手作業での追加や削除が必要となるので、バグの適切なバージョン管理によって
望ましい効果が得られるのであれば、リリースタグを使用しては<strong>
いけません</strong>。リリースタグが必要かどうかわからなければ、Debian BTS
管理者 (<email "owner@bugs.debian.org">) かリリースチームにアドバイスを
求めてください。
</p>

<h2><a name="forward">バグ報告を転送したことの記録</a></h2>

<p>Debian パッケージの元である上流ソースパッケージの開発者に
Debian パッケージ開発者からバグ報告を転送する際は、
バグ追跡システムに次のようにして記録しなければなりません。</p>

<p>あなたのメッセージの <code>To</code>
フィールドには原作者達のアドレスのみが書かれていることを確認すること。
そして、<code>CC</code> フィールドにはバグを報告した人と
<var>nnn</var><code>-forwarded@bugs.debian.org</code>
そして <var>nnn</var><code>@bugs.debian.org</code> を入れること。</p>

<p>原作者が返信をする際に、<code>CC</code> に
<var>nnn</var><code>-forwarded@bugs.debian.org</code> を残すように依頼すること。
バグ追跡システムはこの返信を元々のバグ報告とともに保存します。
この場合、メッセージの保存はしますが送信はしません。
通常のようにメッセージを送信するには
<var>nnn</var><code>@bugs.debian.org</code> に送ってください。</p>

<p>バグがすでに転送済であると記録されていない場合、バグ追跡システムが 
<var>nnn</var><code>-forwarded</code>
でメッセージを受け取ると、そのメッセージは <code>To</code>
フィールドにあるアドレスに転送済であることを該当するバグに記録します。</p>

<p><a href="server-control"><code>control@bugs.debian.org</code></a> 
にメッセージを送ることで、<q>forwarded to</q>情報を操作することができます。</p>


<h2><a name="owner">バグの所有者を変更する</a></h2>

<p>バグを修正する責任を持った人が、関連するパッケージのメンテナには割り当てられていない場合
(例えば該当するパッケージがチームでメンテナンスされている場合など)、
このことをバグ追跡システムに記録しておくと役に立つでしょう。
そのため、それぞれのバグは任意に所有者を持てるようになっています。</p>

<p>バグの所有者は、バグ報告時に疑似ヘッダに <code>Owner</code>
行を付けたり (<a href="Reporting#pseudoheader">バグ報告の説明</a>を参照)、
<a href="#requestserv">コントロールリクエストサーバ</a>に <code>owner</code>
や <code>noowner</code> のコマンドを使って設定できます。</p>


<h2><a name="maintincorrect">パッケージメンテナが間違っている場合</a></h2>

<p>パッケージメンテナが間違っている場合、
多くの原因は最近メンテナが交替されていて、新メンテナが
control ファイルの <code>Maintainer</code>
フィールドを更新した新しいパッケージをアップロードしていないためです。
これは、パッケージをアップロードすることにより修正されます。
これ以外に、アーカイブメンテナが
パッケージに記録されているメンテナを無視するように設定することが可能です。
これは例えば、すぐにパッケージの再構築、再アップロードの必要がないと思われる場合に利用します。
override file を変更するには
<code>override-change@debian.org</code> に連絡してください。</p>


<h2><a name="requestserv">バグを再オープン (reopen)、再指定 (reassign)、操作する</a></h2>

<p>別のパッケージにバグ報告を再指定 (reassign)
する事や、誤ってクローズしてしまったバグを再オープン (reopen)
する事、バグ報告が転送されている送付先について述べている情報を修正する事、バグ報告の severity
(重要度) やタイトルを変更する事、バグの所有者を設定する事、バグ報告のマージ
(merge)・マージ解除 (unmerge) をする事、
バグが発見された・修正されたパッケージのバージョンを記録する事ができます。
これらの操作は、<code>control@bugs.debian.org</code>
にメールを送ることにより行います。</p>

<p><a href="server-control">これらのメッセージの書式</a> は
WWW 上で利用できる別の文書や <code>bug-maint-mailcontrol.txt</code> 
ファイルに記述されています。テキストバージョンは、上記のアドレスのサーバに
<code>help</code> と書いたメールを送ることで入手することも可能です。</p>

<h2><a name="subscribe">バグ報告を購読する</a></h2>

<p>バグ追跡システムでは、バグの報告者、開発者およびそれに関心のある第三者が、
個々のバグ報告を購読できます。あるバグに注意を払い続けたい場合、<a
href="http://packages.qa.debian.org">PTS</a> を通してパッケージの購読をしなくても、
この機能を利用できます。<var>nnn</var><code>@bugs.debian.org</code>
に届いたすべてのメッセージは購読者に送られます。</p>

<p>nnn のバグ報告を購読するには、<var>nnn</var><code>-subscribe@bugs.debian.org</code>
にメールを送ります。メールの件名、本文は BTS によって無視されます。
このメールが処理されると、そのバグに関するメッセージを受け取れるようにしたい場合は
これに返信してください、という内容の確認メッセージがユーザに届きます。</p>

<p>購読を停止することも可能です。購読を止めるには
<var>nnn</var><code>-unsubscribe@bugs.debian.org</code> へメールを送ります。
この場合も、メールの件名、本文は BTS によって無視されます。
購読を止めるための確認メッセージが届きますので、それに返信する必要があります。</p>

<p>通常、購読に使用されるメールアドレスは
<code>From</code> ヘッダに書かれているものになります。別のメールアドレスで購読したいなら、
購読に使用するメールアドレスを符号化して購読メッセージの宛先に埋め込む必要があります。
<var>nnn</var><code>-subscribe-</code><var>localpart</var><code>=</code><var>example.com</var><code>@bugs.debian.org</code>
という形式になります。
この例では、バグ <var>nnn</var> の購読メッセージを <code>localpart@example.com</code>
へ送ります。<code>@</code> 記号を <code>=</code>
記号に置き換えて符号化しなければなりません。同様に、購読を止める場合も、
<var>nnn</var><code>-unsubscribe-</code><var>localpart</var><code>=</code><var>example.com</var><code>@bugs.debian.org</code>
という形式になります。
どちらのケースでも、メールの件名と本文は確認のリクエストに含めて、
そのメールアドレスに転送されます</p>

<h2><a name="subjectscan">廃止されつつあるサブジェクト検査機能</a></h2>

<p>サブジェクトが <code>Bug#</code><var>nnn</var> で始まるメッセージが
<code>submit</code> や <code>bugs</code> に到着した場合、このメッセージは
<var>nnn</var><code>@bugs.debian.org</code> に送信されたものとして扱われます。
これは、昔のアドレスから転送されたメールと互換性を残すためと、誤って
(例えば、全ての受取人へ返信をしてしまうことにより)
<code>submit</code> に送られたフォローメールを捕えるためです。</p>

<p><code>maintonly</code>、<code>done</code>、<code>quiet</code>、<code>forwarded</code>
についても同様に扱われます。これらのアドレスでは、サブジェクトタグのあるメールは、
<var>nnn-whatever</var><code>@bugs.debian.org</code> (<var>whatever</var> は <code>maintonly</code>、<code>done</code>、<code>quiet</code>、<code>forwarded</code> のうち対応するもの)
というアドレスに送信されたものとして扱われます。</p>

<p><code>forwarded</code> と <code>done</code>
に届いたタグのないメッセージ (例えばアドレスにバグ番号がないもの)
で、サブジェクトにバグ番号がついていないメッセージは
<q>junk</q>として記録され数週間保存はされますが、それ以外の処理は無効となります。</p>

<h2><a name="x-debian-pr"><code>X-Debian-PR: quiet</code> 機能は廃止</a></h2>

<p>バグ追跡システムが <code>debian-bugs</code>
で受け取ったメッセージをどこにも転送させないようにするためには、
従来は実際のメールヘッダに <code>X-Debian-PR: quiet</code> 行を入れていました。</p>

<p>現在、このヘッダ行は無視されます。代わりに、
<code>quiet</code> や <var>nnn</var><code>-quiet</code>
(もしくは、<code>maintonly</code> や <var>nnn</var><code>-maintonly</code>)
にメッセージを送ってください。</p>

<hr />

#use "otherpages.inc"

#use "$(ENGLISHDIR)/Bugs/footer.inc"
