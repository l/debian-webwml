#use wml::debian::template title="Ejemplo de auditoría automatizada: RATS"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.11" maintainer="juanma"
# $Id$

<p><a href="http://packages.debian.org/rats">RATS</a> es un analizador de
propósito general que se utiliza para detectar potenciales problemas de 
seguridad en varios lenguajes de programación.</p>

<h2>Hacer funcionar RATS</h2>
<p>Hacer funcionar RATS es tan sencillo como invocar el comando con el
directorio que se va a procesar.  Se procesarán todos los archivos
que se encuentren y que se reconozcan como archivos fuente.  RATS entiende
varios lenguajes de programación, C, Perl, PHP y Python, y los tratará como
fuentes válidas para examinar.</p>
<p>Hay varias opciones que se pueden proporcionar, además del nombre del
directorio que se va a analizar, y se describen en la página del manual.</p>
<p>Las opciones más útiles son las relacionadas con la salida, como:</p>
<ul>
<li>--warning &lt;nivel&gt; (Define el nivel de las debilidades de las que se 
informa)
<ul>
<li>1 incluye sólo las predefinidas y las de muy alta severidad.</li>
<li>2 incluye las de severidad media (predefinido).</li>
<li>3 incluye las vulnerabilidades de baja severidad.</li>
</ul></li>
<li>--xml  (Salida en XML)</li>
<li>--html (Salida en HTML)</li>
</ul>
<p>Suponiendo que tenemos el <a href="test.c.html">archivo de prueba</a>
situado en el directorio actual sin ningún otro archivo fuente, podemos
invocar el analizador con el siguiente comando:</p>
<pre>
rats --warning 1 --html . &gt;salida.html
</pre>
<p>Producirá un archivo HTML con el resultado del análisis, que puede
cargarse desde un navegador.</p>

<h2>El resultado</h2>
<p>Al hacer funcionar RATS sobre nuestro <a href="test.c.html">código de 
ejemplo</a>, se produce la siguiente salida <i>(Nota del traductor: se
mantiene la salida literal del comando, que es en inglés)</i>:</p>
<hr />
<div class="sampleblock">
<h3>Severity: High</h3>
<p>Issue: fixed size global buffer</p>
<p>
  Extra care should be taken to ensure that character arrays that are
  allocated on the stack are used safely.  They are prime targets for
  buffer overflow attacks.
</p>
<p>
  File: <b>test.c</b><br>
  Lines: 10 11 12
</p>

<h3>Severity: High</h3>
<p>Issue: strcpy</p>
<p>
  Check to be sure that argument 2 passed to this function call will not
  copy more data than can be handled, resulting in a buffer overflow.
</p>
<p>
  File: <b>test.c</b><br>
  Lines: 18
</p>

<h3>Severity: High</h3>
<p>Issue: getenv</p>
<p>Environment variables are highly untrustable input. They may be of any length, and contain any data. Do not make any assumptions regarding content or length. If at all possible avoid using them, and if it is necessary, sanitize them and truncate them to a reasonable length.
</p>
<p>
  File: <b>test.c</b><br>
  Lines: 22 24   </p>

<h3>Severity: High</h3>
<p>Issue: sprintf</p>
<p>
  Check to be sure that the format string passed as argument 2 to this
  function call does not come from an untrusted source that could have added
  formatting characters that the code is not prepared to handle.
  Additionally, the format string could contain `%s' without precision that
  could result in a buffer overflow.
</p>
<p>
  File: <b>test.c</b><br>
  Lines: 24   </p>

<h3>Severity: High</h3>
<p>Issue: popen</p>
<p>
  Argument 1 to this function call should be checked to ensure that it does
  not come from an untrusted source without first verifying that it contains
  nothing dangerous.
</p>
<p>
  File: <b>test.c</b><br>
  Lines: 33   </p>

<h3>Severity: High</h3>
<p> Issue: printf</p>
<p>
  Check to be sure that the non-constant format string passed as argument 1
  to this function call does not come from an untrusted source that could
  have added formatting characters that the code is not prepared to handle.
</p>
<p>
  File: <b>test.c</b><br>
    Lines: 42   </p>
  <p>
    Total lines analyzed: <b>49</b><br>
    Total time <b>0.000288</b> seconds<br>
    <b>170138</b> lines per second</p>
</div>
<hr />
<p>La salida es bastante voluminosa, a pesar de que el propio código es muy
breve. Esto muestra uno de los puntos negativos del análisis automatizado,
el volumen de información de la salida.</p>

<h2>Comprender la salida</h2>
<p>La salida que se ha producido es básicamente una descripción de las
funciones que se encuentren, el número de línea en el que se ha detectado
la debilidad y una descripción del problema. (Como hemos utilizado un nivel
de advertencia «--warning» para restringir sólo a las funciones del nivel
«alto», hemos reducido en cierta manera la salida).</p>
<p>Cada una de las incidencias que hemos descubierto debería ser examinada
manualmente para ver si realmente hay algo mal o si se trata de un falso
positivo (por ejemplo, una función que se pudiera utilizar erróneamente, pero
que se usa de la forma adecuada).</p>
<p>En este caso, vemos que todas las vulnerabilidades de nuestro código han
sido citadas, pero no queda totalmente claro sin abrir el código con un
editor e ir revisando las líneas.</p>
<p>Una gran omisión en la salida es que no se incluyen las líneas a las que
se hace referencia, algo que <a href="flawfinder">flawfinder</a> le permite
incluir.</p>
<hr />
<p><a href="..">Volver al proyecto de auditoría</a> |
<a href="index">Volver a la página de ejemplos de auditoría</a></p>
