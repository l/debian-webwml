#use wml::debian::template title="Ejemplo de auditoría automatizada: flawfinder"
#use wml::debian::recent_list
#use wml::debian::translation-check translation="1.7" maintainer="Juan M. Garcia"
# $Id$

<p><a href="http://packages.debian.org/flawfinder">flawfinder</a> es un analizador de
propósito general para encontrar e informar de debilidades potenciales en código
fuente tanto de C como de C++.</p>


<h2>Hacer funcionar flawfinder</h2>
<p>Hacer funcionar flawfinder es tan sencillo como invocar el comando con el
directorio o los nombres de los archivos que se van a procesar.  Si se indica
un directorio, se procesarán todos los archivos que se encuentren y que se
reconozcan como archivos fuente en ese directorio.</p>
<p>Además de proporcionar al programa una lista de archivos o directorios,
hay varias opciones de la línea de comandos que se utilizan para controlar el
comportamiento de las herramientas.</p>
<p>Las opciones se explican al detalle en la página del manual, pero hay
opciones particularmente útiles que usaremos en el ejemplo:</p>
<ul>
<li>--minlevel=X
<ul>
<li>Define como X el nivel mínimo de riesgo para que se incluya en la
salida.  El rango válido es de 1 a 5, siendo 1 «bajo riesgo» y 5 «alto
riesto».</li>
</ul></li>
<li>--html
<ul>
<li>Formatea la salida como HTML en lugar de como texto sencillo.</li>
</ul></li>
<li>--context
<ul>
<li>Muestra el contexto, por ejemplo, la línea que tiene la potencial
debilidad.</li>
</ul></li>
</ul>

<p>Para producir un archivo HTML con el resultado de nuestro programa,
teniendo en cuenta sólo las funciones de «alto riesgo», tendríamos que
teclear algo como esto:</p>
<pre>
flawfinder --html --context --minlevel=4 test.c &gt; output.html
</pre>

<h2>El resultado</h2>
<p>Al hacer funcionar flawfinder sobre nuestro <a href="test.c.html">código
de ejemplo</a>, se produce la siguiente salida <i>(Nota del traductor: se
mantiene la salida literal del comando, que es en inglés)</i>:</p>

<hr />
<div class="sampleblock">
<p>
Examining test.c <br>
<ul>
<li>test.c:18: <b>  [4] </b> (buffer) <i> strcpy:
  Does not check for buffer overflows when copying to destination.
  Consider using strncpy or strlcpy (warning, strncpy is easily misused).  </i>
<pre>
      strcpy( dir, argv[ 1 ] );
</pre>
<li>test.c:24: <b>  [4] </b> (buffer) <i> sprintf:
  Does not check for buffer overflows. Use snprintf or vsnprintf.  </i>

<pre>
	sprintf( dir, "%s", getenv( "HOME" ) );
</pre>
<li>test.c:33: <b>  [4] </b> (shell) <i> popen:
  This causes a new program to execute and is difficult to use safely.
  try using a library call that implements the same functionality if
  available.  </i>
<pre>
    fp = popen( cmd, "r" );
</pre>
<li>test.c:42: <b>  [4] </b> (format) <i> printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification.  </i>

<pre>
      printf( buff );
</pre>
</ul>
<p>
Number of hits = 4
<br>
Number of Lines Analyzed = 48 in 0.53 seconds (1392 lines/second)
<br>
</div>
<hr />

<h2>Comprender la salida</h2>
<p>Al igual que ocurría con la salida de <a href="RATS">RATS</a>, este
informe es es muy fácil de leer.  Muestra claramente las funciones que se
han detectado como potencialmente peligrosas, así como la descripción del
problema.</p>
<p>También es muy útil la inclusión de información de contexto, porque así se
concentra la atención inmediatamente sobre los puntos de interés y se evita
considerar otros que no son tan válidos.</p>
<p>El análisis del <a href="test.c">código de nuestro ejemplo</a> es bastante
inteligente, puesto que no avisa de <i>todas</i> las funciones <tt>strcpy</tt>
problemáticas, sino sólo de la que piensa que podría ser potencialmente
peligrosa.</p>
<p>De esta forma, ha conseguido resaltar todas las debilidades de nuestro
código sin dar lugar a falsos positivos.</p>
<hr />
<p><a href="..">Volver al proyecto de auditoría</a> |
<a href="index">Volver a la página de ejemplos de auditoría</a></p>
