#use wml::debian::template title="Uso de CVS junto con paquetes de Debian"
#use wml::debian::translation-check translation="1.5"

<p>Con este pequeño documento sólo intentamos dar unos pocos consejos
para pasar a gestionar paquetes con CVS. Probablemente sólo le interese a
unas pocas personas poco familiarizadas con CVS y el control de versión.
Además, hay un script en <code>/usr/share/doc/cvs-buildpackage</code> llamado
<code>cvs-pkginit</code> (tanto el script como su página man están
comprimidos con gzip), que mostrará un resumen de este documento COMO.

<p>Por ejemplo, para convertir el paquete foo, versión bar1, revisión 3 de
Debian, pruebe:
<pre>
% cvs-pkginit foo bar1 3
</pre>
y lea el resumen.

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>Nota: en la siguiente discusión, las entidades dentro de símbolos
&lt;&gt; son variables en cada caso, todo lo demás es literal. Por
ejemplo, si hablamos sobre un paquete cuyo autor ha versionado como
2.1.82, entonces &lt;$version&gt; significa 2.1.82, y
versión_upstream_&lt;$version | tr . _&gt; significa
versión_upstream_2_1_82.

<p>N. del. T: Con «upstream» nos referimos al autor original, de manera
que la «versión del upstream» es la que obtenemos de Internet, aún sin
debianizar.

<ol>
<li>Configurar CVS

<pre>
   $ CVSROOT=/donde/esté/su/repositorio
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>Esto le permite separar sus paquetes de Debian de cualquier otra
   cosa que tenga ahora o en el futuro en su repositorio. Incluso si
   piensa que no va a usar CVS para nada más, es mejor clasificar su
   repositorio ahora que lamentarse después (es un follón estar cambiando
   cosas de sitio en el repositorio después).

   <p>Si se supone que más de una persona va a usar el CVS, tendrá que
   asegurarse que realmente pueden modificar el repositorio usando CVS.
   Escoja un grupo (o un conjunto de grupos) que tengan acceso a partes
   del repositorio, y establezca permisos:

<pre>
   \# chgrp &lt;archivo&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>Esto asegura que los miembros del grupo archivo tienen permiso para
   configurar el repositorio. Ahora tiene que asegurarse de que los grupos
   adecuados pueden modificar partes del repositorio.

<pre>
   \# mkdir $CVSROOT/debian/&lt;paquete1&gt;
   \# chgrp &lt;grupo1&gt; $CVSROOT/debian/&lt;paquete1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paquete1&gt;
   \# mkdir $CVSROOT/debian/&lt;paquete2&gt;
   \# chgrp &lt;grupo2&gt; $CVSROOT/debian/&lt;paquete2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paquete2&gt;
</pre>

   <p>Como usuario normal, debería hacer público su repositorio CVS, bien
   usando <kbd>"-d /where/your/repository/will/be"</kbd> o escribiendo en
   su fichero de perfil un fragmento como el que sigue.

<pre>
   $ CVSROOT=/donde/esté/su/repositorio
   $ export CVSROOT
</pre>


<li>Uso de módulos

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>De aquí en adelante, &lt;paquete&gt; debería ser el nombre del
   paquete tal como aparece en el fichero debian/changelog.

   <p>Añada las siguientes líneas, la primera es esencial, la segunda
   puede ir duplicada y es autoexplicativa.

<pre>
   modules   CVSROOT modules
   &lt;paquete&gt; debian/&lt;paquete&gt;
</pre>

<pre>
   \# cvs commit -m 'Definir los primeros módulos'
</pre>


<li>Prepárese para usar CVS

   <p>Inserte su árbol de fuentes con las siguientes órdenes (asumiendo
   que ya las haya debianizado, y que existe un fichero orig.tar.gz).
   Tenga en cuenta que los fuentes del autor original se importan con -ko
   (porque es un binario), pero no los cambios locales que hagamos. Tenga
   en cuenta que los números de época (epoch) se ignora a efectos de
   determinar el nombre de la etiqueta (tag) de CV (normalmente se usan
   para cambiar la opinión de dpkg al respecto del orden de los paquetes,
   y no son relevantes para las etiquetas de CVS).

   <p>Pase al directorio donde tenga desempaquetado su árbol de desarrollo
   debianizado aún sin introducir en el CVS, que es lo que intentamos
   inyectar en CVS (no está en CVSROOT, generalmente).

   <p>REPITO: En lo que sigue, &lt;paquete&gt; debería ser el nombre del
   paquete tal como aparece en el fichero debian/changelog.

<pre>
   $ cd /donde/esté/su/árbol/de/fuentes
   $ tar zvfx &lt;paquete&gt;_&lt;versión&gt;.orig.tar.gz
   $ cd &lt;paquete&gt;_&lt;versión&gt;.orig
   $ cvs import -ko -m 'Importamos las fuentes peladas' \
       debian/&lt;paquete&gt; source-dist versión_upstream_&lt;versión|tr . _&gt;
</pre>

   <p>Puede cambiar la etiqueta de rama (branch) source-dist por cualquier
   otra cosa que le guste. (El mantenedor de cvs-buildpackage suele usar
   la etiqueta upstream - lo cual es un estudio en redundancia ;-).

   <p>Si ha instalado y configurado el CVS siendo root, y no ha preparado
   permisos de grupo para poder escribir, necesitará crear
   $CVSROOT/debian/&lt;paquete&gt; como root y cambiar la pertenencia a
   grupo y usuario en el repositorio al grupo/usuario particulares
   respectivamente. La orden import de CVS mostrará un aviso indicando que
   no puede crear el directorio debian/&lt;paquete&gt;, pero no importa.

   <p>El siguiente paso es descargar una copia de trabajo del árbol
   completo e incorporar los cambios.

<pre>
   $ cd /donde/esté/su/árbol/de/fuentes
   $ cvs checkout &lt;paquete&gt;
</pre>

   <p>Si ya ha creado una versión debianizada pero no usó CVS antes, puede
   que quiera ejecutar las siguientes órdenes para incorporar los cambios.
   Después de eso, debería etiquetar esa versión para poder descargarla
   más tarde.

<pre>
   $ cd /donde/esté/su/árbol/de/fuentes/&lt;paquete&gt;-&lt;versión&gt;
   $ diff -qrBbw . /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;/ | grep -v CVS
   $ FILES_CHANGED_LOCALLY="&lt;la salida de lo anterior&gt;"
   $ tar cf - $FILES_CHANGED_LOCALLY | \
       tar -C /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt; -xvpf -
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
</pre>

   <p>Por favor, asegúrese de que el fichero debian/rules es ejecutable,
   ya que de esta manera lo será también al exportarlo, y no habrá
   problemas al ejecutar dpkg-buildpackage en las fuentes exportadas. Eng
   eneral, asegúrese de que <b>todos</b> los ficheros tienen los permisos
   correctos antes de añadirlos al repositorio CVS.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
   $ cvs add debian &lt;cualquier otro fichero que haya que añadir&gt;
</pre>

   <p>Además, tenga en cuenta que tiene que añadir de forma manual todos
   los ficheros adicionales que deberían ir en el repositorio,
   especialmente los del directorio debian. Más aún, observe que la orden
   cvs add <i>no</i> trabaja de forma recursiva, de manera que tendrá que
   añadir de forma manual cualquier subdirectorio que tenga. (cd debian;
   cvs add *)

   <p>Una cosa interesante es que ejecutar cvs update le mostrará el
   estado de todos los ficheros del directorio.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
   $ cvs update
</pre>

   <p>La salida se paracerá a esto:
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? example1
</pre>
   M significa modificado (aún tiene que enviar los cambios), A significa
   Añadido (pero sin enviar aún), ? significa que CVS no conoce ese
   fichero (¿quizá falta añadirlo?). Cuando esté satisfecho,  y todos los
   ficheros tengan los permisos adecuados, está preparado para enviar los
   cambios.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
   $ cvs commit -m 'Todos los cambios para debian'
   $ cvs tag versión_debian_&lt;versión|tr . _&gt;-&lt;revisión-debian|tr . _&gt; .
</pre>

   <p>El nuevo árbol de fuentes residirá en un directorio que no contiene
   el número de versión. Esto no es un problema, como veremos más
   adelante.

   <p>Si en lugar de esto va a crear el directorio debian desde cero
   (puede ser más sencillo, pero menos automatizado):

<pre>
   $ mkdir debian
</pre>

   <p>Cree todos los ficheros necesarios en debian y añádalos al control
   de fuentes.

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>Después de esto, el siguiente envío incluirá todos los ficheros.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
   $ cvs commit -m &lt;un mensaje&gt;
</pre>

<p>Prepararse para una nueva versión

   <p>Antes de poder ejecutar algunas de las órdenes de Debian que crearán
   un paquete, tiene que descargar el módulo sin todos los subdirectorios
   CVS. Esto se hace con la orden «<kbd>export</kbd>». Pero lo primero que
   necesita es enviar todas las modificaciones y marcarlas con un número
   de versión.

<pre>
   $ cvs commit -m &lt;mensaje&gt;
   $ cvs tag versión_debian_&lt;versión|tr . _&gt;-&lt;revisión-debian|tr . _&gt;
</pre>


<li>Publique

   <p>Puede usar tanto el mecanismo cvs-buildpackage (se prefiere) o un
   «export» manual. Haga algunas pruebas previas con cvs-buildpackage
   (asegúrese de que las etiquetas concuerdan) como por ejemplo (debe
   haber configurado /etc/cvsdeb.conf):

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>Ejecute entonces la verdadera orden, siendo sudo el programa con el
   que ganar acceso de root.

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>También lo puede hacer de forma manual:

   <p>Descargue los cambios.

<pre>
   $ cvs export -d &lt;paquete&gt;-&lt;versión&gt; \
         -r versión_debian_&lt;versión|tr . _&gt;-&lt;revisión-debian|tr . _&gt; \
             &lt;paquete&gt;
</pre>

   <p>Ahora puede usar el mecanismo normal para exportar.


<hr>

   <p>¡Listo! ¡Felicidades! Aquí le cuento algunas cosas que puede hacer
   con su árbol de fuentes:

<hr>

<li>Eliminar o renombrar un fichero

   <p>La forma normal de cambiar un fichero es copiar VIEJO a NUEVO,
   ejecutar las órdenes normales de CVS para borrar VIEJO del repositorio,
   y añadir NUEVO (tanto VIEJO como NUEVO pueden contener path relativos,
   por ejemplo, «<kbd>foo/bar.c</kbd>»).

<pre>
   $ mv VIEJO NUEVO
   $ cvs remove VIEJO
   $ cvs add NUEVO
   $ cvs commit -m "Renombramos VIEJO como NUEVO" VIEJO NUEVO
</pre>

   <p>Esta es la manera más sencilla de mover un fichero de sitio: evita
   errores y conserva un histórico de cambios. Fíjese que para acceder al
   histórico del fichero tiene que especificar el nombre viejo o el nuevo,
   dependiendo de qué parte quiera veer. Por ejemplo, «<kbd>cvs log
   VIEJO</kbd>» le dará un registro hasta el momento en que cambió de
   nombre.


<li>Actualizar un módulo con la orden import

   <p>Cuando llega una nueva versión de los fuentes, lo puede importar en
   el repositorio son la misma orden «import» que usó para crear el
   repositorio la primera vez. La única diferencia es que esta vez
   especificará una etiqueta de versión y mensaje diferentes.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;nuevo directorio fuente&gt;
   $ cvs import -m 'Importamos nueva versión' debian/&lt;paquete&gt; \
         source-dist versión_upstream_&lt;versión|tr . _&gt;
</pre>

   <p>Ahora, tenemos que incorporar los cambios que hemos hecho en la
   nueva revisión. La mejor manera de hacerlo es cambiar de sitio nuestra
   copia de trabajo (basada en los fuentes antiguos del upstream), y
   descargar una nueva copia del paquete <b>incorporando</b> los cambios
   hechos en el fuente de upstream. Así es como se hace:

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo
   $ mv &lt;paquete&gt; &lt;paquete&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;paquete&gt;
   $ cd /donde/esté/el/árbol/de/trabajo/&lt;paquete&gt;
</pre>

   <p>La orden anterior descargará la última revisión de &lt;paquete&gt;,
   integrando en la copia de trabajo los cambios hechos desde ayer en la
   rama «source-dist» del vendedor. Si surgen conflictos durante la
   integración, debería poder resolverlos a la manera normal. Entonces,
   ya puede enviar los cambios de los ficheros modificados.

   <p>Usar una fecha, como se sugirió previamente, asume que no importa
   más de una versión de un producto al día. Si lo hace, siempre puede
   usar en su lugar algo como esto:

<pre>
   $ cvs checkout -jversión_upstream_&lt;versiónvieja|tr . _&gt; \
                  -jversión_upstream_&lt;versiónnueva|tr . _&gt; &lt;paquete&gt;
</pre>

   <p>En este caso, las dos órdenes anteriores son equivalentes.

   <p>Para los ficheros que no han sido modificados de forma local, la
   revisión recién creada se convierte en la «head revision».

   <p>De manera que compruebe que todos los ficheros hayan sido
   actualizados correctamente. ¡Recuerde especialmente hacer cambios en el 
   fichero debian/changelog!

   <p>Cuando quede satisfecho, puede borrar la versión antigua del
   directorio de trabajo. ¡Asegúrese bien de que está eliminando el
   directorio correcto!
   
<pre>
   $ rm -rf ../&lt;paquete&gt;.old
</pre>

   <p>Ahora está listo para publicar.

<li>Elimine el árbol de fuentes para conservar el espacio de disco

   <p>Le aconsejamos no usar <kbd>rm -rf</kbd> para eliminar el árbol de
   fuentes de trabajo, sino la orden CVS, que también comprobará si ha
   hecho algún cambio local que no haya enviado aún.

<pre>
   $ cd /donde/esté/el/árbol/de/trabajo
   $ cvs release -d &lt;paquete&gt; 
</pre>


<li>Glosario

<pre>
   Etiquetas	nombres simbólicos para las revisiones
   Repositorio	Archivo de ficheros fuente
</pre>

<li>Apéndice:

 <p>A: CONVENCIONES PARA LAS ETIQUETAS DE CVS
 <p>A: CVS TAG CONVENTIONS

<pre>
 |======================================================================|
 |Versión Upstream    | &lt;versión&gt;                                       |
 |Revisión Debian     | &lt;revisión&gt;                                      |
 |Nomb. fich tar orig | paquete_&lt;versión&gt;.orig.tar.gz                   |
 |Nombre paqu. Debian | paquete_&lt;versión&gt;-&lt;revisión&gt;_&lt;arqu&gt;.deb         |
 |Etiq CVS «vendor»   | versión_upstream_&lt;versión  | tr . _&gt;            |
 |Etiq CVS «current»  | versión_debian_&lt;revisión | tr . _&gt;              |
 |======================================================================|
</pre>

 <p>Examples:
<pre>
 |======================================================================|
 |                    | fuentes upstream       | Paquete nativo         |
 |======================================================================|
 |Versión upstream    | 2.76                   | 3.38                   |
 |Revisión Debian     | 1.2                    |                        |
 |Nomb. fich tar orig | make_2.76.orig.tar.gz  |                        |
 |Nombre paqu. Debian | make_2.76-1.2_i386.deb | kpkg_3.38_i386.deb     |
 |Etiq CVS «vendor»   | versión_upstream_2_76  | versión_upstream_3_38  |
 |Etiq CVS «current»  | versión_debian_2_76-1_2| versión_debian_3_38    |
 |======================================================================|
</pre>

 <p>Tenga en cuenta que se ignora los números de época al determinar los
 nombres de las etiquetas para CVS (generalmente se usan para cambiar la
 opinión de dpkg al respecto del orden de los paquetes, y no suelen ser
 relevantes para las etiquetas de CVS).

</ol>
