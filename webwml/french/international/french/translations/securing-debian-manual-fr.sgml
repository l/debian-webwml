<!doctype debiandoc system [
   <!entity % untranslated "IGNORE">
]>

<book>

<titlepag>
<!-- Title information -->
<title>Securing Debian Manual
<author>
<name>Javier Fernández-Sanguino Peña</name>
<email>jfs@computer.org</email>
</author>
<version>v2.2
<date>Tue, 23 Apr 2002 20:56:15 +0200

<abstract>
Ce document décrit comment sécuriser l'installation d'un système Debian
standard. Il couvre quelques tâches courantes telles que la sécurisation d'un
réseau qui utilise Debian GNU/Linux et il donne également des informations
complémentaires sur les outils de sécurisation disponibles ainsi que sur
le travail accompli par l'équipe Debian consacrée à la sécurité.
</abstract>

<copyright> <copyrightsummary>Copyright &copy;  2002 Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2001  Alexander Reelsen, Javier Fernández-Sanguino Peña
<p>Copyright &copy;  2000  Alexander Reelsen
<p>This document is distributed under the terms of the GNU
Free Documentation License. It is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY.
</copyright>

</titlepag>

<!-- Table des matières -->
<toc>

<!-- Début du document -->

<chapt>Introduction
<p>
L'une des choses les plus difficiles dans l'écriture de documents liés à la
sécurité est que chaque cas est unique. Il faut prêter attention à deux
choses&nbsp;: la menace que constitue l'environnement et les besoins de
sécurité liés à un site individuel, une machine ou un réseau. Par exemple,
les besoins d'une utilisation familiale sont complètement différents de
ceux liés à un réseau de banque. Alors que la première menace à laquelle un
utilisateur quelconque doit faire face est le «&nbsp;script kiddie&nbsp;»",
un réseau de banque doit se soucier des attaques directes. De plus, la banque
se doit de protéger les données de ses clients avec une précision
arithmétique. En résumé, chaque utilisateur
doit faire un compromis entre facilité d'utilisation et sécurité virant
à la paranoïa.
<!-- Is this metaphor really appropriate? Sounds like rounding errors to me, era -->
<p>
Notez que ce manuel couvre seulement les questions liées aux logiciels.
Le meilleur programme au monde ne pourra vous protéger si quelqu'un peut 
accéder physiquement à la machine. Vous pouvez la mettre sous votre bureau ou
dans un bunker protégé par une armée. Néammoins, l'ordinateur sera beaucoup
plus sûr (d'un point de vue logiciel) que celui protégé physiquement s'il est
configuré correctement et que les logiciels de l'autre sont pleins de trous
de sécurité.
Bien entendu, vous devez prendre en compte les deux aspects.

<p>
Ce document donne un aperçu de ce que vous pouvez faire pour augmenter la
sécurité de votre système Debian GNU/Linux. Si vous avez lu des documents 
concernant la sécurité sur Linux, vous trouverez des similitudes avec ce
document. Cependant, ce manuel ne se veut pas l'ultime source d'informations
que vous utiliserez, il essaye seulement d'adapter ces informations au
système Debian GNU/Linux.
D'autres distributions procèdent de manière différente pour certaines
questions (le démarrage de démons est un exemple courant)&nbsp;; ici, vous
trouverez ce qui convient aux procédures et aux outils Debian.
<!-- 
# Does this approximate the intent of the original author? (FIXME: check)
# Original text said: "you will find here [sic] a different approach,
# using Debian's tools, regarding security." era
-->
<!-- IMHO yes, jfs -->

<p>
Si vous avez des commentaires, des éléments à ajouter ou des suggestions,
envoyez-les à
<url name="Javier Fernández-Sanguino" id="mailto:jfs@computer.org">
(autre adresse&nbsp;: jfs@debian.org) et ils seront intégrés dans ce manuel.
<!-- j'ai mis à jour sur version 2.6, pb -->
<sect>Télécharger ce manuel 
<p>
Vous pouvez télécharger ou lire la nouvelle version du manuel de sécurisation
Debian à l'adresse <url name="Debian Documentation Project" 
id="http://www.debian.org/doc/manuals/securing-debian-howto/">.  
Jetez un oeil également à la version CVS sur <url name="CVS server" 
id="http://cvs.debian.org/ddp/manuals.sgml/securing-howto/?cvsroot=debian-doc">.

<p>
Vous pouvez télécharger le document dans une
<url
id="http://www.debian.org/doc/manuals/securing-debian-howto/securing-debian-howto.txt" name="version texte"> sur le site du Projet de Documentation
Debian. Cependant, vous pouvez installer le paquet
<url id="http://packages.debian.org/harden-doc" name="harden-doc"> qui offre
ce même document dans les formats HTML, txt et PDF.
<!-- j'ai mis à jour sur version 2.6, pb -->


<!-- 
<p>
Les anciennes versions (non maintenues) de ce HOWTO peuvent être trouvées ici :

<list>
<item><url name="Text-only"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.txt">
<item><url name="HTML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.html">
<item><url name="HTML, tarred and gzipped"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.tar.gz">
<item><url name="SGML"
id="http://joker.rhwd.de/doc/Securing-Debian-HOWTO/Securing-Debian-HOWTO.sgml">
</list>
-->
<!-- TODO: remove these stale links rather than leave references to -->
<!-- the old versions hanging around? era -->

<sect> Avis et Réactions
<p>
Maintenant, la partie officielle. Pour l'instant, c'est moi
(Alexander Reelsen) qui a écrit la plupart des paragraphes de ce manuel
mais, à mon avis, il ne faudrait pas que cela reste ainsi. J'ai grandi et
vécu avec les logiciels libres, c'est
une part de ma vie de tous les jours et j'espère de la vôtre aussi.
J'encourage chacun à m'envoyer ses réactions, astuces ou suggestions.

<p>
Si vous pensez que vous pouvez améliorer une section ou un paragraphe,
écrivez au responsable du document. Cela sera apprécié !
En particulier, si vous trouvez une section estampillée «&nbsp;FIXME&nbsp;»,
qui signifie que l'auteur n'a pas eu le temps ou les connaissances nécessaires
pour terminer le sujet, envoyez-lui un courrier immédiatement.

<p>
Le thème de ce manuel fait comprendre qu'il est important de garder ce manuel
à jour&nbsp;; vous pouvez apporter votre pierre à l'édifice. S'il vous plaît,
aidez-nous.
 

<sect>Connaissances requises
<p>
L'installation de Debian GNU/Linux n'est pas très difficile et vous 
avez été sans doute capable de l'installer. Si vous disposez déjà de
connaissances concernant Linux ou d'autres Unices et si vous êtes quelque
peu familier avec les problèmes élémentaires de sécurité, il vous sera plus
facile de comprendre ce manuel, car ce document ne peut pas entrer dans tous
les petits détails (sans quoi cela aurait été un livre plutôt qu'un manuel).
Si vous n'êtes pas si familier que cela, vous pouvez consulter
<ref id="references"> pour savoir où trouver des informations plus
approfondies sur le sujet.
 

<sect>Choses à écrire (FIXME/TODO)
<p>
<list>
<!-- version 2.6 à traduire, pb -->
<item>Comment mettre en place un firewall en utilisant
Debian GNU/Linux. La section sur les pare-feux concerne un système isolé
(pas de protection d'autres machines...). Comment tester la configuration.

<item>Paramétrage d'un serveur mandataire pare-feux avec Debian
GNU/Linux et liste des paquets fournissant des services
<em>proxy</em>
(tels que <package>xfwp</package>,
<package>xproxy</package>, <package>ftp-proxy</package>, 
<package>redir</package>,
<package>smtpd</package>, <package>nntp-cache</package>, <package>dnrd</package>,
<package>jftpgw</package>,<package>oops</package>,<package>pnsd</package>,
<package>perdition</package>,<package>transproxy</package>,
<package>tsocks</package>). Renvoi au manuel pour toute autre information.
<!-- sup. avec version 2.6 -->
<item>Informations sur la configuration de services avec file-rc
<item>Vérification de toutes les URLs et suppression ou correction de celles
qui ne sont plus disponibles.

<item>Informations sur les substituts de serveurs communs (disponibles dans
Debian) à fonctionnalité restreinte. Par exemple&nbsp;:

	<list>
<item>local lpr with cups (paquet)?

	<item>remote lrp avec lpr

	<item>bind avec dnrd/maradns

	<item>apache avec dhttpd/thttpd/wn (tux?)

	<item>exim/sendmail avec ssmtpd/smtpd/postfix

	<item>squid avec tinyproxy

	<item>ftpd avec oftpd/vsftp

	<item>...

	</list>


<item>Plus d'informations concernant les rustines pour noyaux 
liées à la sécurité dans Debian, incluant celles montrées 
ci-dessus et informations sur leur activation dans un système
Debian.

<list>

<item>Linux Intrusion Detection (<package>lids-2.2.19</package>)

<item>Linux Trustees (paquet <package>trustees</package>)

<item><url name="NSA Enhanced Linux"
id="http://www.coker.com.au/selinux/">

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item>Linux capabilities (paquet <package>lcap</package>

<item><package>kernel-patch-freeswan,kernel-patch-int</package>

</list>

<item>Précisions sur l'arrêt de certains services réseaux non nécessaires
(outre inetd)&nbsp;; ceci fait partie de la procédure de consolidation mais
elle peut être élargie un petit peu.

<item>Informations sur le renouvellement des mots de passes&nbsp;;
c'est étroitement lié à la politique mise en place.

<item>Politique de sécurité et éducation des utilisateurs.

<item>Davantage à propos de tcpwrappers, et des wrappers en général&nbsp;?

<item><file>hosts.equiv</file> et d'autres trous de sécurités majeurs.

<item>Problèmes avec les serveurs de partage de fichiers tels que Samba
et NFS ?

<item>suidmanager/dpkg-statoverrides.

<item>lpr et lprng.

<item>Déconnecter les trucs Gnome sur IP ou les tucs IP de Gnome.

</list>

<!-- pleins de choses en 2.6-->

<sect>Changelog/Historique
 <p>

<!-- pleins de choses en 2.6-->
 
<sect1>Version 2.2
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Corrections de fautes de frappes, remerciements à Jamin W. Collins.
<item>Ajout d'une référence à la page de man de  apt-extracttemplate
(documentation sur la configuration de APT::ExtracTemplate)
<item>Ajout d'une section concernant la limitation de SSH. Informations 
basées sur les mails de Mark Janssen, Christian G. Warden et Emmanuel Lacour
sur la liste de discussion debian-security.
<item>Ajout d'informations sur les logiciels antivirus.
<item>Ajout d'une FAQ&nbsp;:journaux de su provenant du fait que cron fonctionnesous root.
</list>
<sect1>Version 2.1
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Modifications du "FIXME" de lshell
<item>Ajout d'un paquet sXid et retrait du commentaire depuis qu'il est disponible.
<item>Nombre de fautes de frappes découvertes par Oohara Yuuma ont été corrigées.
<item>ACID est maintenant disponible dans Debian (dans le paquet acidlab).
<item>Liens de LinuxSecurity réglés (merci à Dave Wreski).
</list>
<sect1>Version 2.0
<p>Modifications de Javier Fernández-Sanguino Peña. Je voulais passer à
2.0 quand tous les "FIXME" auraient été supprimés mais j' ai manqué de numéro
dans la série 1.9X :(
<list>
<item>Transformation du HOWTO en Manuel (maintenant je peux dire RTFM !)

<item>Ajout d'informations concernant les tcp wrappers et Debian
(maintenant plusieurs services sont compilés avec le support adéquat&nbsp;;
ainsi ceci n'est plus un problème inetd).

<item>Clarification d'une information sur la désactivation de services pour la
rendre
plus rigoureuse (les infos sur rpc se réferent toujours à update-rc.d)

<item>Ajout d'une petite note sur lprng.

<item>Ajout de quelques infos sur les serveurs compromis (toujours aussi
approximatif)

<item>Corrections des fautes de frappes rapportées par Mark Bucciarelli.

<item>Ajout d'étapes supplémentaires sur la récupération des mots de
passe quand l'admin a paramétré paranoid-mode=on.

<item>Informations pour paramétrer paranoid-mode=on lorsque l'on se connecte
en console.

<item>Nouveau paragraphe pour présenter la configuration de service.

<item>Réorganisation de la section <em>Après l'installation</em> afin de permettre 
une lecture plus aisée du document.

<item>Informations sur la manière de paramétrer des pare-feux avec
l'installation standard Debian&nbsp;3.0 (paquet iptables).

<item>Petit paragraphe expliquant pour quelles raisons l'installation
par le réseau
n'est pas une bonne idée et comment éviter cela en utilisant les outils Debian.


<item>Petit paragraphe sur un article de l'IEEE relatant de l'opportunité du patchage par référence.
<--! A verifier si je trouve le paragraphe plus bas. jpg ?! -->
<!-- et c'est vérifié ?  pB -->
<item>Appendice sur la manière de paramétrer une bécane snort Debian, basé sur 
ce que Vladimir a envoyé à la liste de discussion debian-security 
(3 septembre 2001)

<item>Information sur la manière dont est configurée logcheck dans Debian et
comment il peut être utilisé pour paramétrer HIDS.

<item>Informations sur les comptes utilisateurs et sur les analyses de profile.

<item>Inclusion de la configuration de apt.conf pour un /usr uniquement
lisible&nbsp;; copié à partir du courrier de Olaf Meeuwissen envoyé
à la liste de discussion debian-security.

<item>Nouvelles sections sur le VPN ainsi que les paquets disponibles dans 
Debian (besoin de contenu concernant l'installation de VPN et les problèmes
spécifiques à Debian) basé sur les courriers de Jaroslaw Tabor et
Samuli Suonpaa postés sur la liste de discussion debian-security.

<item>Petite note concernant les programmes pour construire automatiquement
des prisons <em>chroot<em>.

<item>Nouveau sujet de FAQ concernant identd d'après une discussion sur la liste de 
discussion debian-security (février 2002, commencé par Johannes Weiss).

<item>Nouveau sujet de FAQ concernant inetd  d'après une discussion sur la liste de 
discussion debian-security (février 2002).

<item>Note d'introduction sur rcconf dans la section "désactivation de services".

<item>Diverses approches concernant le LKM. Remerciements à Philipe Gaspar.

<item>Indications sur les documents CERT et les ressources Couterpane.
</list>

<sect1>Version 1.99
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Ajout d'un nouveau sujet de FAQ concernant le temps à résoudre les vulnérabilités 
liées à la sécurité.
<item>Réorganisation des sections de la FAQ.
<item>Début d'une section concernant les pare-feux dans Debian
GNU/Linux (pourrait être élargi un peu).
<item>Corrections de fautes de frappes envoyées par Matt Kraai.
<item>Correction sur les informations DNS.
<item>Ajout d'informations sur whisker et nbtscan à la section audit.
<item>Correction d'URL fausses.
</list>
<sect1>Version 1.98
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Ajout d'une nouvelle section concernant l'utilisation de la 
Debian GNU/Linux pour réaliser des audits. 
<item>Ajout d'infos concernant le démon finger depuis la liste de 
discussion debian-security.
</list>
<sect1>Version 1.97
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Correction du lien pour Linux Trustees.
<item>Fautes de frappes (rustines de Oohara Yuuma et Pedro Zorzenon).
</list>

<sect1>Version 1.96
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Réorganisation de la section installation et suppression de services et
ajout de nouvelles notes.

<item>Ajout de quelques notes concernant l'utilisation d'outils tels que
les outils de détection d'intrusion.

<item>Ajout d'un chapitre concernant la signature de paquets.

</list>

<sect1>Version 1.95
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout de notes concernant la sécurité de Squid envoyés par Philipe Gaspar.

<item>Correction de liens rootkit. Remerciements à Philipe Gaspar.

</list>

<sect1>Version 1.94
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout de quelques notes concernant Apache et Lpr/lpng.

<item>Ajout d'informations concernant les partitions noexec et readonly.

<item>Réécriture de la manière dont les utilisateurs peuvent aider 
aux problèmes liés à la sécurité Debian (sujet d'une FAQ).
</list>

<sect1>Version 1.93
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Correction de l'emplacement du programme mail.

<item>Ajout de nouveaux sujets à la FAQ.
</list>

<sect1>Version 1.92
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout d'une petite section sur la manière dont Debian traite la sécurité.

<item>Clarification sur les mots de passes MD5 (merci à «&nbsp;rocky&nbsp;»)

<item>Ajout d'informations concernant la consolidation de X
par Stephen van Egmond.

<item>Ajout de nouveaux sujets à la FAQ.

</list>

<sect1>Version 1.91
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout d'informations légales envoyées par Yotam Rubin.

<item>Ajout de renseignements sur la manière de mettre en place un 
«&nbsp;honeynet&nbsp;» en utilisant Debian GNU/Linux.

<item>Ajout de TODOS supplémentaires.

<item>Fautes de frappes corrigées (merci Yotam&nbsp;!)

</list>

<sect1>Version 1.9
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout d'une rustine pour corriger des «&nbsp;fautes d'orthographe&nbsp;»
et nouvelles informations (contributions de Yotam Rubin)

<item>Ajout de liens vers d'autres documents en ligne (et hors ligne) tous deux 
figurant dans la section (voir <ref id="references">).

<item>Ajout d'informations sur la configuration d'options de Bind pour restreindre 
l'accès au serveur DNS.

<item>Ajout d'informations sur la consolidation automatique d'un système Debian
(par référence aux paquets harden et bastille).

<item>Suppression de quelques TODOs terminés et ajout de nouveaux.

</list>

<sect1>Version 1.8
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>

<item>Ajout de la liste des utilisateurs et des groupes standard, donnée
par Joey Hess à la liste de discussion debian-security.

<item>Ajout d'informations sur les rootkits LKM (<ref id="LKM">) avec la 
contribution de Philipe Gaspar.

<item>Ajout d'informations sur Proftp avec la contribution de Emmanuel Lacour.

<item>Rajout de l'annexe «&nbsp;pense-bête&nbsp;» de Era Eriksson.

<item>Ajout de nouveaux TODOs et retrait de ceux terminés.

<item>Ajout manuel des rustines d'Era car elles n'ont pas été incluses dans
la version précédente.

</list>
<sect1>Version 1.7
<p>Modifications de Era Eriksson.
<list>
<item>Fautes de frappes et changements de formulation<!-- FIXME: new checklist has not
been included yet, era, please send it back -->
</list>
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Changements mineurs de balises&nbsp;: supprimer les balises
tt et les remplacer par les balises prgn/package.
</list>

<sect1>Version 1.6 
<p>Modifications de Javier Fernández-Sanguino Peña.
<list>
<item>Ajout d'un pointeur sur le document publié dans le DDP (devrait
à terme remplacer l'original).
<item>Démarrage d'une mini-FAQ
(qui devrait être élargie) avec quelques questions récupérées depuis ma boite
aux lettres.
<item>Ajout d'informations générales concernant la sécurisation.
<item>Ajout d'un paragraphe au sujet de la distribution de courriers locaux.
<item>Ajout de quelques pointeurs vers d'autres sources d'information.
<item>Ajout d'informations sur le service d'impression.
<item>Ajout d'une liste de tâches sur le renforcement de la sécurité.
<item>Réorganisation des informations sur NIS et RPC.
<item>Ajout de quelques notes lors de la lecture de ce document sur mon nouveau 
Visor :) 
<item>Correction de certaines lignes mal formattées.
<item>Fautes de frappes corrigées.
<item>Ajout d'une idée Géniale/Paranoïaque avec la contribution de Gaby
Schilders.
</list>
<sect1>Version 1.5 

<p>Modifications de Josip Rodin and Javier Fernández-Sanguino Peña.

<list>
<item>Ajout de paragraphes apparentés à BIND et quelques FIXMEs.  <!-- Removed
this because I found no evidence for it in the diffs. // era Rewrote
style in order to make it more formal.  -->
</list>
<sect1>Version 1.4
    <p>
<list>
<item>Petit paragraphe sur la vérification des setuid
    <item>Différents nettoyages mineurs
    <item>Découverte sur la manière d'utiliser <tt>sgml2txt -f</tt> pour la 
    version txt</item>
</list>
<sect1>Version 1.3
    <p>
<list>
<item>Ajout de mise à jour de sécurité après le paragraphe "après installation".
    <item>Ajout d'un paragraphe proftpd 
    <item> Cette fois, quelque chose concernant XDM a réellement été écrit. 
    Désolé pour la dernière fois.
    </list>
<sect1>Version 1.2
    <p>
<list>
<item>Beaucoup de corrections grammaticales de James Treacy, nouveau 
    paragraphe XDM
    </list>
<sect1>Version 1.1
    <p>
<list>
<item>Correction de fautes de frappes, divers ajouts
    </list>
<sect1>Version 1.0
    <p>
<list>
<item>Première publication.
    </list>

<sect>Remerciements à&nbsp;:
<p>
<list>
<item>Alexander Reelsen qui a écrit le document original. 

<item>Javier Fernández-Sanguino qui a ajouté des informations
au document original.

<item>Robert van der Meulen pour les paragraphes sur les quotas ainsi que de
nombreuses bonnes idées.

<item>Ethan Benson qui a corrigé le paragraphe sur PAM et qui a eu quelques idées de qualité.

<item>Dariusz Puchalak qui a contribué aux informations de plusieurs chapitres.

<item>Gaby Schilders qui a eu une idée Géniale/Paranoïaque sympathique.

<item>Era Eriksson qui a éliminé les fautes de langage et qui a contribué à
l'annexe «&nbsp;pense-bête&nbsp;».


<item>Philipe Gaspar qui a écrit les informations concernant LKM.

<item>Yotam Rubin qui a contribué à régulariser toutes les fautes de frappes ainsi que 
les informations liées aux versions de Bin et aux mots de passes md5.

<item>Toutes les personnes qui m'ont suggéré des améliorations qui
(éventuellement) ont été incluses ici.

<item>Tout le monde qui m'a encouragé (Alexander) à écrire ce HOWTO (qui plus tard a évolué vers le Manuel).

<item>Tout le projet Debian.
</list>

<chapt>Avant de commencer.


<sect>Que voulez-vous faire de votre système ?

<p>
Sécuriser un système Debian n'est pas différent de la sécurisation d'un autre
système&nbsp;; de façon à procéder correctement, vous devez tout d'abord
décider quelle en sera son utilisation. Après cela, vous devrez 
envisager d'appliquer à la lettre les tâches qui vont suivre si vous
désirez réellement sécuriser votre système.

<p>
Vous constaterez que ce manuel est écrit a posteriori, cela étant,
vous trouverez des informations sur les tâches à réaliser avant,
pendant et après l'installation de votre système Debian. Les tâches
peuvent aussi être découpées comme ceci&nbsp;:

<list>

<item>Décider quels sont les services dont vous avez besoin et vous 
limiter à ceux-là. Ceci inclus la désactivation/désinstallation des 
services indésirables et l'ajout de filtres ou de tcpwrappers.

<item>Limiter les utilisateurs et les permissions sur votre système.

<item>Durcir les services disponibles ainsi, même en cas d'intrusion, 
l'impact sur votre système sera minimisé.

<item>Utiliser des outils appropriés pour garantir qu'une utilisation 
non autorisée soit détectée et que vous puissiez prendre des mesures
adéquates.

</list>

<sect id="references">Être conscient des problèmes de sécurité

<p>
Ce manuel ne va, généralement, pas dans les détails pour démontrer que 
certains problèmes sont considérés comme des risques pour la sécurité.
Toutefois, vous pourriez désirer avoir une meilleure vision de la sécurité 
Unix en général et plus particulièrement celle liée à Linux. Prenez le 
temps de lire les documentations relatives à la sécurité afin que 
vous soyez bien informés lorsque vous êtes confrontés à différents choix 
à prendre. Debian GNU/Linux est basée sur le noyau Linux, ainsi de 
nombreuses informations sur la sécurité UNIX en général concernant Linux 
peuvent être appliquées à d'autres distributions (même si les outils 
utilisés ou les programmes disponibles diffèrent).

<p>Quelques documents pratique&nbsp;:

<list>

<item>Le <url name="Linux Security HOWTO"
id="http://www.linuxdoc.org/HOWTO/Security-HOWTO.html">
(aussi disponible sur <url id="http://www.linuxsecurity.com/docs/LDP/Security-HOWTO.html" name="LinuxSecurity">) 
est une des meilleures références concernant la sécurité Linux.

<item>Le <url name="Security Quick-Start HOWTO for Linux" 
id="http://www.linuxsecurity.com/docs/LDP/Security-Quickstart-HOWTO/">
est également une très bonne base pour les utilisateurs néophytes 
(aussi bien en matière de Linux qu'en sécurité).

<item>
Le <url id="http://seifried.org/lasg/" name="Linux Security
  Administrator's Guide"> (fourni dans Debian via le paquet
  <package>lasg</package>) est un guide complet qui englobe tous les
  problèmes de sécurité Linux, de la sécurité du noyau jusqu'au VPN.
  Il est un peu obsolète (pas de mise à jour depuis 1999) et a été 
  remplacé par la Base de connaissance de la Sécurité Linux (actuellement
  non disponible en ligne, était présent sur http://www.securityportal.com/lskb/
  (mais n'est plus disponible sur cette adresse). Cette documentation est
  également disponible dans Debian via le paquet <package>lksb</package>.

<item>Dans <url name="Securing and Optimizing Linux: RedHat Edition"
id="http://www.linuxdoc.org/links/p_books.html#securing_linux"> vous 
pouvez trouver un document similaire à ce manuel mais qui s'applique à RedHat,
quelques problèmes ne sont pas spécifiques à une certaine distribution et 
peuvent s'appliquer à Debian.

<item>IntersectAlliance a publié un document qui peut être utilisé comme une 
référence sur la manière de renforcer les serveurs linux, il est disponible sur
 <url id="http://www.intersectalliance.com/projects/index.html" name="their site">.

<item>Pour les administrateurs réseaux, une bonne référence pour bâtir un
réseau sécurisé est le <url name="Securing your Domain HOWTO"
 id="http://www.linuxsecurity.com/docs/LDP/Securing-Domain-HOWTO/">.


<item>Si vous voulez évaluer le programme que vous allez utiliser (ou 
en ajouter de nouveaux) vous devriez lire le <url name="Secure Programs HOWTO"
id="http://www.linuxdoc.org/HOWTO/Secure-Programs-HOWTO.html">.

<!-- FIXME: vérifier les URLs --> <item>Si vous pensez avoir les capacités à installer un pare-feux, vous 
devriez lire le <url name="Firewall HOWTO"
id="http://www.linuxdoc.org/HOWTO/Firewall-HOWTO.html"> et le  <url
name="IPCHAINS HOWTO"
id="http://www.linuxdoc.org/HOWTO/IPCHAINS-HOWTO.html">.

<item>Finalement, une bonne carte à avoir sous la main est le 
<url name="Linux Security RefenceCard"
 id="http://www.linuxsecurity.com/docs/QuickRefCard.pdf">

</list>

<p>
Dans tous les cas, vous avez des informations concernant les services
expliqués ici (NFS, NIS, SMB ...) dans les nombreux HOWTO du <url
name="Projet Linuxdoc" id="http://www.linuxdoc.org/">, certains d'entre
eux discutent de la sécurité d'un service donné, donc n'oubliez pas 
de jeter un oeil là-dessus également.

<p>Les documents HOWTO du Projet de Documentation Linux sont disponibles
dans la Debian GNU/Linux via l'installation des paquets 
<package>doc-linux-text</package> (version texte) ou
<package>doc-linux-html</package> (version html). Après l'installation,
ces documents seront disponibles dans, respectivement, les répertoires
<file>/usr/share/doc/HOWTO/en-txt</file> et
<file>/usr/share/doc/HOWTO/en-html</file>.

<p>Autres livres Linux recommandés&nbsp;:

<list>

<item>Maximum Linux Security : A Hacker's Guide to Protecting Your Linux
  Server and Network.  Anonymous. Paperback - 829 pages. Sams Publishing.
  ISBN&nbsp;: 0672313413.July 1999.

<item> Linux Security By John S. Flowers. New Riders; ISBN: 0735700354
March 1999

</list>

<p>Livres divers (qui peuvent se rapporter aux problèmes concernant UNIX
ainsi que la sécurité mais spécifiquement à Linux)&nbsp;:

<list>

<item><url id="http://www.ora.com/catalog/puis/noframes.html"
        name="Practical Unix and Internet Security (2nd Edition)">
Garfinkel, Simpson, and Spafford, Gene; O'Reilly Associates;
        ISBN 0-56592-148-8; 1004pp; 1996.

<item>Firewalls and Internet Security Cheswick, William R. and Bellovin,
        Steven M.; Addison-Wesley; 1994; ISBN 0-201-63357-4; 320pp.

</list>

<p>Quelques sites Web utiles pour se tenir informé de la sécurité :

<list>

<item><url name="Security Focus" id="http://www.securityfocus.com">
le serveur qui héberge la base de données des vulnérabilités
	Bugtraq ainsi que ses listes de discussions. Il fournit également
	des informations générales sur la sécurité ainsi que des actualités 
	et des rapports.

<item> <url name="Linux Security"
	id="http://www.linuxsecurity.com/">. Informations générales 
	concernant la sécurité Linux (outils, actualités, ...) Le plus utile
	est la page de 
	<url name="documentation principale" id="http://www.linuxsecurity.com/resources/documentation-1.html">.

<item> <url name="Linux firewall and security site" id="
	http://www.linux-firewall-tools.com/linux/">. Informations générales
	concernant les pare-feux Linux et les outils pour les contrôler et les
	administrer.
</list>

<sect>Comment Debian gère la sécurité&nbsp;?
<p>
Afin d'avoir un aperçu général de la sécurité dans la Debian GNU/Linux,
vous devriez prendre note de tous les différents problèmes que Debian 
rencontre afin de fournir un système sécurisé :

<list>

<item>Les problèmes Debian sont toujours traités ouvertement, même ceux liés
à la sécurité. Comme le déclare le 
<url name="Contrat Social Debian" id="http://www.debian.org/social_contract"> :
<em>
Nous ne cacherons pas les problèmes.
Nous garderons toujours notre base de données des rapports de bogues ouvertes
au public. Les rapports que les utilisateurs archivent en ligne seront 
immédiatement visible aux autres.
</em>
Les problèmes de sécurité sont abordés ouvertement sur la liste de discussion 
debian-security.
Les Commissions de Sécurité Debian sont envoyées sur les listes de discussions 
publiques (interne et externe) et publiées sur les serveurs publiques.

<item>Debian suit les problèmes de sécurité de très près. L'équipe de la sécurité
se tient à jour par rapport aux sources liées à la sécurité, la plus importante 
étant <url name="Bugtraq" id="http://www.securityfocus.com/cgi-bin/vulns.pl">,
en étant aux aguets de paquets avec des problèmes de sécurité et qui pourraient
être inclus dans Debian.

<item>Les mises à jour liées à la sécurité sont les premières priorités. Lorsqu'un
problème survient dans un paquet Debian, la mise à jour est préparée aussi vite 
que possible et est répartie sur nos versions stable et unstable, y compris sur 
toutes les architectures.

<item>Les informations concernant la sécurité sont centralisées en un point unique,
<url id="http://security.debian.org/">.

<item>Debian essaye toujours d'améliorer la sécurité globale concernant les 
nouveaux projets de la distribution, comme les vérifications automatiques des 
signatures de paquets.

<item>Debian essaye de fournir un nombre profitable d'outils liés à la sécurité 
pour l'administration système et la surveillance. Les développeurs essayent 
solidement d'intégrer ces outils avec la distribution de façon à renforcer 
les règles de sécurité. Les outils disponibles sont : vérificateurs d'intégrité,
outils d'audit, outils de durcissement, outils pour pare-feux, outils de détection 
d'intrusion, etc... 

<item>Les responsables de paquets sont avertis des problèmes de sécurité. 
Ceci conduit à de nombreuses installations de services "sécurisés par défaut" 
ce qui peut engendrer certaines limites, parfois, à son utilisation normale.
Toutefois, Debian essaye d'équilibrer les problèmes de sécurité et la facilité 
d'administration, par exemple, les systèmes ne sont pas installés désactivés comme 
sur les distributions de la famille BSD. Dans tous les cas, quelques problèmes 
spéciaux, tels les programmes setuid, font partie de la 
<url id="http://www.debian.org/doc/debian-policy/" name="Politique Debian">.

</list>

<p>
Ce même document essaye d'imposer, en outre une distribution sécurisée recommandable,
une source d'information sur la sécurité spécifique à la Debian qui complète d'autres
documents liés à la sécurité concernant les outils utilisés par Debian ou le système 
d'exploitation lui-même (voir  <ref id="references">).

<chapt>Avant et pendant l'installation

<sect>Choisir un mot de passe pour le BIOS
<p>
Avant d'installer un système d'exploitation sur votre ordinateur, établissez un 
mot de passe pour le BIOS et désactivez les séquences de boot afin de rendre 
inutilisable le démarrage à partir d'une disquette, d'un cdrom ou de tout autre
périphérique. Sinon un pirate n'a besoin que d'un accès physique et d'une disquette 
de démarrage pour accéder au système complet.

<p>
Désactiver le démarrage sans mot de passe est solution encore meilleure.
Ceci peut être efficace pour un serveur car il n'est pas redémarré très souvent.
Le mauvais point de cette méthode est que le redémarrage nécessite l'intervention 
d'une personne ce qui peut poser des problèmes si la machine n'est pas facilement
accessible.

<sect>Choisir un schéma de partitionnement intelligent
<p>
Un schéma de partitionnement intelligent dépend de l'utilisation de la 
machine. Une bonne règle est d'être assez large avec vos partitions et
de faire attention aux facteurs suivants :

<list>
<item>Toutes arborescences de répertoires auxquelles un utilisateur a 
accès, telles que /home et /tmp, se doivent d'être sur une partition 
séparée. Ceci réduit le risque qu'un utilisateur malveillant remplisse
votre point de montage "/" et rende votre système inutilisable. (Note: 
Ceci n'est pas forcément vrai car il existe toujours de l'espace pour 
l'utilisateur root et qu'un utilisateur normal ne pourra remplir).

<item>Toute partition qui peut fluctuer, par exemple /var (surtout 
/var/log) devrait être également sur une partition séparée. Sur un
système Debian, vous devriez créer /var un petit peu plus grand que la 
normale car les paquets téléchargés (apt cache) sont stockés dans 
/var/apt/cache/archives.

<item>Toute partition où vous voulez installer des logiciels ne faisant 
pas partie de la distribution devrait être sur une partition séparée.
Se référant au Standard Hiérarchique des Fichiers, ceci devrait être 
/opt ou /usr/local. Si ce sont des partitions séparées, elles ne seront 
pas effacées si vous devez réinstaller Debian.

<item>D'un point de vue sécurité, il est bien d'essayer de déplacer les 
données statiques sur une partition donnée et de monter celle-ci en 
lecture seule. Encore mieux, mettre les données sur un périphérique en 
lecture seule. Voir ci-dessous pour plus d'infos.
</list>

<sect>Ne pas se connecter à Internet tant que tout n'est pas prêt

<p>Le système que vous êtes sur le point d'installer ne devrait pas 
être connecté à Internet pendant l'installation. Ceci peut paraître 
stupide mais c'est généralement le cas. Étant donné que le système 
va installer et activer les services immédiatement, si le système est
connecté à Internet et que les services ne sont pas configurés correctement 
vous les exposez à des attaques.

<p>Noter également que certains services peuvent avoir des trous de 
sécurité qui ne sont pas encore réglés dans les paquets que vous 
utilisez pour l'installation. Ceci est généralement vrai si vous 
installez depuis de vieux médias (comme les CDroms). Dans ce 
cas, il se peut que votre système soit compromis avant même la 
fin de l'installation !

<p>Attendu que l'installation et les mises à jours peuvent être 
faites par Internet vous pourriez penser que cela serait une bonne idée 
d'utiliser cette caractéristique lors de l'installation. Si le système 
va être connecté directement à Internet (et pas protégé par un pare-feux 
ou NAT), il est plus judicieux de l'installer sans connexion 
à Internet et d'utiliser un miroir local de paquets des sources de 
paquets Debian et les mises à jours de sécurité. Vous pouvez mettre en 
place des miroirs de paquets en utilisant un autre système connecté à 
Internet et des outils spécifiques Debian (si ce n'est pas un système 
Debian) tels que <package>apt-move</package> ou
<package>apt-proxy</package> ou tout autre outil de miroir pour fournir 
l'archive aux systèmes installés.

<sect>Définir un mot de passe root
<p>
Définir un bon mot de passe est la condition de base pour avoir un 
système sécurisé.

<sect>Activer les mots de passe masqués et mots de passes MD5
<!-- J'ai change ombrés par masqués car plus significatif. Le terme de shadow peut être conservé
car c'est le processus "shadow" dans son ensemble. jpg -->
<p>
A la fin de l'installation, il vous sera demandé si les mots de passe
masqués doivent être activés. Répondez oui à cette question, ainsi les 
mots de passe seront stockés dans le fichier <file>/etc/shadow</file>.
Seul l'utilisateur root et le groupe shadow ont accès en lecture à ce 
fichier, ainsi aucun utilisateur ne sera en mesure de récupérer une copie
de ce fichier afin d'essayer de le pirater à l'aide de logiciels adéquats.
Vous pouvez basculer entre les mots de passe masqués et les mots de passes 
normaux à n'importe quel moment en utilisant <tt>shadowconfig</tt>. 
De plus, pendant l'installation il vous sera demandé si vous voulez 
utiliser les mots de passe MD5. Ceci est généralement une bonne idée étant 
donné qu'il permet des mots de passe plus longs et une meilleure encryption.

<p>Lire davantage sur les mots de passes masqués sur 
<url
name="Shadow Password"
id="http://www.linuxdoc.org/HOWTO/Shadow-Password-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/Shadow-Password.txt.gz</file>).

<sect>Administrer le nombre minimum de services nécessaire

<p>
Les services sont des programmes tels que les serveurs ftp et les 
serveurs web. Attendu qu'ils doivent <em>écouter</em> les connexions
entrantes afin de répondre aux requêtes d'ordinateurs externes voulant 
se connecter au vôtre. Les services sont parfois vulnérables (entendez par 
là qu'ils peuvent être compromis par certaines attaques) et ce sont des
risques de sécurité. <!-- ne peut on pas utiliser facteurs risques plutôt que 
risques de sécurité? Il me semble que ca passerait mieux. jpg -->

<p>
Vous ne devriez pas installer les services dont vous n'avez pas besoin 
sur votre machine. Chaque service installé peut introduire de nouveaux, 
non évidents (ou connus), trous de sécurité sur votre ordinateur.

<p>
Comme vous le savez déjà, lorsque vous installez un service donné la 
démarche par défaut est de l'activer. 
Dans une installation Debian par défaut sans services installés, 
l'empreinte des services actifs est assez faible et est même plus faible  
quand on parle des services "réseaux". 
L'empreinte de la Debian 2.1 n'était pas aussi ténue que celle de la Debian 
2.2 (quelques services inetd étaient actifs par défaut) et dans la Debian 
2.2 le service rpc est activé à l'installation. 
Rpc est installé par défaut car il est nécessaire à de nombreux services, 
par exemple NFS, pour tourner sur un système bien spécifique. Cependant, 
Il peut être facilement retiré, voir <ref id="disableserv"> sur la manière 
de le désactiver.

<p>
Lorsque vous installez un nouveau service réseau (daemon) sur votre 
système Debian GNU/Linux, il peut être activé de deux façons : via le 
super daemon inetd (une ligne sera ajouté à <file>/etc/inetd.conf</file>) 
ou via un programme qui se fixe à vos interfaces réseaux. Ces programmes 
sont contrôlés via les fichiers <file>/etc/init.d</file> qui sont appelés 
lors du démarrage au moyen du mécanisme de SysV (ou un autre) en utilisant 
des liens symboliques dans <file>/etc/rc?.d/*</file> (pour plus 
d'informations sur la manière dont cela est fait lire
<file>/usr/share/doc/sysvinit/README.runlevels.gz</file>).

<!-- La traduction de deamon existe => démon. Pourquoi ne pas l'employer? jpg -->
<p>
Si vous voulez néanmoins avoir certains services mais vous les utilisez 
rarement, utilisez les commandes update, par exemple 'update-inetd' et
 'update-rc.d' pour leur suppression du processus de démarrage.

<sect1 id="disableserv">Désactivation de services daemon 

<p>
La désactivation d'un daemon est relativement simple. Il y a différentes
méthodes :
<list>

<item>supprimer les liens de <file>/etc/rc${runlevel}.d/</file> ou renommer
les liens (de sorte qu'ils ne commencent pas avec 'S')

<item>renommer le script (<file>/etc/init.d/_nom_service_</file>)
sous un autre nom (par exemple <file>/etc/init.d/OFF._nom_service_</file>)

<item>retirer le droit d'exécution du fichier 
<file>/etc/init.d/_nom_service_</file>.


<item>éditer le script <file>/etc/init.d/_nom_service_</file> pour le voir 
s'arrêter immédiatement.
</list>

<p>Vous pouvez supprimer les liens de /etc/rc${runlevel}.d/ manuellement ou
en utilisant <tt>update-rc.d</tt> (voir <manref section="8"
name="update-rc.d">). Par exemple, vous pouvez désactiver l'exécution d'un 
service dans le niveau d'exécution multi-utilisateur en faisant :

<example>
update-rc.d stop XX 2 3 4 5 .
</example>

<p>S'il vous plaît, veuillez noter que, si vous <em>n'utilisez</em> pas 
<package>file-rc</package>, <tt>update-rc.d -f _service_ remove</tt>
ne fonctionnera pas correctement, étant donné que <em>tous</em> les liens 
ont été supprimés, seul la réinstallation ou la mise à jour du paquet 
engendrera la recréation de ces liens (ce n'est probablement pas ce que 
vous voulez). Si vous pensez que cela n'est pas intuitif, vous avez sans 
doute raison (voir <url
id="http://bugs.debian.org/67095" name="Bug 67095">. Depuis la page de man :

<example>
Si n'importe quel fichier /etc/rcrunlevel.d/[SK]??nom existe déjà alors
  update-rc.d ne fera rien. C'est pour cela que l'administrateur système 
  peut réarranger les liens,  pourvu qu'il reste au moins un lien
  qui n'a pas vu sa configuration récrite.
</example>

<p>Si vous utilisez <package>file-rc</package> toutes les informations 
concernant le démarrage des services est géré par un fichier de configuration
commun et est maintenu même si les paquets sont retirés du système.

<p>Vous pouvez utilisez TUI (Text User Interface)<--!Dois-je le traduire. Comm de jpg: Je ne pense pas.-->
fourni par <package>rcconf</package> pour faire tous ces changements facilement
(<prgn>rcconf</prgn> fonctionne pour file-rc ainsi que pour les niveaux 
d'exécutions normaux System V).

<p>Les autres (non recommandées) méthodes de désactivation de services sont :
<tt>chmod 644 /etc/init.d/daemon</tt> (mais ceci donne un message d'erreur au
démarrage), ou modifier le script <file>/etc/init.d/daemon</file> (en ajoutant
une ligne <prgn>exit 0</prgn> au début ou en commentant la partie 
<tt>start-stop-daemon</tt>). Étant donné que les fichiers init.d sont des 
fichiers de configurations, ils ne seront pas récris lors d'une mise à jour.

<p>Malheureusement, contrairement à d'autres systèmes d'exploitations (UNIX), 
les services dans la Debian ne peuvent être désactivés en modifiant les fichiers
dans <file>/etc/default/_nomservice_</file>.

<p>FIXME&nbsp;: Ajouter des informations sur les démons de manipulation utilisant file-rc
<!-- J'ai utilisé démon au lieu de deamon. Quelle uniformisation? jpg -->

<sect1 id="inetd">Désactivation des services inetd
<p>
Vous devriez arrêter tous les services non nécessaires sur votre système, comme
echo, chargen, discard, daytime, time, talk, ntalk et  r-services 
(rsh, rlogin et rcp) qui sont considérés fort dangereux (utilisez ssh à la place).
Après la désactivation de ceux-ci, vous devriez vérifier si vous avez 
réellement besoin du daemon inetd. De nombreuses personnes préfèrent 
utiliser les daemons plutôt que d'appeler des services via inetd. Le 
La possibilité d'utiliser des "denial of service" sur inetd existe, ce
qui peut augmenter notablement la charge de la machine. Si vous désirez
toujours lancer un service du genre d'inetd, tournez-vous plutôt vers un
daemon inetd plus configurable tel xinetd ou rlinetd.

<p>
Vous pouvez désactiver les services en éditant directement 
<file>/etc/inetd.conf</file>, mais Debian offre un meilleur moyen 
de faire ceci :
<tt>update-inetd</tt> (qui commente les services de manière à ce qu'ils 
soient facilement réactivés). Vous pouvez supprimer le daemon telnet 
en exécutant cette commande pour changer le fichier de configuration
et redémarrer le daemon (dans ce cas le service est désactivé) :

<example>
/usr/sbin/update-inetd --disable telnet
</example>
<!-- # /etc/init.d/inetd restart N'est pas nécessaire étant donné que la 
page de man dit que update-inetd envoi un SIGHUP, 
commenté tel suggéré par Dariusz Puchalak -->

<p>Si vous désirez des services en attente, mais qui n'écoutent pas toutes
les adresses IP de votre hôte, vous voudrez peut-être utiliser des fonctions
non documentées de inetd.<!-- FIXME write the information sent
by Alexander to the debian-security mailing list -->. Ou utiliser un autre 
daemon tel que <prgn>xinetd</prgn>.

<sect>Lire les listes de discussions debian sur la sécurité

<p>Cela ne fait pas de mal de jeter un oeil à la liste de discussion 
debian-security-announce, où des conseils et solutions pour les paquets 
sont annoncés par l'équipe sécurité de Debian, ou sur la liste 
debian-security@lists.debian.org, où vous pouvez participer aux discussions
à propos de différentes choses liées à la sécurité Debian.

<p>De façon à recevoir d'importantes alertes concernant les mises à jour liées 
à la sécurité, envoyez un émail à 
<url name="debian-security-announce-request@lists.debian.org"
id="mailto:debian-security-announce-request@lists.debian.org"> avec le mot
"subscribe" dans le sujet du courrier. Vous pouvez également vous inscrire à 
cette liste via la page web sur 
<url name="http://www.debian.org/MailingLists/subscribe"
id="http://www.debian.org/MailingLists/subscribe">

<p>Cette liste de discussion a peu de trafic, et en vous inscrivant vous 
serez tenu au courant des mises à jour pour la distribution Debian.
Cela vous permet de télécharger rapidement les nouveaux paquets sans les bogues, 
ce qui est relativement important dans le maintien d'un système sécurisé. (Voir
<ref id="update"> pour les détails.)

<chapt>Après l'installation

<sect>Attribuer un mot de passe à LILO ou GRUB 
<p>
N'importe qui peut obtenir facilement un shell root et changer 
vos mots de passes en entrant au prompt de boot "&lt;nom-de-votre-imageboot&gt; 
init=/bin/sh". Après le changement du mot de passe et le redémarrage du
système, la personne à un accès root illimité et peut faire tout ce qu'il 
veut sur le système. Après ceci, vous n'aurez plus d'accès root sur votre machine,
vu que vous ne connaîtrez pas le mot de passe.
<p>
Pour être sûr que cela ne puisse pas se produire, vous devriez attribuer un
mot de passe au démarrage. Vous avez le choix entre un mot de passe global et un 
mot de passe pour une image donnée.

<p>
Pour LILO, vous avez besoin d'éditer le fichier /etc/lilo.conf et ajouter les lignes
"password" ainsi que "restricted" comme dans l'exemple suivant.

<example>
image=/boot/2.2.14-vmlinuz
   label=Linux
   read-only
   password=piratemoi
   restricted
</example>

<p>
Une fois terminé, relancer lilo. Omettre la ligne "restricted" entraîne une attente 
de mot de passe, en dépit des paramètres passés à LILO.
Les permissions par défaut pour le fichier /etc/lilo.conf accorder à root les 
droits de lecture et d'écriture et permettre un accès en lecture seule pour le groupe
de configuration de lilo, à savoir root.

<p>
Si vous utilisez GRUB plutôt que LILO, éditez <file>/boot/grub/menu.lst</file>
et ajouter les deux lignes suivantes en début (en remplaçant, bien sûr, "piratemoi" par
le mot de passe désiré). Ceci empêche les utilisateurs d'éditer les options de démarrage.
"timeout 3" indique un délai de 3 secondes avant que grub démarre l'option par défaut.

<example>
timeout 3
password piratemoi
</example>

Pour aller plus loin dans le durcissement de l'intégrité du mot de passe, vous 
pourriez entreposer le mot de passe sous une forme cryptée. L'utilitaire grub-md5-crypt 
génère un hachage de mot de passe qui est compatible avec l'algorithme du mot de passe 
grub (md5). Pour spécifier à grub qu'un mot de passe sous le format md5 va être 
utilisé, utilisez la directive suivante : 

<example>
timeout 3
password --md5 $1$bw0ez$tljnxxKLfMzmnDVaQWgjP0
</example>

Le paramètre --md5 a été ajouté pour informer grub d'effectuer la 
procédure d'authentification md5. Le mot de passe fourni est la version 
md5 cryptée de piratemoi. L'utilisation de la méthode md5 pour le mot de passe 
est préférable à la méthode précédente dont le mot de passe est en clair.
Plus d'information concernant les mots de passes grub se trouvent 
dans le paquet grub-doc.

<sect>Interdire le démarrage sur disquette
<p>
Le MBR par défaut dans Debian avant la version 2.2 ne fonctionnait pas 
comme le master boot record habituel et laissait un moyen facile de 
pénétrer un système :

<list>
<item>Appuyez sur shift lors du démarrage et le prompt du MBR apparaît

<item>Ensuite appuyez sur F, et votre système démarrera à partir d'une 
disquette de démarrage. Ceci peut être utilisé pour obtenir un accès root
au système.
</list>

<p>Ce comportement peut être modifié en entrant&nbsp;:

<example>
lilo -b /dev/hda
</example>

<p>Maintenant LILO est mis dans le MBR. Ceci peut être fait également
en ajoutant "boot=/dev/hda" au fichier lilo.conf. Il y a encore une 
autre solution qui désactivera complètement le prompt MBR&nbsp;:

<example>
install-mbr -i n /dev/hda
</example>

<p>
D'un autre côté, cette "porte dérobée", que de nombreuses personnes ne 
se méfient pas, peut aussi bien vous sauver la peau si vous rencontrez 
de gros problèmes, quelque soient les raisons, avec votre installation.

<p>FIXME vérifier si cela touche réellement la 2.2 ou seulement la 2.1?
INFO: Les disques de démarrage de la 2.2 n'installe pas le mbr, mais seulement LILO


<sect>Restreindre les accès aux consoles 

<p>Certaines règles de sécurité peuvent forcer les administrateurs à 
se connecter au système via une console avec leur identifiant/mot de passe 
puis devenir super utilisateur (avec <prgn>su</prgn> ou <prgn>sudo</prgn>). 
Cette règle est appliquée dans la Debian en éditant les fichiers
<file>/etc/login.defs</file> ou <file>/etc/securetty</file> lors de 
l'utilisation de PAM. Dans :

<list>

<item><file>login.defs</file>, éditez la variable CONSOLE qui défini un 
fichier ou une liste de terminaux sur lesquels la connexion de root est 
autorisée.

<item><file>securetty</file> en ajoutant/supprimant les terminaux auxquels 
les accès root seront autorisés.

</list>

<p>
En cas d'utilisation de PAM d'autres changements au processus de login,
qui peuvent inclure des restrictions aux utilisateurs et groupes à certains
moments, peuvent être configurés dans <file>/etc/pam.d/login</file>.
Une fonctionnalité intéressante qui peut être désactivée est la possibilité
de se connecter avec des mots de passe nuls (vides). Cette fonctionnalité
peut être limitée en enlevant <em>nullok</em> de la ligne :

<example>
auth       required   pam_unix.so nullok
</example>


<sect>Monter correctement les partitions
<p>
Lorsque vous monter une partition ext2, vous avez différentes options 
additionnelles pour l'appel mount ou pour le fichier <file>/etc/fstab</file>. 
Par exemple, ceci est mon entrée pour la partition /tmp :

<example>
/dev/hda7    /tmp    ext2    defaults,nosuid,noexec,nodev    0    2
</example>

<p>
Vous voyez la différence dans la section des options. L'option 
<tt>nosuid</tt> ignore complètement les bits setuid et setgid, tandis que
<tt>noexec</tt> interdit l'exécution de tout programme sur ce point de 
montage et <tt>nodev</tt> ignore les périphériques. Ceci semble bon mais cela 
<list>
<item>ne s'applique uniquement qu'au système de fichier ext2
<item>peut être contourner facilement
</list>

<p>L'option <tt>noexec</tt> évite aux binaires d'être exécutés directement mais
cela est facilement contournable :

<example>
alex@joker:/tmp# mount | grep tmp
/dev/hda7 on /tmp type ext2 (rw,noexec,nosuid,nodev)
alex@joker:/tmp# ./date
bash: ./date: Permission denied
alex@joker:/tmp# /lib/ld-linux.so.2 ./date
Sun Dec  3 17:49:23 CET 2000
</example>

<p>
Toutefois, de nombreux script kiddies utilisent des exploits qui essayent
de créer et d'exécuter des fichiers dans /tmp. S'ils n'ont pas d'indice,
ils tomberont sur un pépin. En d'autres termes, un utilisateur ne peut être 
abusé en exécutant un binaire compromis (genre cheval de troie) dans /tmp 
lorsqu'il a accidentellement ajouté /tmp dans son PATH.

<p>
Soyez aussi vigilant, certains scripts peuvent dépendre du fait que 
/tmp devienne exécutable. Notamment Debconf qui a (avait ?) quelques problèmes
concernant cela, pour plus d'information voir le bogue<url
id="http://bugs.debian.org/116448" name="116448">.

<p>
Ce qui suit est un exemple un plus poussé. Prenez note que, bien que /var peut être mis à 
noexec, certains logiciels tel Smartlist conservent ses programmes dans /var. Les mêmes 
conditions peuvent être appliquées à l'option nosuid.

<example>
/dev/sda6       /usr            ext2    defaults,ro,nodev       0       2
/dev/sda12      /usr/share      ext2    defaults,ro,nodev,nosuid        0       2
/dev/sda7       /var            ext2    defaults,nodev,usrquota,grpquota          0       2
/dev/sda8       /tmp            ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda9       /var/tmp        ext2    defaults,nodev,nosuid,noexec,usrquota,grpquota    0       2
/dev/sda10      /var/log        ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda11      /var/account    ext2    defaults,nodev,nosuid,noexec    0       2
/dev/sda13      /home           ext2    rw,nosuid,nodev,exec,auto,nouser,async,usrquota,grpquota                0       2
/dev/fd0        /mnt/fd0        ext2    defaults,users,nodev,nosuid,noexec      0       0
/dev/fd0        /mnt/floppy     vfat    defaults,users,nodev.nosuid,noexec      0       0
/dev/hda        /mnt/cdrom      iso9660 ro,users,nodev.nosuid,noexec            0       0
</example>


<sect1>Paramétrer /tmp en noexec
<p>
Soyez vigilant si vous mettez <file>/tmp</file> en noexec et que vous voulez installer de 
nouveaux logiciels étant donné que certains peuvent l'utiliser pendant l'installation.
Apt est un programme de ce genre (voir <url id="http://bugs.debian.org/116448">) si
<tt>APT::ExtractTemplates::TempDir</tt> n'est pas configuré correctement (voir <manref name="apt-extracttemplates" section="1">). 
Vous pouvez paramétrer cette variable dans le fichier <file>/etc/apt/apt.conf</file> vers 
un autre répertoire autre que <file>/tmp</file>qui aura les privilèges exec.

<p>
Concernant noxec, prenez conscience qu'il peut ne pas offrir le niveau de sécurité désiré.
Observons ceci :
<example>
$ cp /bin/date /tmp
$ /tmp/date
(n'exécute pas du au noexec)
$/lib/ld-linux.so.2 /tmp/date
(fonctionne correctement étant donné que date n'est pas exécuté directement)
</example>


<sect1>Paramétrer /usr en lecture seule
<p>
Si vous mettez <file>/usr</file> en lecture seule, vous serez dans l'incapacité
d'installer de nouveaux paquets sur votre système Debian GNU/Linux. Vous devrez, 
avant tout la remonter en lecture-écriture, puis installer les nouveaux paquets 
et enfin la remonter en lecture seule. La dernière version d'apt (dans la debian 
3.0 "woody") peut être configurer pour lancer des commandes avant et après 
l'installation de paquets, ainsi vous pouvez avoir envie de le configurer correctement.


<p>
Pour réaliser ceci, modifiez le fichier <file>/etc/apt/apt.conf</file> et ajoutez&nbsp;:
<example>
DPkg
  {
      Pre-Invoke  { "mount /usr -o remount,rw" };
      Post-Invoke { "mount /usr -o remount,ro" };
  };
</example>

<p>

Notez que le Post-invoke peut échouer avec un message d'erreur "/usr busy".
Ceci survient principalement lorsque vous utilisez des fichiers lors de la 
mise à jour et que ces fichiers sont justement mis à jour. C'est agaçant mais 
pas réellement un problème. Vérifier juste qu'ils ne soient plus utilisés puis
lancer le Post-Invoke manuellement.

<sect id="update">Se mettre à jour au niveau de la sécurité

<p>
Dès que des nouveaux bogues de sécurité sont décelés dans les paquets, les 
responsables Debian et les auteurs en amont les raccommodent dans la journée ou les
heures suivantes. Une fois le bogue résolu, un nouveau paquet est fourni sur 
name="http://security.debian.org"
id="http://security.debian.org">. Mettre la ligne suivante dans votre 
sources.list et vous serez mis à jour automatiquement quand vous mettrez à jour votre 
système.

<example>
deb http://security.debian.org/debian-security stable/updates main contrib non-free
</example>

<p>
La plupart des personnes, qui vivent dans un pays qui n'interdit pas 
l'importation ou l'utilisation de forte cryptographie, devrait aussi ajouter 
cette ligne :

<example>
deb http://security.debian.org/debian-non-US stable/non-US main contrib non-free
</example>

<p>
Si vous voulez, vous pouvez ajouter également les lignes deb-src à apt. Voir
<manref name="apt" section="8"> pour plus de détails.

<p>
Vous devriez procéder à des mises à jour fréquemment, la plupart des piratages 
est le résultat de vulnérabilités connues mais qui n'ont pas été raccommodées à 
temps, tel que le décrit le <url id="http://www.cs.umd.edu/~waa/vulnerability.html"
 name="texte de Bill Arbaugh"> (présenté au Symposium IEEE 2001 sur la Sécurité et 
 la Vie Privé).

<p>FIXME&nbsp;: Ajouter des informations sur comment est réalisé la signature des paquets, ce qui peut
être réalisé automatiquement par un cron job (Gros avertissement: DNS spoofing).

<sect>Personnalisation des accès aux utilisateurs

<sect1>Authentification utilisateur&nbsp;: PAM

<p>PAM (Pluggable Authentication Modules) permet aux administrateurs systèmes de 
choisir comment les applications authentifient les utilisateurs. Il est à noter 
que PAM ne peut rien faire tant qu'une application n'a pas été compilée avec le 
support de PAM. La plupart des applications embarquées dans la Debian 2.2 ont 
ce support d'inclus. Par ailleurs, Debian n'avait pas le support de PAM avant 
la 2.2. Chaque application avec le support PAM fourni un fichier de configuration 
dans <file>/etc/pam.d</file> qui peut être utilisé pour modifier son comportement.
La description qui suit est loin d'être complète, pour plus d'informations vous 
pouvez regarder le 
<url id="http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/pam.html" 
name="The Linux-PAM System Administrator's Guide"> (at the
<url id="http://www.kernel.org/pub/linux/libs/pam/"
name="primary PAM distribution site">)

<p>
PAM vous offre la possibilité de passer en revue plusieurs étapes d'authentification 
en une seule, à l'insu de l'utilisateur. Vous pouvez vous authentifier à une base 
de données Berkeley et à un fichier passwd normal, ainsi l'utilisateur pourra se 
connecter seulement si l'authentification est correcte des deux côtés.
Vous pouvez restreindre beaucoup de choses avec PAM comme vous pouvez laisser libre 
accès à votre système. Donc soyez prudent. Une ligne de configuration typique à un 
champ de contrôle comme deuxième élément.
<!-- Second in mine (old Debian v2.0 though), check this! (FIXME) (era) -->
Généralement, il devrait être paramétrer sur "requisite" qui retourne un échec de
connexion si un module échoue.
<!-- Lots of fields in mine are "required", please elaborate? (FIXME) (era) -->

<p>
La première chose que j'aime faire est ajouter le support MD5 aux applications 
PAM, étant donné que ceci protège le système contre les tentatives d'attaques par dictionnaire 
(les mots de passes peuvent être plus long en utilisant MD5). Les deux lignes suivantes
devraient être ajoutées à toutes les lignes dans /etc/pam.d/ qui alloue l'accès à la 
machine, tel <tt>login</tt> et <tt>ssh</tt>.

<example>
# Vérifier que libpam-cracklib soit installé avant sinon vous ne pourrez pas vous connecter.
password   required     pam_cracklib.so retry=3 minlen=12 difok=3
password   required     pam_unix.so use_authtok nullok md5
</example>

<p>
Que fait cette formule magique ? La première ligne charge le module 
PAM cracklib qui fourni la vérification de la longueur des mots de passe,
attend un nouveau mot de passe avec au minimum 12 caractères, une différence 
d'au-moins 3 caractères par rapport à l'ancien et autorise 3 essais.
La seconde ligne introduit le module d'authentification standard avec MD5 et 
autorise un mot de passe nul. La directive use_authok est nécessaire pour passer 
le mot de passe du module précédent.

<p>
Afin d'être sûr que l'utilisateur root peut se connecter uniquement à 
partir des terminaux locaux, la ligne suivante doit être activé dans 
<file>/etc/pam.d/login</file>:

<example>
auth     requisite  pam_securetty.so
</example>

<p>
Ensuite, vous devriez ajouter les terminaux depuis lesquels l'utilisateur 
root peut se connecter au système dans le fichier <file>/etc/security/access.conf</file>.  
La dernière mais pas la moindre, la ligne suivante devra être activée si vous 
voulez paramétrer les limites des utilisateurs.

<!-- FIXME: This is pam.d/login you're talking about, still? Elaborate? era -->
<example>
session  required   pam_limits.so
</example>

<p>
Ceci restreint les ressources du système auxquelles les utilisateurs sont
autorisées (voir ci-dessous  <ref id="user-limits">).  Par exemple, vous pouvez 
restreindre le nombre de connexions (d'un groupe d'utilisateurs donné ou 
tout le système) que vous avez, le nombre de processus, la taille de la mémoire, 
etc...

<p>
Maintenant, éditez <file>/etc/pam.d/passwd</file> et changez la première ligne.
Vous devriez ajouter l'option "md5" pour utiliser les mots de passe MD5, modifiez 
la longueur du mot de passe de 4 à 6 (ou plus) et fixez une longueur maximale si 
vous le désirez. La ligne devrait ressembler à quelque chose comme ceci :
<!-- J'ai change les verbes a l'infinitif par un imperatif qui me semble plus adequat, non? jpg -->

<example>
password   required   pam_unix.so nullok obscure min=6 max=11 md5
</example>

<p>
Si vous voulez protéger su, ainsi seulement quelques personnes pourront
l'utiliser pour devenir root sur votre système, vous avez besoin de 
créer un nouveau groupe "wheel" (c'est la meilleure façon, étant donné 
qu'aucun fichier n'a ces permissions d'attribuées). Ajouter root et les 
autres utilisateurs, qui auront la possibilité d'utiliser <tt>su</tt> pour
devenir root, à ce groupe. Ensuite, ajouter la ligne suivante dans 
<file>/etc/pam.d/su</file>:

<example>
auth        requisite   pam_wheel.so group=wheel debug
</example>

<p>
Ceci permet d'être sûr qu'uniquement les personnes du groupe wheel pourront 
utiliser <prgn>su</prgn> pour devenir root. Les autres utilisateurs ne 
seront pas capable de le devenir. En somme, ils seront confrontés à un message d'interdiction
s'ils essayent de devenir root.

<p>
Si vous désirez que seulement certains utilisateurs s'authentifient à un 
service PAM, on utilise les fichiers où sont stockés les utilisateurs autorisés (ou pas) à se 
connecter. Imaginons que vous ne vouliez autoriser que l'utilisateur 'ref' 
à se connecter via ssh. Vous le mettez dans <file>/etc/sshusers-allowed</file>
et écrivez ce qui suit dans <file>/etc/pam.d/ssh</file>:

<example>
auth        required    pam_listfile.so item=user sense=allow file=/etc/sshusers-allowed onerr=fail
</example>

<p>
La dernière étape, mais pas la moindre, est de créer le fichier <file>/etc/pam.d/other</file> et 
d'ajouter les lignes suivantes :

<example>
auth     required       pam_securetty.so
auth     required       pam_unix_auth.so
auth     required       pam_warn.so
auth     required       pam_deny.so
account  required       pam_unix_acct.so
account  required       pam_warn.so
account  required       pam_deny.so
password required       pam_unix_passwd.so
password required       pam_warn.so
password required       pam_deny.so
session  required       pam_unix_session.so
session  required       pam_warn.so
session  required       pam_deny.so
</example>

<p>
Ces lignes vont fournir une bonne configuration par défaut pour toutes
les applications qui supportent PAM (accès refusé par défaut).


<sect1 id="user-limits">Le fichier limits.conf 

<p>
Vous devriez sérieusement jeter un oeil à ce fichier. Ici voux pouvez
définir les limites par utilisateur des ressources. Si vous utilisez
PAM, le fichier <file>/etc/limits.conf</file> est ignoré et vous 
devriez utiliser <file>/etc/security/limits.conf</file> à la place.

<p>FIXME&nbsp;: Placer un fichier exemple de limits.conf ici

<sect1>Editer /etc/login.defs

<p>
La prochaine étape est d'éditer la configuration et action de base sur
la connexion de l'utilisateur.

<example>
FAIL_DELAY          10
</example>

Cette variable devrait être fixé à une valeur suffisamment grande de façon 
à rendre plus difficile les tentatives de connexion en utilisant la 
manière forte. Si un mauvais mot de passe est fourni, le pirate potentiel 
(ou le simple utilisateur !) doit attendre 10 secondes avant d'obtenir un 
nouveau prompt, ce qui est agaçant quand vous testez des mots de passe.
Prenez garde car ce paramétrage est inutile si vous utilisez un  
programme autre que getty, tel que mingetty par exemple.

<example>
FAILLOG_ENAB        yes
</example>

Si vous activez cette variable, les connexions échouées seront loggées.
Il est important d'en garder une trace pour attraper un éventuel pirate.

<example>
LOG_UNKFAIL_ENAB    yes
</example>

Si vous mettez la variable "FAILLOG_ENAB" à yes, alors il faudra mettre 
cette variable également à yes. Ceci sauvegardera les noms d'utilisateurs 
inconnus si la connexion échoue. Si vous faites cela, soyez sûr que les 
logs aient les bonnes permissions (640 par exemple avec un groupe adéquat 
tel adm), car souvent les utilisateurs entrent accidentellement leur mot de 
passe au lieu du nom d'utilisateur et vous ne voulez pas permettre aux 
autres de le voir.

<example>
SYSLOG_SU_ENAB      yes
</example>

<p>Ceci va activer l'écriture dans les logs de syslog des tentatives de 
<tt>su</tt>. Plutôt important sur des machines sérieuses mais noter que 
ceci peut aussi bien être à la base de problèmes.

<example>
SYSLOG_SG_ENAB      yes
</example>

<p>
La même chose que SYSLOG_SU_ENAB mais s'applique au programme <prgn>sg</prgn>.

<example>
MD5_CRYPT_ENAB      yes
</example>

<p>
Comme mentionné ci-dessus, les mots de passe MD5 réduit considérablement le 
problème des attaques par dictionnaires étant donné que vous pouvez utiliser des 
mots de passe plus long. Si vous utilisez slink, lisez les docs avant d'activer 
le MD5. D'ailleurs cela est paramétré dans PAM.

<example>
PASS_MAX_LEN        50
</example>

<p>
Si les mots de passe MD5 sont activés dans votre configuration PAM, 
alors cette variable devrait avoir la même valeur.

<sect1>Editer /etc/ftpusers

<p>
Ce fichier contient une liste d'utilisateurs qui ne sont pas autorisés 
à se connecter à l'hôte en utilisant ftp. Utiliser uniquement ce fichier 
si vous voulez rééllement autorisez le ftp (qui n'est, en général, pas 
recommandé car il utilise des mots de passe en clair). Si votre daemon 
supporte PAM, celui-ci peut-être utilisé pour permettre ou refuser 
certains services aux utilisateurs.

<sect1>Utilisation de su

<p>
Si vous avez réellement besoin que des utilisateurs deviennent super 
utilisateur sur votre système, par exemple pour installer des paquets 
ou ajouter des utilisateurs, vous pouvez utiliser la commande
<prgn>su</prgn> pour changer d'identité. Vous devriez essayer d'éviter 
toute connexion en tant que root et d'utiliser à la place <prgn>su</prgn>. 
En réalité, la meilleure solution est de supprimer su et de changer pour 
<prgn>sudo</prgn>, vu qu'il dispose de plus de caractéristiques que 
<prgn>su</prgn>. Cependant, <prgn>su</prgn> est plus commun vu qu'il est
utilisé sur beaucoup d'autres Unices.

<sect1>Utilisation de sudo

<p>
<prgn>sudo</prgn> autorise l'utilisateur à exécuter des commandes définies 
sous l'identité d'un autre utilisateur, même en tant que root. Si 
l'utilisateur est ajouté à
<file>/etc/sudoers</file> et est authentifié correctement, il est capable 
de lancer des commandes qui ont été définies dans 
<file>/etc/sudoers</file>. Les infractions, telles que les mots de passe 
incorrects ou les tentatives de lancement d'un programme dont vous n'avez 
pas les permissions, sont logguées et envoyées au root.

<sect1 id="user-restrict">Restriction des utilisateurs

<p>
Parfois, vous pensez avoir besoin d'utilisateurs créés dans votre système 
local de façon à fournir un service donné (service courrier pop3 ou
ftp). Avant tout, rappelez-vous que l'implémentation PAM dans Debian GNU/Linux 
vous autorise à valider les utilisateurs avec une grande variété de 
répertoires de services externes (radius, ldap, etc.) fourni par les paquets 
libpam.

<p>
Si des utilisateurs venaient à être créés et que le système pourrait être 
accessible à distance prenez en compte que l'utilisateur pourra se 
connecter au système. Ceci peut être résolu en donnant aux utilisateurs 
un shell null (<file>/dev/null</file>) (il devra être listé dans 
<file>/etc/shells</file>). Si vous voulez autoriser les utilisateurs à accéder 
au système mais leur limiter les mouvements, vous pouvez utiliser le fichier 
<file>/bin/rbash</file>, ce qui est équivalent à l'ajout de l'option <tt>-r</tt>
dans bash (<em>RESTRICTED SHELL</em> voir <manref name="bash"
section="1">). Veuillez noter que même avec un shell restreint, un utilisateur 
ayant accès à un programme interactif (qui peut permettre l'exécution d'un 
sous-shell) peut être capable de passer outre les limites du shell.

<p>
Debian ne fourni pas à l'heure actuelle (mais peut être dans le futur) le module
<file>pam_chroot</file>. Une alternative à cela est de chroot le service qui 
fourni les connexions à distances (ssh, telnet).

<p>
Si vous voulez restreindre <em>quand</em> les utilisateurs peuvent accéder au 
système, vous devrez personnaliser <file>/etc/security/access.conf</file> en 
fonction de vos besoins.

<sect2>Restriction de ssh pour les utilisateurs

<p>
Le serveur sshd de Debian ne vous autorisera pas à restreindre les mouvements 
des utilisateurs via le serveur étant donné que celui-ci est dépourvu de la 
fonction Chroot que la version commerciale (sshd2) possède (utilisation de 
"ChrootGroups" ou "ChrootUsers", voir <manref name="sshd2_config" section="5">). 
Toutefois, une rustine est disponible afin de vous permettre de le faire, elle 
peut être trouvée depuis 
<url id="http://bugs.debian.org/139047" name="Bug report 139047"> ou
<url id="http://www.cag.lcs.mit.edu/~raoul/"> (et sera peut-être appliquée 
au paquet OpenSSH dans le futur). Emmanuel <!-- Il ne manque pas un m a emmanuel la? jpg --> Lacour dispose d'un paquet avec 
cette fonctionnalité sur <url id="http://debian.home-dn.net/woody/ssh/">, 
quoique la compilation est recommandée. Une description de toutes les étapes 
nécessaires peut-être aperçue sur 
<url id="http://mail.incredimail.com/howto/openssh/"> (pratiquement tout est 
applicable à Debian même s'il est question de la RedHat 7.2).
Après l'application de la rustine, vous devez juste modifier le 
<file>/etc/passwd</file> en changeant le chemin personnel des utilisateurs 
(avec le jeton spécial <tt>/./</tt>):

<example>
joeuser:x:1099:1099:Joe Random User:/home/joe/./:/bin/bash
</example>

<p>
<em>Tous deux</em>, aussi bien les accès distants au shell que la copie via 
le tunnel ssh, seront restreints.

<p>
Il faut être sûr que tous les binaires et librairies soient présents dans le 
chemin chrooté pour les utilisateurs. Ces fichiers devraient appartenir à 
root pour éviter les fraudes de l'utilisateur (tel la sortie d'une prison chrooté).
Un échantillon pourrait inclure ceci :

<example>
./bin:
total 660
drwxr-xr-x    2 root     root         4096 Mar 18 13:36 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-r-xr-xr-x    1 root     root       531160 Feb  6 22:36 bash
-r-xr-xr-x    1 root     root        43916 Nov 29 13:19 ls
-r-xr-xr-x    1 root     root        16684 Nov 29 13:19 mkdir
-rwxr-xr-x    1 root     root        23960 Mar 18 13:36 more
-r-xr-xr-x    1 root     root         9916 Jul 26  2001 pwd
-r-xr-xr-x    1 root     root        24780 Nov 29 13:19 rm
lrwxrwxrwx    1 root     root            4 Mar 30 16:29 sh -> bash

./etc:
total 24
drwxr-xr-x    2 root     root         4096 Mar 15 16:13 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rw-r--r--    1 root     root           54 Mar 15 13:23 group
-rw-r--r--    1 root     root          428 Mar 15 15:56 hosts
-rw-r--r--    1 root     root           44 Mar 15 15:53 passwd
-rw-r--r--    1 root     root           52 Mar 15 13:23 shells

./lib:
total 1848
drwxr-xr-x    2 root     root         4096 Mar 18 13:37 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
-rwxr-xr-x    1 root     root        92511 Mar 15 12:49 ld-linux.so.2
-rwxr-xr-x    1 root     root      1170812 Mar 15 12:49 libc.so.6
-rw-r--r--    1 root     root        20900 Mar 15 13:01 libcrypt.so.1
-rw-r--r--    1 root     root         9436 Mar 15 12:49 libdl.so.2
-rw-r--r--    1 root     root       248132 Mar 15 12:48 libncurses.so.5
-rw-r--r--    1 root     root        71332 Mar 15 13:00 libnsl.so.1
-rw-r--r--    1 root     root        34144 Mar 15 16:10
libnss_files.so.2
-rw-r--r--    1 root     root        29420 Mar 15 12:57 libpam.so.0
-rw-r--r--    1 root     root       105498 Mar 15 12:51 libpthread.so.0
-rw-r--r--    1 root     root        25596 Mar 15 12:51 librt.so.1
-rw-r--r--    1 root     root         7760 Mar 15 12:59 libutil.so.1
-rw-r--r--    1 root     root        24328 Mar 15 12:57 libwrap.so.0

./usr:
total 16
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 .
drwxr-xr-x    8 guest    guest        4096 Mar 15 16:53 ..
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 bin
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 lib

./usr/bin:
total 340
drwxr-xr-x    2 root     root         4096 Mar 15 15:55 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rwxr-xr-x    1 root     root        10332 Mar 15 15:55 env
-rwxr-xr-x    1 root     root        13052 Mar 15 13:13 id
-r-xr-xr-x    1 root     root        25432 Mar 15 12:40 scp
-rwxr-xr-x    1 root     root        43768 Mar 15 15:15 sftp
-r-sr-xr-x    1 root     root       218456 Mar 15 12:40 ssh
-rwxr-xr-x    1 root     root         9692 Mar 15 13:17 tty

./usr/lib:
total 852
drwxr-xr-x    2 root     root         4096 Mar 15 15:37 .
drwxr-xr-x    4 root     root         4096 Mar 15 13:00 ..
-rw-r--r--    1 root     root       771088 Mar 15 13:01
libcrypto.so.0.9.6
-rw-r--r--    1 root     root        54548 Mar 15 13:00 libz.so.1
-rwxr-xr-x    1 root     root        23096 Mar 15 15:37 sftp-server
</example>


<sect1>Audit d'utilisateur à la main 

<p>
Si vous êtes paranoïaque, il se peut que vous vouliez ajouter aux 
utilisateurs un <file>.profile</file> qui configure son environnement 
de telle façon qu'ils ne peuvent pas retirer les capacités d'audit du 
shell (les commandes sont déposées dans <tt>$HISTFILE</tt>. Le 
<file>.profile</file> ne peut être paramétré ainsi :

<example>
HISTFILE=/home/_user_/.bash_history
HISTSIZE=100000000000000000
HISTFILESIZE=10000000000000000
set -o HISTFILE
set -o HISTSIZE
set -o HISTFILESIZE
export HISTFILE HISTSIZE HISTFILESIZE
</example>

<p>NB: l'attribut -o place la variable en lecture seule dans bash.

<p>
Afin que cela fonctionne, l'utilisateur ne doit pas être capable de 
modifier le <file>.profile</file> ou <file>.bash_history</file> mais 
doit avoir la possibilité de lire le premier et d'écrire dans le second.
Vous pouvez y parvenir facilement en changeant ces fichiers ainsi que le 
répertoire dans lequel ils sont de propriétaire (root) et en donnant les 
droits d'écriture aux utilisateurs du groupe du fichier des historiques.
Une autre option est l'utilisation du programme <prgn>chattr</prgn>.
     
<p>
Si vous êtes complètement paranoïaque et que vous voulez auditer toutes 
les commandes des utilisateurs, vous pouvez prendre les codes sources du 
bash, les éditer et récupérer dans un fichier toutes les commandes que 
l'utilisateur tape. Ou avoir <package>ttysnoop</package> constamment en 
attente de nouveaux ttys et reverser toutes les sorties dans un fichier.
Un autre programme utile est 
<url name="Snoopy" id="http://sourceforge.net/project/?group_id=2091">
qui est un programme transparent pour l'utilisateur qui se positionne
comme une librairie fournissant une encapsulation des appels execve(),
toute commande exécutée est loguée en utilisant la facilité <tt>authpriv</tt>
(généralement stocké dans <file>/var/log/auth.log</file> .
 <!-- FIXME: Debian package for snoopy??? --> <p>
Notez que vous ne pouvez pas utiliser la commande <prgn>script</prgn>
pour ceci étant donné qu'elle ne fonctionnera pas comme un shell (même 
si vous l'ajoutez à <file>/etc/shells</file>.

<sect1>Audit utilisateur complet

<p>
L'exemple précédent est une manière simple de configurer le contrôle 
utilisateur mais qui peut ne pas être pratique pour des systèmes 
complexes. Si cela est votre cas, vous devrez examiner <package>acct</package>,
l'utilitaire de comptes. Ceci archivera toutes les commandes ou processus 
du système au détriment de l'espace disque.

<p>
Lors de l'activation de la comptabilité, toutes les informations sur les processus et 
l'utilisateur sont conservés dans <file>/var/account/</file>, plus spécifiquement dans 
le fichier <file>pacct</file>. Le paquetage de comptabilité 
inclus des outils (<prgn>sa</prgn> et <prgn>ac</prgn>) afin d'analyser ces 
données.

<sect1>Inspection des profils utilisateurs

<p>
Si vous désirez <em>voir</em> ce que font les utilisateurs habituellement, 
comme l'heure à laquelle ils se connectent, vous pouvez utiliser la base 
de données <file>wtmp</file> qui contient toutes les informations 
concernant les connexions. Ce fichier peut être employé avec plusieurs 
utilitaires, parmi eux <prgn>sac</prgn> qui peut sortir un profil de chaque 
utilisateur montrant dans quel créneau horaire ils se connectent au système 
habituellement.

<p>
Dans le cas où vous avez la comptabilité activée, vous pouvez également utiliser 
les outils qu'elle fournit pour déterminer quand les utilisateurs accèdent au 
système et ce qu'ils exécutent.


<sect>Utilisation de tcpwrappers 

<p>
Les TCP wrappers ont été développés quand il n'y avait pas de réels filtres de 
paquets de disponible et que les contrôles d'accès étaient nécessaires.
Les TCP wrappers vous autorise à tolérer ou à refuser un service à un hôte 
ou a un domaine et vous permet de définir une règle par défaut pour les 
autorisations et les refus. Pour plus de détails, jeter un oeil à 
<manref name="hosts_access" section="5">.

<p>De nombreux services installés dans Debian sont soit :

<list>
<item>lancés via la service tcpwrapper (<file>tcpd</file>)
<item>compilés avec le support libwrapper.
</list>

<p>
D'un côté, des services sont configurés dans 
<file>/etc/inetd.conf</file>, ceci incluant telnet, ftp, netbios, swat
et finger (vous verrez que le fichier de configuration exécute avant 
tout <prgn>/usr/sbin/tcpd</prgn>). 


<--! Pas bien sur de mon interprétation :(. || Ca semble correct. jpg-->


D'un autre côté, même si un service 
n'est pas lancé par le super daemon <prgn>inetd</prgn>il peut, dans tous les cas, 
dépendre des règles du tcp wrapper 
Les services compilés avec support tcp wrappers dans Debian incluent 
ssh, portmap, in.talk, rpc.statd, rpc.mountd, gdm, oaf (the GNOME
activator daemon), nessus et beaucoup d'autres.

<p>
Tenir compte de ceci lorsque <prgn>tcpchk</prgn> est utilisé.
Vous pouvez ajouter des services, qui sont liés à la bibliothèque du wrapper,
dans les fichiers <file>host.deny</file> et <file>hosts.allow</file> mais 
<prgn>tcpchk</prgn> vous informera qu'il n'est pas capable de trouver ces 
services étant donné qu'il les cherche dans <file>/etc/inetd.conf</file>
(la page de manuel n'est pas totalement précise).

<p>
A présent, voici une petite astuce et probablement le plus petit système 
de détection d'intrusion disponible. Généralement, vous devriez disposer 
d'une politique correcte concernant le pare-feu en première ligne, puis 
disposer de tcp wrappers en seconde ligne de défense. Un petit truc est 
de mettre en place une commande SPAWN, <footnote>en tenant compte que <em>spawn</em>
puisse ne pas fonctionner</footnote>, dans /etc/hosts.deny qui envoi un mail 
à root quand un déclencheur wrapper pour service dénié est rencontré :

<example>
ALL: ALL: SPAWN ( \
  echo -e "\n\
  TCP Wrappers\: Connection refused\n\
  By\: $(uname -n)\n\
  Process\: %d (pid %p)\n\
  User\: %u\n\
  Host\: %c\n\
  Date\: $(date)\n\
" | /usr/bin/mail -s "Connection to %d blocked" root) &
</example>

<p><em>Attention</em>: L'exemple ci-dessus peut-être facilement "DoSé" en
soumettant énormément de connexions dans une période très courte. De 
nombreux courriers signifient de nombreuses E/S en envoyant uniquement 
quelques paquets.

<!--
# Could this example be more interesting? 
# It also relates to the next section (jfs)
#
# era: cf hosts_access(5) manual page,
# and why are you not using logger(1) here? (FIXME?)
#
#&lt;example&gt;
#ALL: ALL: SPAWN ( \
#  /usr/local/sbin/send_syslog %u %c %d )
#&lt;example&gt;

#  With send_syslog as:
##!/usr/bin/perl -w
#
#use Sys::Syslog qw(:DEFAULT setlogsock);
#
#$user=shift(@ARGV) || 'unkown';
#$host=shift(@ARGV) || 'unkown';
#$service=shift(@ARGV) || 'unkown';
#setlogsock('unix');
#openlog("alert",'', 'user');
#syslog('warning', 'Connection from %s at %s to %s blocked.', ($user, $host, $service) );
#closelog();
#
#exit 0;
-->

<sect id="log-alerts">L'importance des logs et des alertes

<p>
Comment les logs et les alertes sont traités est un problème sérieux à prendre 
en compte sur un système sécurisé. Il est facile de voir que, même si le 
système est parfaitement configuré, il n'est sécurisé qu'à 99%. 

Si le 1% vient à arriver, et
qu'il n'y a pas de mesures de sécurité mises en place, premièrement, first, trouvez les et,
dans un deuxième temps, lancez l'alerte, le système n'est pas sécurisé du tout.

<p>Il y a une grande partie sur l'analyse des log qui ne peut pas être couverte ici,
une bonne ressource d'information est 
<url name="Couterpane's Log Analysis Resources"
id="http://www.counterpane.com/log-analysis.html">.

<sect1>Configurer l'endroit où les alertes sont envoyées 

<p>
Debian livre une configuration standard de syslog (dans /etc/syslog.conf)
qui archive les messages dans les des fichiers appropriés dépendant de la 
facilité du système. Vous devriez être familier avec ceci; jetez un oeil 
au fichier <file>syslog.conf</file> et à la documentation si vous ne l'êtes 
pas. Si vous avez l'intention de maintenir un système sécurisé, vous devriez 
être conscient de l'endroit où les logs sont envoyées ainsi ils <!-- log est masculin. jpg --> ne sont 
pas perdus dans la nature.

<p>
Par exemple, envoyer des messages à la console est également utile pour de 
nombreux systèmes de production. Mais pour de nombreux systèmes semblables 
il est également important d'ajouter une nouvelle machine qui servira de 
serveur de log<--! traduction de loghost. Je me suis permis de traduire.jpg-->(il reçoit les logs de tous les autres 
systèmes).

<p>
Le mail du root devrait être pris en considération également, de nombreux
contrôles de sécurité (tel <package>snort</package>) envoient des alertes 
dans la boite aux lettres de root. Celle-ci pointe généralement sur le 
premier utilisateur créé sur le système (vérifier /etc/aliases). Prenez 
garde à envoyer le courrier du root à un endroit où il sera lu (soit localement 
ou à distance).

<--! ES pluriel d'alias ? => C'est pas aliases ? Non, c'est un adverbe a la base ;) On reste donc invariable, amha. Je propose donc la correction. jpg-->

<p> Il y a d'autres comptes et alias "rôles" sur votre système. Sur un petit
système, c'est probablement le plus simple de s'assurer que tous ces alias
pointent vers le compte root, et que ce mail pour root est retransmis vers
la boîte aux lettres personnelle de l'administrateur système.

<p>FIXME: Il serait intéressant de dire comment un système Debian peut
envoyer/recevoir des messages SNMP relatifs à des problèmes de sécurité (jfs).
Voir : <package>snmptraglogd</package>, <package>snmp</package> et 
<package>snmpd</package>.


<sect1>Utilisation d'un hôte d'archivage (loghost)<--! voir pour une 
 traduction sur la liste. Serveur de log? jpg -->

<p>
Un <!-- Serveur de log-->loghost est un hôte qui recueille les données des syslog à travers 
le réseau. Si une machine est piratée, l'intrus n'est pas capable de 
dissimuler ses traces, à moins qu'il ne pirate également le <!-- Serveur de log-->loghost. Par 
conséquent, le <!-- Serveur de log-->loghost devrait être suffisamment sécurisé. Faire d'une 
machine un loghost est simple. Il suffit juste de démarrer le syslogd 
avec "syslogd -r" et un nouveau loghost est né. De façon à rendre cela 
permanent dans Debian, éditer <file>/etc/init.d/sysklogd</file> et 
changer la ligne

<example>
SYSLOGD=""
</example>
par
<example>
SYSLOGD="-r"
</example>

Ensuite, configurer les autres machines afin qu'elles envoient les données 
au loghost.  Ajouter une entrée comme celle qui suit dans 
<file>/etc/syslog.conf</file>:

<example>
facilité.niveau           @votre_loghost
</example>

Voir la documentation pour savoir ce qu'on peut utiliser à la place de 
<em>facilité</em> et <em>niveau</em> (ils ne devraient pas être mot pour mot comme 
ceci). Si vous voulez tout archiver à distance, il suffit d'écrire :

<example>
*.*                       @votre_loghost
</example>

dans votre syslog.conf. 
Archiver à distance ainsi que localement est la meilleure solution 
(le pirate peut estimer avoir couvert ses traces après la suppression 
des fichiers de logs locaux). Voir les pages de manuel <manref name="syslog"
section="3">, <manref name="syslogd" section="8"> et <manref
name="syslog.conf" section="5"> pour toutes informations complémentaires.

<--! ES garder fichiers de log ou de logs ?  => apparemment ils utilisent sur
la liste journaux d'événements ...-->

<sect1>Permissions du fichier d'archivage

<p>Il est important de décider à la fois comment les alertes sont utilisées,
mais aussi qui y accède, i.e. qui peut lire ou modifier les fichiers de log
(si on utilise pas un hôte d'archivage). Les alertes de sécurité que l'attaquant
peut changer ou désactiver sont de peu de valeur en cas d'intrusion.

<!-- Il devrait être expliqué pourquoi après l'installation ce n'est pas déjà
fait, jfs -->

<p>
Certaines permissions de fichiers de log ne sont pas parfaites après l'installation.
Premièrement <file>/var/log/lastlog</file> et <file>/var/log/faillog</file> n'ont
pas besoin  d'être lisible par les utilisateurs normaux. Dans le lastlog vous
pouvez voir qui s'est connecté récemment, et dans le faillog vous voyez un
résumé des connexions qui ont échouées. L'auteur recommande de les chmod'er tous
les 2 en 660. Faites un tour rapide de vos fichiers de log et décidez avec
beaucoup d'attention quels fichiers de log vous rendez lisible/inscriptible par
un utilisateur avec un UID différent de 0 et un groupe autre que 'adm' ou 'root'.

<p>
Je voudrais souligner que les permissions du fichier de log d'apache sont
vraiment défaillantes de par le fait que l'utilisateur apache est le
propriétaire de ses fichiers de log. Si un utilisateur obtient un shell par une
voie dérobée d'apache, il pourra facilement supprimer les fichiers de log.

<!--
# C'est assez personnel, à mon humble avis, car c'est du au fait que
# les privilèges root sont abandonnés au démarrage. Je préfère qu'un attaquant
# efface les fichiers de log d'un service plutot tous mes fichiers de log système.
# Dans tous les cas, cela peut être amélioré en changeant les permissions 
# utilisateur après rotation
-->


<sect id="chroot">Utilisation de chroot

<p><prgn>chroot</prgn> est une des possibilités les plus puissantes pour
restreindre un daemon ou un utilisateur ou un autre service. Imaginez juste
une prison autour de votre cible, dont votre cible ne peut s'échapper
(normalement, mais il y a encore beaucoup de conditions qui permettent de
s'échapper d'une telle prison). Si vous ne faites pas confiance à un utilisateur,
vous pouvez créer un environnement à racine modifiée pour lui. Cela peut utiliser
pas mal d'espace disque comme vous avez besoin de copier tous les exécutables
nécessaires, ainsi que les librairies, dans la prison. Même si l'utilisateur
fait quelque chose de malveillant, la portée des dégâts sera limitée à la prison.

<p>Un bon exemple pour ce cas est, si vous n'authentifiez pas avec 
<file>/etc/passwd</file> mais utilisez LDAP ou MySQL à la place. Donc votre
daemon-ftp a seulement besoin d'un binaire et peut être de quelques librairies.
Un environnement chrooté serait une excellent amélioration de la sécurité&nbsp;;
si un nouvel exploit est découvert pour ce daemon-ftp, alors les attaquants 
pourront seulement exploiter l'UID de l'utilisateur-daemon-ftp et rien d'autre.

<p>Bien sur, beaucoup d'autres daemons pourraient bénéficier de ce genre
d'aménagement aussi.

<p>Cependant, soyez averti qu'une prison chroot peut être brisée si
l'utilisateur qui y évolue est le super-utilisateur. Donc, vous devez
faire s'exécuter le service comme un utilisateur non-privilégié. En
limitant son environnement vous limitez les fichiers lisibles/inscriptibles
par tout le monde auxquels le service peut accéder, ainsi, vous limitez les
possibilités d'élévation de privilège en utilisant des vulnérabilités du
système local. Même si dans cette situation vous ne pouvez être complètement
sur qu'il n'y a aucun moyen pour un attaquant intelligent de s'échapper d'une
façon ou d'une autre de la prison. L'utilisation des seuls programmes serveurs
qui ont la réputation d'être surs est une bonne mesure de sécurité supplémentaire.
Même des failles minuscules comme des références de fichier ouverts peuvent être
utilisées par un attaquant talentueux pour s'introduire dans le système. Après
tout <prgn>chroot</prgn> n'a pas été conçu comme un outil de sécurité mais comme
un outil de test.

<!-- FIXME: Cette information devra être vérifiée quand woody sortira -->
<!-- AA : Service de nom Internet ? serveur de résolution de nom) -->

<p>Note additionnelle, le BIND par défaut de la Debian (le service de nom 
Internet) n'est pas livré chrooté par défaut; en fait, aucun daemon n'est
chrooté. Cela pourrait changer dans la version woody (3.0).

<!-- Il faudrait peut etre signifier ici que BIND est un outil très vulnérable.
il est impératif de mettre les dernières mises à jour? jpg -->

<p>Il y a aussi des logiciels (pas dans la Debian actuellement mais qui pourraient
fournis dans le futur) qui peuvent aider à configurer des environnements chroot.
<prgn>makejail</prgn> par exemple, peut créer et mettre à jour une prison chroot
avec de petits fichiers de configuration. il essaie aussi de deviner et 
<!-- AA ou peu de fichiers ? -->
d'installer dans la prison tous les fichiers requis par le daemon.
Plus d'information à <url id="http://www.floc.net/makejail/">. <prgn>Jailer</prgn> est un outil similaire qui peut être récupéré sur 
<url id="http://www.balabit.hu/downloads/jailer/">



<sect1>Configuration noyau

<sect1 id="kernel-conf">Configuration des options réseaux du noyau

<p>FIXME&nbsp;: Pas de contenu

<p>
Beaucoup de fonctionnalités du kernel peuvent être modifiées en cours
de fonctionnement en envoyant quelque chose (via la commande echo) dans
le système  de fichier /proc ou en utilisant sysctl. En entrant
<tt>sysctl -A</tt> vous pouvez voir ce que vous pouvez configurer et quelles
sont les options. Vous aurez seulement en de rares occasions à éditer 
quelque chose ici, mais vous pouvez augmenter la sécurité de cette manière aussi.

 
<!-- FIXME: /proc/sys/ ne devrait-il pas préfixer tout ça ? era -->

<example>
net/ipv4/icmp_echo_ignore_broadcasts = 1
</example>

C'est un «&nbsp;émulateur windows&nbsp;» parce que ça agit comme windows sur 
les ping de broadcast si celui-ci est positionné à 1.
<!-- Ce qui veut dire quoi exactement? Simplement que ça ignore les broadcasts? FIXME -->
Sinon, ça ne fait rien.

<example>
net/ipv4/icmp_echo_ignore_all = 0
</example>

<p>Si vous ne voulez pas bloquer ICMP avec votre pare-feux, activez ceci.
<!--
Est ce que ça veut dire, si vous voulez bloquer ICMP mais pas vec votre parefeux? FIXME
-->

<example>
net/ipv4/tcp_syncookies = 1
</example>

<p>Cette option est à double tranchant. D'un côté elle protège votre système
contre le syn flooding; d'un autre côté elle viole les standards définis (RFCs).
Cette option est assez stupide car elle floode l'autre partie de la même manière
qu'elle vous flood, ainsi l'autre partie est aussi occupée. Si vous voulez changer
cette option vous pouvez aussi la changer dans
<tt>/etc/network/options</tt> en positionnant <tt>syncookies=yes</tt>.

<example>
/proc/sys/net/ipv4/conf/all/log_martians = 1
</example>

<p>Les paquets avec des adresses impossibles (du fait de routes éronnées) sur
votre système sont logués.

<p>
Voici un exemple pour configurer tout ça ainsi que d'autres trucs utiles. Vous
devriez ajouter cette information à un script dans
<file>/etc/network/interface-secure</file> (le nom est donné comme exemple)
et l'appeler à partir de <file>/etc/network/interfaces</file> comme ça:

<example>
auto eth0
iface eth0 inet static
        address xxx.xxx.xxx.xxx
        netmask 255.255.255.xxx
        broadcast xxx.xxx.xxx.xxx
        gateway xxx.xxx.xxx.xxx
        pre-up /etc/network/interface-secure

</example>

<example>
# Script-name: /etc/network/interface-secure
# Modifies some default behaviour in order to secure against 
# some TCP/IP spoofing & attacks
#
# Contributed by Dariusz Puchalak  
#
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
                                           # broadcast echo protection enabled
echo 0 > /proc/sys/net/ipv4/ip_forward     # ip forwarding disabled
echo 1 > /proc/sys/net/ipv4/tcp_syncookies # TCP syn cookie protection enabled
echo 1 >/proc/sys/net/ipv4/conf/all/log_martians 
                                           # Log packets with impossible addresses
                         # but be careful with this on heavy loaded web servers
echo 1 > /proc/sys/net/ipv4/ip_always_defrag 
                                           #  defragging protection always enabled
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses 
                                           # bad error message protection enabled

# now ip spoofing protection
for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
        echo 1 > $f
done

# and finally some more things:
# Disable ICMP Redirect Acceptance
for f in /proc/sys/net/ipv4/conf/*/accept_redirects; do
        echo 0 > $f
done

for f in /proc/sys/net/ipv4/conf/*/send_redirects; do
      echo 0 > $f
done

# Disable Source Routed Packets
for f in /proc/sys/net/ipv4/conf/*/accept_source_route; do
        echo 0 > $f
done

# Log Spoofed Packets, Source Routed Packets, Redirect Packets
for f in /proc/sys/net/ipv4/conf/*/log_martians; do
        echo 1 > $f
done
</example>

<--! Fin de traduction je fais la partie suivante --> :)

<sect1 id="kernel-fw">Configuring firewall features 
<!--- Configuration des composants du firewall. Je laisse en non traduit. jpg -->
<p>
De façon à avoir des privilèges de pare-feux, soit pour protéger le 
système local ou d'autres <em>derrière</em> lui, le noyau nécessite 
d'être compilé avec les options correspondant aux pare-feux. Le 
noyau standard 2.2 de la Debian (également 2.2) fourni <prgn>ipchains</prgn>
qui est un pare-feux pour filtrer les paquets, le noyau standard de 
la Debian 3.0 (noyau 2.4) fourni lui le pare-feux <prgn>iptables</prgn> (netfilter). Les anciennes distributions Debian auront besoin de rustines 
appropriées pour le noyau (Debian 2.1 utilise le noyau 2.0.34).

<p>
Dans tous les cas, il est relativement facile d'utiliser un noyau 
différent de celui fourni par Debian. Vous pouvez trouver des noyaux 
pré-compilés sous forme de paquets que vous pouvez facilement installer 
sur le système Debian. Vous pouvez également télécharger les sources du 
noyau en utilisant <package>kernel-source-X</package> et construire des 
paquets de noyau personnalisé en utilisant <package>make-kpkg</package>.

<p>
La mise en place de pare-feux dans Debian est abordée d'avantage dans 
<ref id="firewall-setup">.

<sect id="kernel-patch">Ajout de rustines pour le noyau
<p>FIXME: More content

<p>Debian GNU/Linux fourni quelques rustines pour le noyau Linux qui améliorent 
sa sécurité. Ceci inclus 

<list>

<item>Linux Intrusion Detection (dans la paquet <package>lids-2.2.19</package>)

<item>Linux Capabilities (dans la paquet <package>lcap</package>)

<item>Linux Trustees (dans la paquet <package>trustees</package>)

<item>NSA Enhanced Linux (dans la paquet <package>selinux</package> also 
available from <url id="http://www.coker.com.au/selinux/" name="the developer's website">)

<item><url name="kernel-patch-2.2.18-openwall"
id="http://packages.debian.org/kernel-patch-2.2.18-openwall">

<item><package>kernel-patch-2.2.19-harden</package>

<item>Linux capabilities (dans la paquet <package>lcap</package>

<item>IPSEC kernel support (dans la paquet <package>kernel-patch-freeswan</package>)

<item><package>kernel-patch-int</package>

</list>

<sect>Sécurisation des transferts de fichiers

<p>
La copie des fichiers d'une manière sécurisée d'un hôte à un autre peut être 
accomplie en utilisant "scp" qui est inclus dans le paquet ssh. Cela fonctionne 
comme rcp mais à l'avantage d'être complètement chiffré, ainsi les méchants ne 
peuvent pas s'imaginer ce que vous êtes en train de copier.

<!-- Je sais bien que c'est la traduction mot pour mot, "méchant", mais ne devrait on pas
préférer intrus? jpg -->
<sect>Limites et contrôle des systèmes de fichiers

<sect1>Utilisation de quotas

<p>
Avoir une bonne politique quant aux quotas est importante, vu qu'elle 
empêche les utilisateurs de remplir le(s) disque(s) dur(s).

<p>
Vous pouvez utiliser deux systèmes de quotas différents : quota utilisateur 
et quota groupe. Comme vous l'avez probablement deviné, le quota utilisateur 
limite la quantité d'espace qu'un utilisateur peut avoir, quota groupe 
quant à lui fait la même chose pour les groupes. Retenez ceci quand vous 
calculerez les tailles des quotas.

<p>
Il y a peu de points importants auxquels il faut penser dans la mise en place 
d'un système de quota :

<list>
<item>Garder les quotas suffisamment petit, ainsi les utilisateurs ne dévoreront pas 
votre espace disque.

<item>Garder les quotas suffisamment grands, ainsi les utilisateurs ne 
se plainderont pas. Pensez aussi à leur réserver de la place pour qu'ils puissent
conserver leurs mails sur une longue période.
<item>Utilisez des quotas sur tous les espaces accessibles en écriture par les 
utilisateurs, /home aussi bien que /tmp.
</list>

<p>
Chaque partition/répertoire auquel les utilisateurs ont un accès en écriture 
complet devraient avoir les quotas d'activés. Rechercher ces partitions et 
répertoires et calculer une taille réalisable qui combine disponibilité et 
sécurité.

<p>
Bon, maintenant vous désirez utiliser les quotas. Avant tout, vous avez besoin 
de vérifier si vous avez activé le support du quota dans votre noyau. Si non,
vous devrez le recompiler.<!-- FIXME: Comment verifier si les quotas sont activés? Qu'y a t'il
à faire pour recompiler? --> Après cela, contrôlez si le paquet "quota" est 
installé. Si non vous en aurez également besoin.

<p>
L'activation des quotas pour des systèmes de fichiers différents est 
aussi facile que la modification du paramètre <tt>defaults</tt> en 
<tt>defaults,usrquota</tt> dans votre fichier <file>/etc/fstab</file>.
Si vous avez besoin des quotas par groupe, remplacez 
<tt>usrquota</tt> par <tt>grpquota</tt>. Vous pouvez également utiliser les 
deux. Ensuite, créez des fichiers vides quota.user et quota.group à la racine du 
système de fichier sur lequel vous voulez utiliser les quotas (<tt>touch
/home/quota.user /home/quota.group</tt> pour un système de fichier /home).

<p>
Redémarrer le quota en faisant <tt>/etc/init.d/quota stop;/etc/init.d/quota
start</tt>. Maintenant les quotas devraient tourner et leurs tailles peuvent 
être configurées.

<p>
L'édition de quotas pour un utilisateur spécifique (disons "ref") peut être 
réalisée en faisant <tt>edquota -u ref</tt>. Les quotas par groupes peuvent 
être modifiés avec <tt>edquota -g &lt;group&gt;</tt>. Ensuite, paramétrez
les quotas soft et hard et/ou les quotas pour inodes correspondant.

<!-- Quota permet d'etablir des quotas par utilisateur, ou par groupe d'utilisateurs.
Il faut faire attention dans cette partie de traduction qui amha est a revoir pour affiner.jpg -->

<p>
Pour plus d'informations concernant les quotas, voir la page de manuel de la 
commande quota et le quota mini-howto
(<file>/usr/share/doc/HOWTO/en-html/mini/Quota.html</file>).

<p>
Vous pouvez apprécier ou non <package>lshell</package>, puisque il 
transgresse le FHS. Aussi prenez note que pam_limits.so peut vous
fournir la même fonctionnalité et <package>lshell</package>
est actuellement <url id="http://bugs.debian.org/93894" name="orphaned">
<!-- Section dupliquée "Logfile permissions" supprimée (era) -->
<!-- Section dupliquée "Setting up setuid check" supprimée (era) -->

<sect1>chattr/lsattr

<p>
Ces deux commandes sont très utiles mais elles fonctionnent uniquement
pour le système de fichier ext2. Avec "lsattr", vous pouvez lister les 
attributs d'un fichier et avec "chattr" vous pouvez les 
modifier. Notez que ces attributs ne sont pas les mêmes choses que les 
permissions. De nombreux attributs existent mais seuls les plus 
importants sont cité s ici. Il n'y a que deux indicateurs <--! flags attente meilleure traduction. Indicateur convient mieux? jpg -->
qui peuvent être paramétrés par le super utilisateur.

<p>
Avant tout, il y a le indicateur "a". S'il est placé sur un fichier, celui-ci 
ne pourra être ouvert qu'en ajout. Cette propriété est utile pour certain 
des fichiers dans /var/log/, quoique vous devriez penser au fait qu'ils 
soient déplacés de temps en temps par les scripts de rotation de logs.

<p>
Le second drapeau est le drapeau "i" pour inchangeable (dans le sens qu'on ne peut pas le modifier)<--! a traduire immutable. Fait.jpg -->.
S'il est placé sur un fichier, celui-ci ne peut-être ni modifié ni effacé 
ou encore renommé et aucun ne peut l'utiliser. Si vous ne voulez pas que 
les utilisateurs viennent trifouiller vos fichiers de configuration, vous 
pouvez mettre ce drapeau et enlever l'accès en lecture. De plus, ceci peut 
vous offrir un peu plus de sécurité contre les intrus, car le pirate peut-être 
troublé par le fait qu'il ne puisse pas supprimer un fichier. Néanmoins, 
vous ne devriez pas penser que le pirate est aveugle. Après tout, il a pénétré 
votre système.

 <p>Notez que lsattr et chattr sont uniquement disponible sur les systèmes de fichiers ext2.

<sect1 id="check-integ">Vérifier l'intégrité des systèmes de fichiers

<p>
Êtes-vous sûr que le /bin/login présent sur votre disque dur soit le même 
que celui que vous aviez installé il y a de cela quelques mois&nbsp;? Que faire 
si c'est une version piratée, qui enregistre les mots de passe entrés 
dans un fichier caché ou les envoi en clair à travers internet&nbsp;?

<p>
La seule méthode pour avoir un semblant de protection est de vérifier 
vos fichiers tous les heures/jours/mois (je préfère quotidiennement) 
en comparant l'actuel et l'ancien md5sum de ce fichier. Deux fichiers 
ne peuvent avoir le même md5sum (le MD5 est basé sur 128 bits, ainsi 
la chance que deux fichiers différents aient le même md5sum est 
approximativement de un sur 3.4e3803), donc de ce côté tout est ok, à 
moins que quelqu'un est piraté également l'algorithme qui créé les 
md5sums sur cette machine. Ceci est extrêmement difficile et très 
improbable. Vous devriez vraiment prendre en compte que la vérification 
de vos binaires est très importante étant donné que ceci est un moyen 
facile de reconnaître des changements sur vos binaires. Les outils 
couramment utilisés pour ceci sont <package>sXid</package>,
<package>AIDE</package> (Advanced Intrusion Detection Environment),
<package>TripWire</package> (non-free; la nouvelle version sera en GPL),
<package>integrit</package> et <package>samhain</package>.

<p>Installer <tt>debsums</tt> vous aidera à vérifier l'intégrité du 
système de fichier en comparant le md5sum de chaque fichier avec celui 
utilisé dans l'archive des paquets Debian. Mais faîtes attention, ces 
fichiers peuvent facilement être modifiés.

<p>De plus, vous pouvez remplacer <package>locate</package> par 
<package>slocate</package>. slocate est une version sécurisée améliorée de 
GNU locate. Lors de l'utilisation de slocate, l'utilisateur ne peut voir 
que les fichiers auxquels il a réellement accès et vous pouvez exclure tous 
les fichiers et répertoires du système.


<sect1>Mise en place de la vérification setuid

<p>
Debian fournit une tâche cron qui s'exécute quotidiennement dans 
<file>/etc/cron.daily/standard</file>. Cette tâche cron exécutera le script 
<prgn>/usr/sbin/checksecurity</prgn> qui sauvegardera l'information sur les 
changements.

<p>Pour que cette vérification soit faite vous devez positionner
<tt>CHECKSECURITY_DISABLE="FALSE"</tt> dans <file>/etc/checksecurity.conf</file>.
Notez, que c'est la configuration par défaut, donc à moins que vous ayez changé
quelque chose, cette option sera déjà positionnée à "FALSE".

<p>Le comportement par défaut est de ne pas envoyer cette information au super-utilisateur
mais à la place de garder une copie journalière des changements dans
<file>/var/log/setuid.changes</file>. Vous devrez positionner
CHECKSECURITY_EMAIL (dans <file>/etc/checksecurity.conf</file>) à 'root' pour
que cette information lui soit envoyée. voir <manref
name="checksecurity" section="8"> pour plus d'info sur la configuration.
 

<sect>Autres recommandations

<sect1>N'utilisez pas de logiciels dépendant de svgalib

<p>
SVGAlib est très bien pour les amoureux de la console comme moi mais 
dans le passé il a été prouvé plusieurs fois qu'elle est très incertaine.
Les exploits contre <prgn>zgv</prgn> sont sortis et il était facile de 
devenir root. Essayez d'éviter l'utilisation de programmes utilisant la 
SVGAlib chaque fois que c'est possible.

<!-- FIXME: move this to policy section if there ever is one? -->

<chapt id="sec-services">Sécuriser les services de votre système

<p>Les services présents sur un système peuvent être sécurisés de deux façons :

<list>

<item>Les rendre accessibles uniquement à certains points d'accès (interfaces).

<item>Les configurer correctement ainsi seuls les utilisateurs habilités 
pourront les utiliser.

</list>

<p>Restreindre les services ainsi ils ne seront accessibles que depuis un 
endroit bien spécifique. Ces restrictions peuvent-être faites au niveau 
du noyau (pare-feu), configurez les services pour écouter uniquement sur 
une interface définie (certains services ne fournissent peut-être pas cette 
fonctionnalité) ou utilisez tout autre méthode, par exemple la rustine vserver 
pour linux (pour 2.4.16) peut-être utilisée pour forcer les processus à 
utiliser qu'une interface.

<p>Concernant les services lancés par <prgn>inetd</prgn> (telnet,
ftp, finger, pop3...) il est à noter que inetd ne peut pas être configuré afin 
que des services écoutent uniquement sur une interface précise. Toutefois, 
 le programme <prgn>xinetd</prgn> substitue cela par l'inclusion d'un <tt>raccourci</tt> pour parer ce cas. Voir  <manref name="xinetd.conf" section="5">.


<example>
service nntp
{
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = news
        group           = news
        server          = /usr/bin/env
        server_args     = POSTING_OK=1 PATH=/usr/sbin/:/usr/bin:/sbin/:/bin
+/usr/sbin/snntpd logger -p news.info
        bind            = 127.0.0.1
} 
</example>

<p>
Les paragraphes suivants détaillent comment déterminer les services qui peuvent 
être configurés correctement s'appuyant sur une utilisation définie.

<sect>Sécurisation de ssh

<p>
Si vous utilisez toujours telnet au lieu de ssh, vous devriez prendre 
une pause dans la lecture de ce manuel pour remedier à cela. Ssh devrait 
être utilisé pour toutes les connexions distantes à la place de telnet.
A une époque où il est facile de renifler le trafic Internet et d'obtenir les 
mots de passe en clair, vous devriez utiliser uniquement les protocoles qui 
utilisent la cryptographie. Par conséquent, effectuez maintenant un 
<tt>apt-get install ssh</tt> sur votre système.

<p>
Encourager tous les utilisateurs de votre système à utiliser ssh au lieu de 
telnet, ou encore mieux, désinstallez telnet/telnetd. De plus, vous devriez 
éviter de vous connecter au système en utilisant ssh en tant que root et préférer 
l'utilisation de méthodes alternatives pour devenir root tel <tt>su</tt> ou 
<tt>sudo</tt>. Enfin, le fichier sshd_config, dans /etc/ssh, devrait ainsi être 
modifié pour accroître la sécurité :

<list>
<item><tt>ListenAddress 192.168.0.1</tt> <p>Faîtes écouter ssh seulement sur une interface donnée, juste au cas où vous
en avez plus d'une (et ne voulez pas que ssh y soit disponible) où si vous ajoutez,
dans le futur, une nouvelle carte réseau (et ne voulez pas de connexions ssh dessus).


<item><tt>PermitRootLogin No</tt>

<p>Essayez autant que possible de ne pas autoriser de connexion en tant que root.
Si quelqu'un veut devenir root via ssh, deux logins sont maintenant nécessaires et
le mot de passe root ne peut être attaqué par moulinette via SSH.

<!--force brute =>trouver une autre traduction. Moulinette est aussi employé dans le milieu en reference
a l'action repetitive. jpg  -->


<item><tt>Listen 666</tt>

<p>Change le port d'écoute, ainsi l'intrus ne peut être complètement sûr de 
l'exécution d'un daemon sshd (soyez prévenus, c'est de la sécurité par l'obscurité). 
<!-- AA security through obscurity => je te propose c'est un manque de clarté au niveau sécurité--> <!-- AA Non, je crois pas "Security through obscurity" est une notion de sécurité 
exprimant la croyance (fausse) qu'en cachant des informations sur un système on
le rend sûr... -->
<!-- je tranche <Op. jpg -->


<item><tt>PermitEmptyPasswords no</tt>
<p>Les mots de passe vides sont un affront au système de sécurité.

<item><tt>AllowUsers alex ref</tt>
<p>Autorise seulement certains utilisateurs à avoir accès via ssh à cette machine.

<item><tt>AllowGroups wheel admin</tt>
<p>Autorise seulement certains membres de groupes à avoir accès via ssh à cette
machine. AllowGroups et AllowUsers ont des directives équivalentes pour interdire
l'accès à la machine. Sans surprise elles s'appellent
"DenyUsers" et "DenyGroups".

<item><tt>PasswordAuthentication yes</tt>

<p>Il vous appartient complètement de décider ce que vous voulez faire.
Il est plus sûr d'autoriser l'accès à la machine uniquement aux utilisateurs
avec des clés ssh placées dans le fichier <file>~/.ssh/authorized_keys</file>. 
Si c'est ce que vous voulez, positionnez cette option à "no".
<!-- FIXME: Qu'est ce que ça veut dire? Est-ce "plus sûr" de positionner à "no"
 (era) --> <!-- jfs, à mon humble avis oui car on place la clé de l'hôte se
 connectant sur votre serveur et l'authentification est faite avec cette clé -->

</list>

<p>Pour finir, soyez conscient que ces directives proviennent d'un fichier de
configuration OpenSSH. Actuellement, il y a 3 daemons ssh couramment utilisés,
ssh1, ssh2, et OpenSSH par les gens d'OpenBSD. Ssh1 était le premier daemon
ssh disponible et est toujours le plus couramment utilisé (il y a des rumeurs
qu'il y aurait même un portage windows). Ssh2 a beaucoup d'avantages par rapport
à ssh1 excepté qu'il est diffusé sous une licence non-libre.
<!-- AA closed-source => non-libre ? => oui il me semble ou bien code fermé, à voir sur la liste -->
OpenSSH est un daemon ssh complètement libre, qui supporte à la fois ssh1 et 
ssh2. OpenSSH est la version installée sur la Debian quand le paquetage 'ssh' 
est choisi.

<p>
Vous pouvez obtenir plus d'informations concernant la mise en place de SSH 
avec le support PAM dans les <url
id="http://lists.debian.org/debian-security/2001/debian-security-200111/msg00395.html"
name="archives de la liste de discussion sécurité">.

<sect>Sécurisation de Squid

<p>
Squid est l'un des plus populaires serveurs proxy/cache et certains problèmes 
de sécurité sont à prendre en compte.
Le fichier de configuration par défaut de Squid refuse toutes les requêtes 
d'utilisateurs.
Vous devriez configurer Squid pour permettre aux utilisateurs, hôtes ou réseaux 
de confiance  une Liste de Contrôle d'Accès (ACL) sur <file>/etc/squid.conf</file>.
Voir le 
<url name="Guide d'utilisateur Squid"
id="http://squid-docs.sourceforge.net/latest/html/book1.htm"> pour plus d'informations 
à propos des règles ACL.

<p>
De même, si il n'est pas configuré correctement, n'importe qui peut relayer un message
par l'intermédiaire de Squid, puisque les protocoles HTTP et SMTP sont désignés de façon similaire.
Le fichier de configuration par défaut interdit l'accès au port 25. Si vous voulez
autoriser les connexions sur ce port, il vous faudra l'ajouter dans la liste des Safe_ports
(ports autorisés). Cependant, ce n'est <em>PAS</em> recommandé.

<p>Installer et configurer le serveur mandataire/cache correctement représente seulement une
partie de la sécurisation de votre site. Une autre tâche nécessaire consiste dans l'analyse 
des logs de Squid pour assurer que tout fonctionne comme il se doit.
Il y a quelques paquets dans Debian GNU/Linux qui peuvent
aider l'administrateur dans cette tâche.
Les paquets suivant sont disponible dans la woody (Debian 3.0):

<list>
<item><package>calamaris</package> - Analyseur de log pour Squid ou Oops proxy.
<item><package>modlogan</package> - Un analyseur modulaire de fichier logs.
<item><package>sarg</package> - Squid Analysis Report Generator.
</list>

<p>FIXME: Ajouter de plus amples informations sur la sécurité sur Squid Accelerator Mode

<sect>Sécurisation FTP

<p>
Si vous avez réellement besoin d'utiliser FTP (sans l'emballer avec sslwrap ou à 
l'intérieur d'un tunnel SSL ou SSH), vous devriez "chrooter" ftp dans le répertoire 
home de l'utilisateur, ainsi l'utilisateur est incapable de voir autre chose que 
ses propres répertoires. Autrement, il peut parcourir votre système comme s'il 
avait un shell. Vous pouvez ajouter la ligne suivante dans votre 
<file>proftpd.conf</file> dans la section global pour activer ce chroot :

<example>
DefaultRoot ~
</example>

<p>
Redémarrez proftpd par <tt>/etc/init.d/proftpd restart</tt> et vérifiez
si vous pouvez sortir de votre propre répertoire home.

<P>
Pour prévenir Proftpd d'attaques Dos avec l'utilisation de  ../../.., 
ajouter la ligne suivante dans <file>/etc/proftpd.conf</file>:

<tt>DenyFilter \*.*/</tt>

<p>
Rappelez-vous toujours que le FTP envoi les identifiants et les mots de 
passe d'authentification en clair (ceci n'est pas un problème si vous 
fournissez un service public anonyme) et il existe de meilleures 
alternatives dans Debian pour cela. Par exemple, <prgn>sftp</prgn> (fourni par <package>ssh</package>). Il existe également d'autres 
implémentatations de SSH pour d'autres systèmes d'exploitation : <url 
id="http://www.chiark.greenend.org.uk/~sgtatham/putty/" name="putty">
et <url id="http://www.cygwin.com" name="cygwin"> par exemple.

<sect>Sécurisation de l'accès à X Window System

<p>
Actuellement, les terminaux X sont de plus en plus utilisés dans les 
entreprises où un seul serveur est nécessaire pour un grand nombre de stations de 
travail. Ceci peut-être dangereux car vous devez autoriser le serveur 
de fichier à se connecter aux clients (le serveur X d'un point de vue 
X. X intervertit la notion de client et de serveur). Si vous 
suivez les (très mauvaises) suggestions de nombreuses docs, vous 
tapez <tt>xhost +</tt> sur votre machine. Ceci autorise tout client X 
à se connecter à votre système. Pour une sécurité légèrement meilleure, 
vous pouvez utiliser la commande <tt>xhost +hostname</tt> à la place qui permet  
d'autoriser uniquement les accès depuis des hôtes spécifiques.

<p>
Une solution encore meilleure serait d'utiliser un tunnel ssh pour X et 
d'encrypter toute la session. Ceci est fait automatiquement lors de 
l'utilisation de ssh pour se connecter sur une autre machine. Ceci doit 
être activé dans /etc/ssh/ssh_config en paramétrant <tt>X11Forwarding</tt> à <tt>yes</tt>. A l'heure de SSH, vous devriez abandonner complètement 
le contrôle d'accès basé dur xhost. <!-- FIXME: check. The text said "has to be disabled" [sic] -->

<p>
Pour une sécurité accrue, si vous n'avez pas besoin d'accéder à X depuis 
d'autres machines, désactivez-le du port 6000 en tapant simplement :

<tt>startx -- -nolisten tcp</tt>

<p>
Ceci est le comportement par défaut dans Xfree 4.0 (le serveur X fourni dans 
la Debian 3.0).<!-- FIXME : il me semble que dans la 3.0, c le 4.1 en vigueur. jpg --> Si vous utilisez Xfree 3.3.6 (vous avez donc la Debian 2.2 
d'installé) vous pouvez éditer <file>/etc/X11/xinit/xserverrcc</file>
afin d'avoir quelque chose ressemblant à ceci :

<example>
#!/bin/sh
exec /usr/bin/X11/X -dpi 100 -nolisten tcp
</example>

<p>Si vous utilisez XDM, mettre <file>/etc/X11/xdm/Xservers</file> à :
<tt>:0 local /usr/bin/X11/X vt7 -dpi 100 -nolisten tcp</tt>

<p>Plus d'infos sur la sécurité X Window dans <url name="XWindow-User-HOWTO"
id="http://www.linuxdoc.org/HOWTO/XWindow-User-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/XWindow-User-HOWTO.txt.gz</file>).

<p>FIXME: Ajouter des informations sur debian-security pour avoir le cheminement de configuration des fichiers de
XFree 3.3.6.  

<sect1>Vérifiez votre gestionnaire d'affichage
<p>
Si vous voulez seulement avoir un gestionnaire d'affichage installé pour une
utilisation locale (en ayant un joli login graphique, c'est tout), assurez vous
que le XDMCP (X Display Manager Control Protocol) est désactivé. Dans XDM vous
pouvez faire ça avec cette ligne dans <tt>/etc/X11/xdm/xdm-config</tt>:


<example>
DisplayManager.requestPort:     0
</example>

<p>Normalement, tous les gestionnaires d'affichages sont configurés par défaut
pour ne pas démarrer les services XDMCP dans la Debian.

<sect>Sécurisation de l'accès à l'impression (Le problème lpd et lprng)


<p>Imaginez, vous arrivez au travail et l'imprimante crache une quantité 
infinie de papier car quelqu'un est en train de provoquer un déni de service 
sur votre daemon d'impression. Méchant, n'est ce pas? Donc, gardez vos serveurs 
d'impression particulièrement sûrs. Cela veut dire qu'il est nécessaire de 
configurer votre service d'impression pour qu'il autorise seulement les 
connexions d'un ensemble de serveurs de confiance. Pour ce faire, ajoutez 
les serveurs auxquels vous voulez autoriser l'impression à votre 
 <file>/etc/hosts.lpd</file>. 

<p>
Cependant, même si vous faites cela, le daemon lpr accepte les connexions entrantes
sur le port 515 de n'importe quelle interface. Vous devriez réfléchir au filtrage
par un pare-feux des connexions provenant de réseaux/hôtes qui ne sont pas
autorisés à imprimer (le daemon lpr ne peut être limité pour écouter seulement
sur une adresse IP donnée).

<!-- FIXME
<p>Bien sûr, vous pourriez aussi prendre les sources de lpr/lprng et les changer
de façon à ce que la fonction connect se fasse uniquement sur "127.0.0.1".
 apt-get source lpr et patcher l'appel bind (finet)
 -->
<p>Lprng doit être préféré à lpr car il peut être configuré pour faire du contrôle
d'accès basé sur l'IP. Vous pouvez spécifier l'interface sur laquelle on se 
lie (cependant d'une manière un peu bizarre)

<!-- FIXME: questionner Craig Small au sujet de son post dans debian-private du 
19 octobre 2001 -->

<p>Si vous utilisez une imprimante sur votre système, mais seulement localement,
vous ne voulez pas partager ce service sur le réseau. Vous pouvez considérer
l'utilisation d'autres systèmes d'impression, comme celui fournit par
<package>cups</package> ou <url name="PDQ" id="http://pdq.sourceforge.net/">
qui est basé sur les permissions utilisateurs du périphérique <file>/dev/lp0</file>.
 
<p>De plus, <prgn>cups</prgn> peut être configuré pour se lier à l'interface de
bouclage (loopback) en modifiant <file>/etc/cups/cupsd.conf</file>:
<!-- voir si une traduction officielle est disponible pour loopback -->

<example>
Listen 127.0.0.1:631
</example>

<P>FIXME: Ajouter plus de contenu (l'article sur <url name="Amateur Fortress
Building" id="http://www.rootprompt.org"> fournit certains points de vues très 
intéressants).

<p>FIXME: Vérifier la disponibilité de PDG dans la Debian, et si il l'est,
le suggérer comme le système d'impression préféré.

<p>FIXME: Vérifier si Farmer/Wietse a une alternative pour le daemon d'imprimante
et si il est disponible dans la Debian.

<sect>Sécurisation du daemon mail

<p>
Si votre serveur n'est pas un système d'envoi de mail, vous n'avez pas réellement
besoin d'un daemon mail écoutant les connexions entrantes, mais vous pourriez
vouloir votre courrier local distribué pour, par exemple, recevoir le courrier
pour l'utilisateur root en provenance d'un des systèmes d'alerte en place.

<p>Pour faire cela dans un système Debian, vous aurez à retirer le daemon smtp
d'inetd:
 <example>
$ update-inetd --disable smtp
 </example>
<p>et configurer le daemon de mail pour écouter seulement sur l'interface de
bouclage. Dans exim (le MTA par défaut) vous pouvez faire ça en éditant le fichier
 <file>/etc/exim.conf</file>
et en ajoutant la ligne suivante:

<example>
local_interfaces = "127.0.0.1"
</example>

<p>Redémarrez les deux daemons (inetd et exim) et vous aurez exim
qui écoutera sur 127.0.0.1:25 uniquement. Faites attention, et avant tout 
désactivez inetd, sinon, exim ne démarrera pas étant donné que le daemon inetd 
est déjà en attente de connexions entrantes.

<p>Pour postfix éditez <file>/etc/postfix/main.conf</file>:

<example>
inet_interfaces = localhost
</example>


<p>
Si vous voulez seulement le courrier local, cette approche est meilleure que
l'encapsulation du daemon mail par un tcp wrapper ou l'ajout de règles
pare-feu pour limiter les personnes qui y accèdent. Cependant, si vous
n'avez pas besoin d'écouter sur d'autres interfaces, vous pourriez envisager
de le lancer à partir d'inetd et ajouter un tcp wrapper pour que les
connexions entrantes soit vérifiées par rapport à
<file>/etc/hosts.allow</file> et <file>/etc/hosts.deny</file>. De plus,
vous serez au courant quand un accès non autorisé est tenté contre votre
daemon de mail, si vous mettez en place correctement le logging pour 
n'importe laquelle des méthodes décrites plus haut.

<sect>Réception du courrier d'une manière sûre.
<p>
La lecture/réception du courrier est le plus courant des protocoles en
texte clair. Si vous utilisez soit POP3 ou IMAP pour récupérer votre
courrier, vous envoyez votre mot de passe en clair à travers le réseau,
et donc presque tout le monde peut lire votre courrier à partir de 
maintenant. A la place, utilisez SSL (Secure Sockets Layer) pour recevoir
votre courrier. L'autre alternative est ssh, si vous avez un compte shell
sur la machine qui sert de serveur POP ou IMAP. Voici un fetchmailrc simple
pour décrire cela :

<example>
poll my-imap-mailserver.org via "localhost"
  with proto IMAP port 1236
      user "ref" there with password "hackme" is alex here warnings 3600
    folders
      .Mail/debian
    preconnect 'ssh -f -P -C -L 1236:my-imap-mailserver.org:143 -l ref
     my-imap-mailserver.org sleep 15 &lt;/dev/null &gt; /dev/null'
</example>

Le preconnect est la ligne importante. Elle lance une session ssh et
crée le tunnel nécessaire, qui relaie automatiquement les connections
au port local 1236 vers le port IMAP du serveur de mail, mais cryptées. 
Une autre possibilité serait d'utiliser fetchmail avec la fonctionnalité ssl.

<p>si vous désirez fournir des services de courrier comme POP et IMAP cryptés,
<tt>apt-get install stunnel</tt> et démarrez vos daemons ainsi:

<example>
stunnel -p /etc/ssl/certs/stunnel.pem -d pop3s -l /usr/sbin/popd
</example>
<p>Cette commande encapsule le daemon fourni (-l) au port (-d) et utilise le
certificat ssl spécifié (-p).


<sect id="sec-bind">Sécurisation de BIND

<p>Il y a différents problèmes qui peuvent être traités pour sécuriser le daemon
de serveur de domaine; problèmes similaires à ceux étudiés quand on sécurise
n'importe quel service donné:

<list>
<item>configurer le daemon lui-même pour qu'il ne puisse pas être mal utilisé
de l'extérieur. Cela inclus limiter les requêtes possibles pour les clients:
transferts de zones et requêtes récursives.

<item>limiter l'accès du daemon au serveur lui-même, ainsi s'il est utilisé
pour s'introduire, les dommages au système sont limités. Cela inclus
d'exécuter le daemon en tant qu'utilisateur non-privilégié et le chrooter.

</list>

<p>Vous devriez restreindre certaines informations données par le serveur
DNS aux clients extérieurs pour qu'il ne puisse pas être utilisé pour obtenir
des informations de valeur sur votre organisation que vous ne voudriez pas
divulguer. Cela inclus l'ajout des options suivantes:

<em>allow-transfer</em>, <em>allow-query</em>,
<em>allow-recursive</em> et <em>version</em>. Vous pouvez soit limiter cela
dans la section globale (pour que cela s'applique à toutes les zones servies) 
ou individuellement par zone. Cette information est documentée dans le paquetage
<package>bind-doc</package>, lisez en plus à ce sujet dans
<file>/usr/share/doc/bind/html/index.html</file> une fois que le paquetage est
installé.

<p>Imaginez que votre serveur (un serveur avec plusieurs adresses de base) est
connecté à Internet et à votre réseau interne (votre IP interne est 192.168.1.2),
vous ne voulez fournir aucun service à Internet et vous voulez juste autoriser
les consultations DNS à partir de vos hôtes internes. Vous pourriez le 
restreindre en incluant dans <file>/etc/bind/named.conf</file>:

<example>
options {
	    allow-query { 192.168.1/24; } ;
	    allow-transfer { none; } ; 
	    allow-recursive { 192.168.1/24; } ;
	    listen-on { 192.168.1.2; } ;
	    forward { only; } ;
	    forwarders { A.B.C.D; } ;
};
</example>


<p> L'option <em>listen-on</em> lie uniquement le DNS à l'interface
ayant une adresse interne, mais, même si cette interface
est la même que l'interface qui permet la connexion à Internet (Par l'utilisation
de NAT, par exemple), les requêtes ne seront acceptées que si celles-ci proviennent
d'hôtes internes. Si le système est constitué de plusieurs interfaces et que 
le <em>listen-on</em> n'est pas présent, seuls les utilisateurs internes pourront
émettre des requêtes, mais, puisque le port restera accessible à des attaquants 
externes, ils pourront essayer de cracher (ou tenter une attaque d'exploit de 
débordement de tampon) le serveur DNS. Vous pouvez même le mettre uniquement en
écoute sur l'adresse 127.0.0.1 si vous ne désirez pas offrir le service a quelqu'un 
d'autre qu'à vous même.
</p>

<!-- AA je maîtrise pas le sujet : vérifier traduc chaos class -->
<p>L'enregistrement version.bind dans la classe chaos contient la version
du processus bind actuellement en cours d'exécution. Cette information
est souvent utilisée par des scanners automatisés et des individus malveillants
qui souhaitent déterminer si un bind est vulnérable à une attaque spécifique.
En fournissant de fausses ou pas d'informations, on limite la probabilité
qu'un serveur soit attaqué sur la base de la version qu'il publie.

Pour fournir votre propre version, utilisez la directive <em>version</em> de
la manière suivante:

 <example>
options {
	... diverses options ici ...
 	version "Not available.";
 };
 </example>

<p>Changer l'enregistrement version.bind ne fournit pas actuellement de
protection contre les attaques, mais ceci devrait être considéré comme une
protection utile.


<p>Concernant la limitation des privilèges de BIND vous devez être conscient
que si un utilisateur autre que root exécute BIND, alors BIND ne peut pas détecter
de nouvelles interfaces automatiquement. Par exemple, si vous insérez une carte
PCMCIA dans votre portable. Consultez le fichier README.Debian dans votre 
répertoire de documentation named (<file>/usr/share/doc/bind/README.Debian</file>)
pour plus d'information sur ce problème. Il y a eu récemment de nombreux problèmes 
de sécurité  concernant BIND, donc le changement d'utilisateur est utile quand
il est possible.
<p>
Pour démarrer BIND sous un autre utilisateur, tout d'abord créez un 
utilisateur et un groupe séparé (ce <em>n'est</em> pas une bonne idée
d'utiliser nobody ou nogroup pour chaque service ne devant pas tourner
en tant que root). Dans cette exemple, l'utilisateur et le groupe 
<tt>named</tt> seront utilisé. Vous pouvez faire cela en tapant :

<example>
addgroup named
adduser --system --ingroup named named
</example>

<p>
Maintenant éditez, à l'aide de votre éditeur favori, <tt>/etc/init.d/bind</tt> et changez les lignes commençant par 

<example>
start-stop-daemon --start
</example>

en

<example>
start-stop-daemon --start --quiet --exec /usr/sbin/named -- -g named -u named
</example>

<p>
Tout ce dont vous avez besoin est de redémarrer bind à l'aide de 
'/etc/init.d/bind restart' puis rechercher dans votre syslog les deux entrées 
suivantes : 
 <p>
<example>
Sep  4 15:11:08 nexus named[13439]: group = named
Sep  4 15:11:08 nexus named[13439]: user = named
</example>

<p>Voilà! Maintenant votre named ne s'exécute plus en tant que root. Pour
atteindre une sécurité de BIND maximale, construisez mantenant une prison chroot
(voir <ref id="chroot">) autour de votre daemon.
Il y a un moyen facile de faire cela: l'option <tt>-t</tt> (voyez la page de manuel
<manref name="named" section="8">). Cela fera que Bind se chrootera lui-même dans
le répertoire donné sans que vous ayez besoin de configurer une prison chroot et
de vous inquiéter au sujet des librairies dynamiques. Les seuls fichiers qui
doivent être dans cette prison chroot:
<!-- AA Traduction ? j'ai peur du contresens ici -->

<example>
dev/null
etc/bind/       - doit contenir named.conf et toutes les zones du serveur.
sbin/named-xfer - si vous faites du transfert de nom
var/run/named/  - devrait contenir le pid et le cache du serveur de nom (si il
				  existe) ce répertoire doit être inscriptible par l'utilisateur
				  named
var/log/named   - si vous configurez le log vers un fichier, doit être inscriptible
				  par l'utilisateur named
dev/log         - syslogd devrait écouter ici si named est configuré pour loguer
				  grace à lui
</example>


<p>Pour que votre daemon Bind fonctionne correctement il a besoin de
permissions dans les fichiers named.
<!-- AA needs permissions IN the named files -->
C'est une tâche facile car les fichiers de configuration sont toujours dans
<tt>/etc/named</tt>. Tenez compte qu'il nécessite seulement un accès en lecture 
seule aux fichiers de zone, à moins qu'il ne soit un serveur de nom secondaire 
ou serveur cache. Si c'est votre cas vous aurez à donner les permissions en 
lecture-écriture aux zones nécessaires (pour que le transfert de zone à partir
du serveur primaire marche).

<p>Si vous voulez lire plus d'informations expliquant pourquoi BIND ne s'exécute
pas en tant qu'utilisateur non-root sur les systèmes Debian, veuillez, s'il vous plaît, 
consulter le Bug Tracking System au sujet de Bind, spécifiquement
<url name="Bug #50013: bind should not run as root" id="http://bugs.debian.org/50013">.

<p>De plus, vous pouvez trouver plus d'informations concernant le chrootage de
Bind dans le 
<url name="Chroot-BIND-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-BIND-HOWTO.html"> (Au sujet de
Bind 9) et <url name="Chroot-BIND8-HOWTO"
id="http://www.linuxdoc.org/HOWTO/Chroot-BIND8-HOWTO.html"> (Au sujet de
Bind 8). Ces mêmes documents devraient être disponibles par l'installation de
<package>doc-linux-text</package> (version texte)
ou <package>doc-linux-html</package> (version html).

<p>Si vous configurez une véritable prison chroot (i.e. pas juste l'option
<tt>-t</tt>) pour Bind 8.2.3 dans la Debian (potato), assurez vous qu'elle 
contient les fichiers suivants:

<example>
dev/log - syslogd devrait écouter ici
dev/null
etc/bind/named.conf 
etc/localtime
etc/group - avec une seule ligne: "named:x:GID:"
etc/ld.so.cache - généré avec ldconfig   
lib/ld-2.1.3.so
lib/libc-2.1.3.so
lib/ld-linux.so.2 - lié symboliquement à ld-2.1.3.so  
lib/libc.so.6 - lié symboliquement à libc-2.1.3.so
sbin/ldconfig - pourra être effacé après la configuration du chroot
sbin/named-xfer - si vous faites des transferts de nom
var/run/
</example>


<p>FIXME, inclure les infos provenant de
<url id="http://www.cryptio.net/~ferlatte/config/"> (spécifique à la Debian)
et  
<url id="http://www.psionic.com/papers/whitep01.html">.

<sect>Sécurisation d'Apache

<p>FIXME. Ajout de contenu.

<p>
Vous pouvez limiter l'accès au serveur Apache si vous voulez uniquement l'utiliser en interne
(dans un but d'essai, pour accéder à l'archive <package>doc-central</package>
, etc..) et ne pas vouloir que des intrus y accèdent. Pour réaliser cela, utilisez les directives 
<tt>Listen</tt> ou <tt>BindAddress</tt> dans <file>/etc/apache/http.conf</file>.

<p>Using Listen:
<example>
Listen 127.0.0.1:80
</example>
<p>Using BindAddress:
<example>
BindAddress 127.0.0.1
</example>

<p>
Ensuite, redémarrez apache avec <tt>/etc/init.d/apache restart</tt> et vous observerez 
qu'il écoute uniquement l'interface loopback.

<p>
Dans tous les cas, si vous n'utilisez pas toutes les fonctionnalités 
fournies par Apache, vous pouvez jeter un oeil aux autres serveurs 
web fourni dans Debian tel <package>dhttpd</package>.

<p>La <url name="Documentation Apache"
id="http://httpd.apache.org/docs/misc/security_tips.html"> fournit des 
informations concernant les mesures de sécurité à prendre pour les 
serveurs web Apache (ces mêmes informations sont fournies dans Debian 
par le paquet <package>apache-doc</package>).

<sect>Sécurisation de finger

<p>
Si vous désirez utiliser le service finger, demandez-vous si vous en avez réellement 
besoin. Si oui, vous découvrirez que Debian fourni de nombreux daemons finger 
(output d'un <prgn>apt-cache search fingerd</prgn>): 
<list>
<item>cfingerd - Un daemon finger configurable.
<item>efingerd - Un autre daemon finger pour unix capable syntoniser précisément votre sortie.
<item>ffingerd - Un daemon finger sécurisé.
<item>fingerd - Un serveur distant pour informations d'utilisateurs.
<item>Daemon finger de type BSD avec le support qmail.
</list>
<p><package>ffingerd</package> est le daemon finger recommandé si vous comptez l'utiliser 
pour un service public. Dans tous les cas, vous êtes encouragé, lors de la mise 
en place via inetd, xinetd ou tcpserver à: limiter le nombre de processus qui seront 
lancés en même temps, limiter les accès au daemon finger depuis un nombre 
donné d'hôtes (en utilisant tcp wrappers) et de l'avoir en écoute uniquement 
sur une interface bien définie.

<sect>Paranoïa généralisée du suid et du chroot

<p>Il est probablement juste de dire que la complexité de BIND est la raison pour
laquelle il a été exposé à de nombreuses attaques ces dernières années.
(voir <ref id="sec-bind">)

<p>D'autres programmes avec des fonctionnalités complexes et une large base
d'utilisateurs incluent Sendmail et quelques daemon ftp (e.g. WUftpd).
(Bien sûr un programme avec aucune fonctionnalité et pas de clients satisfaits
peut être aussi peu sûr, outre le fait qu'il est inutile.)

<p>Dans tous les cas, si vous exécutez un de ces programmes,
considérez des mesures semblables à leur encontre &mdash; annuler les privilèges
root, s'exécuter dans une prison chroot &mdash; ou les remplacer par des équivalents
plus sûrs.


<sect>Paranoïa généralisée du mot de passe en texte clair

<p>
Vous devriez essayer d'éviter tout service réseau qui envoie et reçoit des
mots de passe en texte clair par le net comme FTP/Telnet/NIS/RPC. L'auteur
recommande l'utilisation de ssh à la place de telnet et ftp pour tout le monde.

<p>
Gardez à l'esprit que la migration de telnet vers ssh, en perpétuant l'utilisation d'autres
protocoles à texte non chiffrés n'augmente votre sécurité en AUCUNE manière!
Le mieux serait de retirer ftp, telnet, pop, imap, http et de les remplacer
par leurs services cryptés respectifs. Vous devriez considérer la mise à jour de ces
services à leurs versions SSL, ftp-ssl, telnet-ssl, pop-ssl, https...

<p>
La plupart des astuces ci-dessus s'appliquent à tout système Unix (vous 
les trouverez dans des documents de durcissement liés à Linux et autres 
Unix).

<sect>Désactivation du NIS 

<p>
Vous ne devriez pas utiliser NIS, le Service d'Information Réseau (Network 
Information Service), si possible car il autorise le partage de mot de 
passe. Ceci peut être fortement dangereux si l'installation est cassée.

<p>
Si vous avez besoin de partager les mots de passe entre machines, pensez 
à d'autres alternatives. Par exemple, mettre en place un serveur LDAP et 
configurer PAM sur votre système afin de contacter le serveur LDAP pour 
l'authentification des utilisateurs. Une installation détaillée est 
disponible sur <url
name="LDAP-HOWTO" id="http://www.linuxdoc.org/HOWTO/LDAP-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/LDAP-HOWTO.txt.gz</file>).

<p>
Informations supplémentaires sur la sécurité de NIS à l'adresse suivante 
<url
name="NIS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NIS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NIS-HOWTO.txt.gz</file>).


<p>FIXME (jfs)&nbsp;: Ajouter des infos sur comment configurer cela dans la Debian

<sect id="rpc">Désactivation des services RPC

<p>Vous devriez désactiver RPC quand c'est possible.  <!-- FIXME: expliquer quand
RPC est nécessaire. --> De nombreuses failles de sécurité pour ce service sont
connues et peuvent être facilement exploitées. D'un autre côté les services NFS
sont assez importants dans certains réseaux, trouvez donc le juste équilibre 
entre sécurité et facilité d'utilisation sur votre réseau. La plupart des attaques
DDos (Distributed Denial of Service ou déni de service distribué) utilisent des
exploits rpc pour s'introduire dans le système et y agir comme agent/gestionnaire.
Lisez en plus sur la sécurité de NFS dans
<url name="NFS-HOWTO" id="http://www.linuxdoc.org/HOWTO/NFS-HOWTO.html">
(<file>/usr/share/doc/HOWTO/en-txt/NFS-HOWTO.txt.gz</file>).

<p>La désactivation de portmap est assez simple. Il y a différentes méthodes.
La plus simple sur un système Debian 3.0 est de désinstaller le paquetage
<package>portmap</package>. Si vous exécutez une autre version vous devrez
désactiver le service comme expliqué dans <ref id="disableserv">, cela est dû
au fait que le programme fait partie du paquetage <package>net-base</package> (qui ne peut être desinstallé sans endommager le système).

<p>Cela enlève en fait tous les liens symboliques relatifs au portmap dans
<tt>/etc/rc${runlevel}.d/</tt>, qui est aussi quelque chose que vous pourriez
faire manuellement. Une autre possibilité est de faire <tt>chmod 644 
/etc/init.d/portmap</tt>, mais cela produit un message d'erreur lors du 
démarrage. Vous pouvez aussi enlever la partie <tt>start-stop-daemon</tt>
du script shell <file>/etc/init.d/portmap</file>.

<sect id="firewall-setup">Ajouter des capacités au pare-feu

<p> Le système d'exploitation Debian GNU/Linux possède les capacités intégrées
fournies par le noyau Linux. Cela signifie que si vous installez un système
potato (Debian version 2.2, le noyau par défaut est le 2.2) vous aurez la
fonctionnalité pare-feu <prgn>ipchains</prgn> disponible dans le noyau, vous
avez à installer le paquetage <package>ipchains</package> qui sera sûrement
déjà (de part sa priorité) installé. Si vous installez un système woody
(Debian version 3.0, le noyau par défaut est le 2.4) vous aurez la 
fonctionnalité pare-feu <prgn>iptables</prgn> (neftfilter) disponible.
<!-- AA Comment traduire firewalling ? -->

<!-- AA Le paragraphe suivant est à retraduire, tous les commentaires sont
bienvenus. J'ai retraduit. jpg -->
<p>
Certains utilisateurs peuvent aussi bien vouloir ajouter des règles de pare-feu dans ce script.
Cependant, vérifiez quels programmes/composants pare-feu vous voulez utiliser puisqu'ils peuvent
modifier d'autres fichiers et changer les définitions que vous avez ajouté au démarrage. Par exemple,
<package>firewalk>, pour n'en citer qu'un, utilisera un autre fichier de configuration pour configurer
le pare-feu.
	  </package></p>
   
<sect1>Règles de Iptables 

<p>
Si vous utilisez Debian 3.0, vous noterez que vous disposez du paquet
<package>iptables</package>. Ceci est le support pour l'implémentation 
de netfilter des noyaux 2.4.4+. Juste après l'installation, le système 
ne peut <em>connaître</em> les règles du pare-feu (celles-ci sont 
spécifiques à chaque système) et vous devez activer iptables.

<p>
De manière à réaliser ceci, vous devez :

<list>

<item>éditer <file>/etc/default/iptables</file> ainsi la variable 
<tt>enable_iptables_initd</tt> est mise à <em>true</em>

<item>Pour créer une configuration de pare-feu en utilisant iptables, vous pouvez utiliser la ligne
de commande (see <manref name="iptables" section="8">) ou un des outils 
fournit par les paquetages pare-feu Debian (voir <ref
id="firewall-pack">). Vous devez creer un jeu de règles  du pare-feu pour
les utiliser quand le pare-feu est en état <em>actif</em> et un autre lorsque le pare-feu est en état <em>inactif</em> (Ceux peuvent être
juste des règles vides).

<item>sauvegarder les règles créées en utilisant <tt>/etc/init.d/iptables
save_active</tt> et <tt>/etc/init.d/iptables save_active</tt> en lançant 
ces scripts avec les règles de pare-feu que vous voulez activer.

</list>

<p>
Une fois ceci fait l'installation de votre pare-feu est sauvegardée dans 
le répertoire <file>/var/lib/iptables/</file> et sera exécutée quand le 
système démarrera (ou lorsque le script initd sera lancé avec les arguments 
<em>start</em> et <em>stop</em>). Notez que l'installation par défaut de 
Debian démarre le pare-feu dans le niveau d'exécution multi-utilisateurs 
(2 à 5) bientôt (10). De plus, il est arrêté en mode mono-utilisateur (1),
changez ceci si cela ne correspond pas à votre politique.


<p>
Soyez avertis que certains des paquetages passés en revue ci-dessous
pourraient amener des scripts pare-feux à être exécuter quand le système
démarre, cela va indubitablement entrer en conflit avec la configuration
courante et vous pourriez avoir des effets indésirables.
Consultez la documentation du paquetage et utilisez l'une de ces
configurations.

<p>
Si vous n'avez aucun renseignement sur la manière d'organiser vos 
règles de filtrage pour votre pare-feu, consulter le <em>Packet 
Filtering HOWTO</em> fourni par <package>iptables</package> pour 
une consultation hors-ligne sous 
<file>/usr/share/doc/iptables/html/</file>.

<sect1>Firewaller le système local

<p>
Vous pouvez utiliser des règles de pare-feu tel une manière de 
sécuriser l'accès à votre système local et, même, de limiter les 
connexions extérieures<--!outband a traduire--> produites par celles-ci. Des 
règles de pare-feux peuvent être également utilisées pour protéger 
des processus qui ne peuvent être proprement configurés pour fournir 
certains services à certains réseaux, certaines adresses IP, etc ...

<p>
Toutefois, cette étape est présentée en dernier dans ce manuel car 
il est <em>beaucoup</em> mieux de ne pas dépendre exclusivement des 
capacités d'un pare-feu de façon à protéger un système donné.
La sécurité dans un système est faites de couches, le filtrage devrait
être la dernière, une fois que tous les services ont été renforcés.
Vous pouvez facilement imaginer une installation dans laquelle le 
système est uniquement protégé par le pare-feu et que l'administrateur
enlève bêtement les règles pour n'importe quelle raison (problèmes 
avec l'installation, exaspération, erreur humaine, ...), ce système 
pourrait être grand ouvert à une attaque.


<sect1>Utiliser un pare-feu pour protéger d'autres systèmes

<p>
Un pare-feu Debian peut aussi être installé de façon à protéger, selon 
des règles de filtrage, l'accès aux systèmes <em>derrière</em> lui, 
limitant leur exposition à Internet.

<p>
Vous pouvez même installer une bécane Debian GNU/Linux en tant que pont 
pare-feux, c'est-à-dire un pare-feu filtrant complètement transparent 
pour le réseau qui est dépourvu d'adresse IP et donc ne peut pas être 
attaqué directement.

<p>
Si vous ne connaissez pas grand chose aux pare-feux, vous pouvez lire le 
Firewalling-HOWTO qui se trouve dans le paquet 
<package>doc-linux-text</package> (d'autres formats de document 
sont également disponibles). Voir <ref id="references"> pour plus de 
pointeurs.


<sect1 id="firewall-pack">Paquets pare-feu

<p>
Il existe plusieurs logiciels qui peuvent être utilisés pour configurer 
des règles de pare-feux dans un système Debian :

<list>
<item><package>fwbuilder</package>
<item><package>mason</package>, qui peut suggérer des règles de pare-feux 
basé sur le traffic réseau que votre réseau "voit".
<item><package>bastille</package> (parmi les étapes de durcissement qui 
constituent les nouvelles versions de bastille, une d'entre-elles est 
l'ajout de règles de pare-feux exécutable au démarrage du système).
<item><package>ferm</package>
<item><package>fwctl</package>
<item><package>easyfw</package>
<item><package>firewall-easy</package>
<item><package>ipac-ng</package>
<item><package>gfcc</package>
<item><package>knetfilter</package>
<item><package>firestarter</package>
</list>

<p>
Les derniers paquets : gfcc,firestarter et knetfilter sont des GUIs 
pour administration qui utilisent soit GNOME (le premier des deux) soit 
KDE (le dernier) qui sont plus orienté utilisateur (c'est-à-dire utilisation 
"familiale") tandis que les autres paquets de la liste sont plus orientés 
administrateur.

<p>FIXME: Ajouter plus d'informations concernant ces paquets

<p>FIXME: Vérifier les informations sur les pare-feux Debian et quoi/comment cela change sur les autres
distributions. 
<p>FIXME: A quel endroit la personnalisation du pare-feu peut elle être activée (FAQ générale dans debian-firewall?)


<chapt>Durcissement automatique de systèmes Debian 

<p>
Après la lecture de toutes les informations des précédents chapitres, 
vous vous dîtes sûrement "de nombreuses choses sont à faire afin de 
durcir mon système, tout cela ne peut-il pas être automatisé ?". La 
réponse est oui mais soyez prudents avec les outils automatisés. 
Certaines personnes croient qu'un outil de renforcement n'élimine pas 
la nécessité d'une bonne administration. Donc, ne pensez pas que vous 
pouvez automatiser toutes les procédures et que vous arriverez à 
résoudre tous les problèmes. La sécurité est un processus évoluant 
constamment dans lequel l'administrateur doit participer et ne peut pas 
rester à l'écart et laisser les outils se débrouiller tout seul avec 
toutes les implémentations politiques de sécurité, toutes les attaques et 
tous les environnements.

<p>
Depuis woody (Debian 3.0) il existe deux paquets spécifiques qui sont 
utiles pour le durcissement de la sécurité. Le paquet 
<package>harden</package> qui base son approche sur les dépendances 
des paquets pour installer rapidement des paquets sûrs et retirer ceux 
avec des imperfections, la configuration devant être faite par 
l'administrateur. Le paquet <package>bastille</package> implémente 
une politique de sécurité donné pour le système basée sur une 
configuration antérieure de l'administrateur (la configuration peut 
être faite à l'aide de simples questions oui/non).

<sect>Harden

<p>Le paquet <package>harden</package> essaie de rendre plus facile 
l'installation et l'administration d'hôtes qui ont besoin d'une bonne 
sécurité. Ce paquet devrait être utilisé par ceux qui veulent une aide 
afin d'améliorer la sécurité du système. 

Pour cela, il cherche les paquets imparfaits,
incluant (mais non limitatif): Bugs de sécurité connus (comme
les buffers overflow), l'utilisation de mot de passe en clair, manque de contrôle d'accès,
etc. Il installe aussi automatiquement des outils pour accroître la sécurité :
 outils de détection d'intrusion, outils d'analyse d'audit de sécurité,
 etc. Harden installes les paquetages <em>virtuels</em> suivants
(par exemple, pas de contenu, juste des dependences vers d'autres):

<list>

<item><package>harden-tools</package>: outils pour améliorer la sécurité 
sytème (vérificateur d'intégrité, détection d'intrusion, rustines pour 
noyau, ...)

<item><package>harden-doc</package>: fourni ce même manuel et d'autres 
paquets de documentations liés à la sécurité.

<item><package>harden-environment</package>: aide à configurer un 
durcissement d'environnement (actuellement vide).

<item><package>harden-servers</package>: retire les serveurs considérés 
comme douteux pour certaines raisons.

<item><package>harden-clients</package>: retire les clients considérés 
comme douteux pour certaines raisons.

<item><package>harden-remoteflaws</package>: supprime les paquets 
contenant des trous de sécurité connus qui peuvent être utilisés 
par un assaillant distant afin de compromettre le système 
(uses versioned <em>Conflicts:</em>).

<item><package>harden-localflaws</package>: supprime les paquets 
contenant des trous de sécurité connus qui peuvent être utilisés 
par un assaillant local afin de compromettre le système 
(uses versioned <em>Conflicts:</em>).

<item><package>harden-remoteaudit</package>: outils pour auditer un système 
à distance.

</list>

<p>Prenez garde dans le cas où vous disposez d'un logiciel (et que vous ne 
voulez pas désinstaller) et qu'il soit en contradiction avec certains 
paquets ci-dessus, vous ne serez peut-être pas capable d'utiliser 
pleinement <package>harden</package>.

Les paquets harden ne font rien (directement). Ils rencontrent, cependant, des 
conflits avec des paquets non sûrs connus. De cette façon, le système de 
paquetage Debian n'approuvera pas l'installation de ces paquets. Par exemple,
lorsque vous essayer d'installer un daemon telnet avec 
<package>harden-servers</package>, apt vous dira :

<example>
# apt-get install telnetd 
The following packages will be REMOVED:
	harden-servers
The following NEW packages will be installed:
telnetd 
Do you want to continue (Y/n)
</example>

<p>Ceci devrait alerter l'administrateur, qui devrait reconsidérer ses actions.
<!--ES Phrase à retraduire. Fait. jpg -->

<sect>Bastille Linux

<p><url name="Bastille Linux" id="http://www.bastille-linux.org"> est 
un outil de durcissement automatique originellement orienté vers les 
distributions Linux RedHat et Mandrake. Toutefois, le paquet 
<package>bastille</package> fourni dans Debian (depuis woody) a été 
rafistolé de façon à fournir les mêmes fonctionnalités pour le système 
Debian GNU/Linux.

<p>Bastille peut-être utilisé avec différentes interfaces (toutes sont 
documentées dans leur propre page de man dans le paquet Debian) qui 
permettent à l'administrateur de :

<list>

<item>Répondre aux questions, étape par étape, concernant le niveau 
de sécurité désiré de votre système (en utilisant 
<manref name="InteractiveBastille" section="8">)

<item>Utiliser un paramétrage par défaut pour la sécurité (parmi trois : 
Lax, Moderate ou Paranoia) dans une installation définie (serveur ou poste de 
travail) et laissez Bastille décider quelle politique de sécurité appliquer 
(en utilisant <manref name="BastilleChooser" section="8">)

<item>Prendre un fichier de configuration prédéfini (peut-être fourni par 
Bastille ou fait par l'administrateur) et implémenter une politique de sécurité 
donnée (en utilisant <manref name="AutomatedBastille" section="8">)

</list>

<chapt>La signature de paquet dans Debian

<p>Ce chapitre pourrait également être intitulé "comment améliorer/actualiser 
sûrement votre système Debian GNU/Linux" et il a le mérite d'avoir son propre 
chapitre car il ne convient à aucun autre chapitre.

<p>A ce jour (décembre 2001) Debian ne fournit pas de paquets 
signés pour la distribution actuelle et la woody (3.0) n'intégrera pas cette fonctionnalité. 
Voici une solution pour les paquets signés qui seront, espérons-le, fournie dans les 
prochaines versions.

<sect>Le schéma proposé pour la vérification de paquet 

<p>Le schéma actuel (non implémenté) pour la vérification de signatures de paquet 
en utilisant apt est :

<list>
<item>le fichier Release qui inclus le md5sum de Packages.gz 
(qui contient les md5sums des paquets) et sera signé.
La signature est l'une des sources sûres.

<item>Ce fichier Release est téléchargé par 'apt-get update' et stockée sur le 
HD avec Packages.gz.

<item>Quand un paquet est sur le point d'être installé, il est premièrement 
téléchargé, puis le md5sum est généré.

<item>Le fichier Release signé est vérifié (signature ok) et il en extrait le 
md5sum pour le fichier Packages.gz, le checksum de Packages.gz est généré et 
(si ok) le md5sum du paquet téléchargé en est extrait.

<item>Si le md5sum du paquet téléchargé est le même que celui du fichier 
Packages.gz le paquet sera installé sinon l'administrateur sera averti et le 
paquet sera laissé dans le cache (ainsi l'administrateur décidera s'il l'installe 
ou pas). Si le paquet n'est pas dans Packages.gz et que  l'administrateur a 
configuré le système pour installer uniquement les paquets vérifiés il ne sera 
pas plus installé.
</list>

<p>
En suivant la chaîne de sommes MD5, <prgn>apt</prgn> est capable de vérifier 
qu'un paquet est originaire d'une sortie bien spécifique. Ceci est plus ou moins 
souple plutôt que de signer chaque paquet un par un  mais peut-être combiné 
également avec ce schéma suivant (vois ci-dessous).

<p>La signature de paquets a été abordée dans la Debian depuis un petit temps déjà,
pour plus d'informations vous pouvez lire :
<url id="http://www.debian.org/News/weekly/2001/8/"> et
<url id="http://www.debian.org/News/weekly/2000/11/">.

<sect>Schéma complémentaire pour la signature par paquet

<p>Le schéma complémentaire concernant la signature de chaque 
paquet autorise les paquets à être vérifié quand ils ne sont plus 
référencés par un fichier Packages existant, également les paquets
tiers qui ne se sont pas encore vu empaquetés peuvent aussi être
utilisés avec la Debian mais n'entre pas dans le système par défaut.

<p>Ce schéma de signature par paquet peut-être implémenté en utilisant 
<package>debsig-verify</package> et <package>debsigs</package>.
Ces deux paquets peuvent signer et vérifier les signatures incluses dans 
le .deb. Debian a déjà la capacité de le faire maintenant mais 
l'implémentation de cette politique et de ces outils ne démarrera qu'après
la sortie de la woody (afin de ne pas ralentir le cycle de sortie).

<p>NOTE: Actuellement <file>/etc/dpkg/dpkg.conf</file> embarque
"no-debsig" par défaut.

<sect>Vérification des paquets sortis

<p>
Au cas où vous voudriez ajouter des vérifications de sécurité supplémentaire 
vous pouvez utiliser le script ci-dessous fourni par Anthony Thown. 
Ce script peut automatiquement faire certaines nouvelles vérifications de 
sécurité qui permettent à l'utilisateur d'être sûr que le téléchargement du 
logiciel qu'il/elle fait correspond à la distribution de logiciels Debian. 

Cela empêche des développeurs Debian d'intégrer des nouveautés au système de quelqu'un
 en outrepassant les responsabilités qui incombe au chargement vers l'archive
principale, ou encore cela empêche une duplication similaire mais pas exactement
identique, ou pour finir cela empêche l'utilisation de miroirs fournissant des copies
anciennes de la version instable ou connaissant des problèmes de sécurité.
<!-- J'ai tenté une autre approche... jpg -->

<p>Ce simple code, renommé en <prgn>apt-release-check</prgn>, devrait être 
utilisé de la manière suivante :
<example>
# apt-get update
# apt-release-check
(...results...)
# apt-get dist-upgrade
</example>

<p>Avant tout, vous avez besoin de :

<list>
<item>obtenir les clés que les logiciels de l'archive utilisent 
pour signer les fichiers Release,
<url id="http://ftp-master.debian.org/ziyi_key.asc">, et
<url id="http://ftp-master.debian.org/ziyi_key2.asc">, et 
les ajouter à <file>~/.gnupg/trustedkeys.gpg</file> (ce qui est ce que <prgn>gpgv</prgn> utilise par défaut).

<item>retirer toute ligne de <file>/etc/apt/sources.list</file>
qui n'utilisent pas la structure normale "dists" ou changer le script 
afin qu'il fonctionne avec elles.

<item>soyez prêt à ignorer le fait que les mises à jour de sécurité 
Debian n'ont pas de fichiers Release signés et que les fichiers 
Sources n'ont pas (encore) les checksums appropriés dans le fichier 
Release.

<item>soyez prêt à vérifier que les sources appropriées soient signées 
par les clés appropriées.

</list>


<example>
#!/bin/bash
# This script is copyright (c) 2001, Anthony Towns
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

rm -rf /tmp/apt-release-check
mkdir /tmp/apt-release-check || exit 1
cd /tmp/apt-release-check

>OK
>MISSING
>NOCHECK
>BAD

arch=`dpkg --print-installation-architecture`

am_root () {
        [ `id -u` -eq 0 ]
}

get_md5sumsize () {
        cat "$1" | awk '/^MD5Sum:/,/^SHA1:/' | 
          MYARG="$2" perl -ne '@f = split /\s+/; if ($f[3] eq $ENV{"MYARG"}) { print "$f[1] $f[2]\n"; exit(0); }'
}
checkit () {
        local FILE="$1"
        local LOOKUP="$2"

        Y="`get_md5sumsize Release "$LOOKUP"`"
        Y="`echo "$Y" | sed 's/^ *//;s/  */ /g'`"

        if [ ! -e "/var/lib/apt/lists/$FILE" ]; then
                if [ "$Y" = "" ]; then
                        # No file, but not needed anyway
                        echo "OK"
                        return
                fi
                echo "$FILE" >>MISSING
                echo "MISSING $Y"
                return
        fi
        if [ "$Y" = "" ]; then
                echo "$FILE" >>NOCHECK
                echo "NOCHECK"
                return
        fi
        X="`md5sum < /var/lib/apt/lists/$FILE` `wc -c < /var/lib/apt/lists/$FILE`"
        X="`echo "$X" | sed 's/^ *//;s/  */ /g'`"
        if [ "$X" != "$Y" ]; then
                echo "$FILE" >>BAD
                echo "BAD"
                return
        fi
        echo "$FILE" >>OK
        echo "OK"
}

echo
echo "Checking sources in /etc/apt/sources.list:"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo
(echo "You should take care to ensure that the distributions you're downloading"
echo "are the ones you think you are downloading, and that they are as up to"
echo "date as you would expect (testing and unstable should be no more than"
echo "two or three days out of date, stable-updates no more than a few weeks"
echo "or a month)."
) | fmt
echo

cat /etc/apt/sources.list | 
  sed 's/^ *//' | grep '^[^#]' |
  while read ty url dist comps; do
        if [ "${url%%:*}" = "http" -o "${url%%:*}" = "ftp" ]; then
                baseurl="${url#*://}"
        else
                continue
        fi
        echo "Source: ${ty} ${url} ${dist} ${comps}"
        
        rm -f Release Release.gpg
        wget -q -O Release "${url}/dists/${dist}/Release"

        if ! grep -q '^' Release; then
                echo "  * NO TOP-LEVEL Release FILE"
        else
                origline=`sed -n 's/^Origin: *//p' Release | head -1`
                lablline=`sed -n 's/^Label: *//p' Release | head -1`
                suitline=`sed -n 's/^Suite: *//p' Release | head -1`
                codeline=`sed -n 's/^Codename: *//p' Release | head -1`
                dateline=`grep "^Date:" Release | head -1`
                dscrline=`grep "^Description:" Release | head -1`
                echo "  o Origin: $origline/$lablline"
                echo "  o Suite: $suitline/$codeline"
                echo "  o $dateline"
                echo "  o $dscrline"

                if [ "${dist%%/*}" != "$suitline" -a "${dist%%/*}" != "$codeline" ]; then
                        echo "  * WARNING: asked for $dist, got $suitline/$codeline"
                fi

                wget -q -O Release.gpg "${url}/dists/${dist}/Release.gpg"
                sigline="`gpgv --status-fd 3 Release.gpg Release 3>&1 >/dev/null 2>&1 | sed -n "s/^\[GNUPG:\] GOODSIG [0-9A-Fa-f]* //p"`"
                if [ "$sigline" ]; then
                        echo "  o Signed by: $sigline"
                else
                        echo "  * NO VALID SIGNATURE"
                        >Release
                fi
        fi
        okaycomps=""
        for comp in $comps; do
                if [ "$ty" = "deb" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Release" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/binary-${arch}/Packages" | sed 's,//*,_,g'`" "${comp}/binary-${arch}/Packages")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH $comp ($X, $Y)"
                        fi
                elif [ "$ty" = "deb-src" ]; then
                        X=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Release" | sed 's,//*,_,g'`" "${comp}/source/Release")
                        Y=$(checkit "`echo "${baseurl}/dists/${dist}/${comp}/source/Sources" | sed 's,//*,_,g'`" "${comp}/source/Sources")
                        if [ "$X $Y" = "OK OK" ]; then
                                okaycomps="$okaycomps $comp"
                        else
                                echo "  * PROBLEMS WITH component $comp ($X, $Y)"
                        fi
                fi
        done
        [ "$okaycomps" = "" ] || echo "  o Okay:$okaycomps"
        echo
  done

echo "Results"
echo "~~~~~~~"
echo

allokay=true

cd /tmp/apt-release-check
diff <(cat BAD MISSING NOCHECK OK | sort) <(cd /var/lib/apt/lists && find . -type f -maxdepth 1 | sed 's,^\./,,g' | grep '_' | sort) | sed -n 's/^> //p' >UNVALIDATED

cd /tmp/apt-release-check
if grep -q ^ UNVALIDATED; then
    allokay=false
    (echo "The following files in /var/lib/apt/lists have not been validated."
    echo "This could turn out to be a harmless indication that this script"
    echo "is buggy or out of date, or it could let trojaned packages get onto"
    echo "your system."
    ) | fmt
    echo
    sed 's/^/    /' < UNVALIDATED
    echo
fi

if grep -q ^ BAD; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists does not"
    echo "match what was expected. This may mean these sources are out of date,"
    echo "that the archive is having problems, or that someone is actively"
    echo "using your mirror to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat BAD | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < BAD
    echo
fi

if grep -q ^ MISSING; then
    allokay=false
    (echo "The following files from /var/lib/apt/lists were missing. This"
    echo "may cause you to miss out on updates to some vulnerable packages."
    ) | fmt
    echo
    sed 's/^/    /' < MISSING
    echo
fi

if grep -q ^ NOCHECK; then
    allokay=false
    (echo "The contents of the following files in /var/lib/apt/lists could not"
    echo "be validated due to the lack of a signed Release file, or the lack"
    echo "of an appropriate entry in a signed Release file. This probably"
    echo "means that the maintainers of these sources are slack, but may mean"
    echo "these sources are being actively used to distribute trojans."
    if am_root; then 
        echo "The files have been renamed to have the extension .FAILED and"
        echo "will be ignored by apt."
        cat NOCHECK | while read a; do
            mv /var/lib/apt/lists/$a /var/lib/apt/lists/${a}.FAILED
        done
    fi) | fmt
    echo
    sed 's/^/    /' < NOCHECK
    echo
fi

if $allokay; then
    echo 'Everything seems okay!'
    echo
fi

rm -rf /tmp/apt-release-check
</example>

<chapt>Outils de sécurité dans Debian

<p>FIXME: Besoin de contenu 
<p>
Debian fournit aussi un nombre d'outils de sécurité qui peuvent faire de 
votre Debian une bécane dont le but serait de réaliser des tests de sécurité.

<sect>Outils d'évaluation des vulnérabilités à distances

<p>Les outils fournis dans Debian pour effectuer une évaluation des 
vulnérabilités à distance sont :
<list>
<item>nessus
<item>raccess
<item>whisker 
<item>bass (non-free)
<item>satan (non-free)
</list>

<p>De loin, l'outil le plus complet et mis à jour est <package>nessus</package> qui est composé d'un client (<package>nessus</package>) utilisé tel un GUI 
et un serveur (<package>nessusd</package>) qui lance les attaques programmées.
Nessus inclus des vulnérabilités à distance pour un grand nombre de systèmes 
incluant les appareils réseaux, les serveurs ftp, les serveurs www, etc. Les 
dernières versions sont capable même de parcourir un site web et d'essayer de 
découvrir les pages interactives qui sont susceptibles d'être attaquées. Il 
existe également des clients Java et Win32 (non inclus dans Debian) qui peuvent 
être utilisés pour contacter le serveur de management.

<p><package>Whisker</package> est un scanner pour évaluer les vulnérabilités 
de serveur web uniquement et qui inclus aussi des tactiques anti-IDS (la plupart 
ne sont plus des <em>anti-IDS</em>). C'est un des meilleurs scanners pour 
cgi disponible, étant capable de détecter des serveurs web et de lancer un 
assortiment d'attaques contre lui. La base de donnée utilisée pour scanner 
peut-être facilement modifiée pour fournir de nouvelles informations.

<p><package>Bass</package> (Bulk Auditing Security Scanner) 
et  <package>Satan</package> (Security Auditing Tool for Analysing Networks)
doivent plus être pensés comme des programmes "concept de preuve" que 
comme des outils à utiliser pour réaliser un audit. 
Ils sont anciens et ne sont pas mis à jour.
Cependant, SATAN a été le premier outil à fournir des tests de vulnérabilités 
de manière simple (GUI) et Bass est toujours un outil de vérification très performant.

<sect>Outils pour parcourir le réseau

<p>
Debian fourni quelques outils pour parcourir des hôtes distants (toutefois 
en n'examinant pas les vulnérabilités). Ces outils sont, dans certains cas,
utilisés tels des scanners de vulnérabilités. Ceci est la première type d'attaque
lancé contre des hôtes distants afin de tenter de déterminer les services 
disponibles. A l'heure actuelle, Debian fourni :

<list>
<item>nmap
<item>xprobe
<item>queso
<item>knocker
<item>hping2
<item>isic
<item>icmpush
<item>nbtscan
</list>

<p>
Tandis que <package>queso</package> et <package>xprobe</package> fournissent 
uniquement la détection des systèmes d'exploitations (en utilisant les empreintes
TCP/IP), <package>nmap</package> et <package>knocker</package> font les deux, la 
détection du système d'exploitation et la détection de ports ouverts sur les hôtes 
distants. D'un autre côté, <package>hping2</package> et <package>icmpush</package> peuvent être utilisés pour des techniques d'attaques distantes ICMP.

<p>
Créé spécifiquement pour les réseaux Netbios, <package>nbtscan</package>
peut être utiliser pour scanner des réseaux IP et retrouver des informations 
sur les noms de serveurs ayant le SMB d'activés. Ceci incluant : les noms 
d'utilisateurs, les noms des réseaux, les adresses MAC, ...

<sect>Audits internes

<p>
De nos jours, seul l'outil <package>tiger</package> utilisé dans Debian peut
être utiliser pour effectuer un audit interne (également appelé boîte blanche 
(white box)) d'hôtes de façon à déterminer si le système de fichiers est 
proprement installé, quels processus sont à l'écoute sur l'hôte, etc...

<sect>Contrôle du code source
<p>
Debian fourni deux paquets qui peuvent être utilisés pour contrôler le code 
source de programmes C/C++ et trouver les erreurs de programmation qui 
peuvent mener à de potentielles fautes de sécurité :
<list>
<item>flawfinder
<item>rats
</list>

<sect>Réseaux Privés Virtuels 

<p>FIXME: Contenu nécessaire

<p>Debian fourni un nombre assez important de paquets pour mettre en place 
des réseaux virtuels privés :

<list>

<item><package>vtun</package>
<item><package>tunnelv</package>
<item><package>cipe</package>
<item><package>vpnd</package>
<item><package>tinc</package>
<item><package>secvpn</package>
<item><package>pptp</package>
<item><package>freeswan</package>

</list>

<p>
IPsec (FreeSWAN) est probablement le meilleur choix parmi tous étant donné 
qu'il promet d'être fonctionnel avec tout matériel supportant l'IPsec, mais 
ces autres paquets peuvent vous aider à obtenir un tunnel sécurisé rapidement.
PPTP est le protocole Microsoft pour les VPN. Il est supporté sous Linux mais 
il est connu pour avoir de sérieux problèmes de sécurité.

<p>Pour plus d'informations lire <url
id="http://www.linuxdoc.org/HOWTO/VPN-Masquerade-HOWTO.html"name="VPN-Masquerade
HOWTO"> (couvre IPsec et PPTP) <url
id="http://www.linuxdoc.org/HOWTO/VPN-HOWTO.html"name="VPN HOWTO">
(couvre PPP à travers SSH) et <url
id="http://www.linuxdoc.org/HOWTO/mini/Cipe+Masq.html" name="Cipe
mini-HOWTO">, <url
id="http://www.linuxdoc.org/HOWTO/mini/ppp-ssh/index.html"name="PPP
and SSH mini-HOWTO">.


<sect>Public Key Infrastructure (PKI)

<p>Lorsque vous vous intéressez aux PKI, vous vous trouvez confronté à une grande variété d'outils:

<list>
<item>Une autorité de certificat qui peut vous fournir des certificats extérieurs et 
travailler sous une hiérarchie donnée

<item>Un répertoire pour conserver les certificats publics des utilisateurs 

<item>Une base de données (?) pour maintenir les listes des certificats révoqués

<item>Des périphériques interopérant avec le CA pour éditer
smartcards/usb jetons/n'importe quoi d'autre pour sécuriser les certificats 

<item>Les applications basés sur les certificats de confiance peuvent utiliser des certificats distribués par
des CA pour engager une communication chiffrée et vérifier les certificats délivrés contre un
 CRL (pour l'authentification et les solutions de signature complète unique)

<item>Une autorité estampillée pour les documents signés numériquement

<item>Une console de gestion permettant une gestion correcte de tout cela
(génération de certificat, Contrôle de liste de révocation, etc...)

</list>

<p>Vous pouvez utilisez des outils disponible sur  Debian GNU/Linux pour
couvrir un certains nombre de ses outils, cela inclus openSSL (pour la génération
de certificat), OpenLDAP (comme répertoire pour maintenir les certificats), gnupg
et le support freeswan (avec X.509). Cependant, le système d'exploitation ne fournit pas
(comme dans la version woody, 3.0) d'autorité de délivrance de certificat comme 
pyCA, <url id="http://www.openca.org" name="OpenCA"> ou l'exemple CA d'OpenSSL. 
Pour plus d'information, repportez-vous à<url
id="http://ospkme ibook.sourceforge.net/" name="Open PKI book">.

<sect>Outils antivirus 

<p>
Il n'y a pas beaucoup d'outils antivirus dans Debian, probablement 
car les utilisateurs de GNU/Linux ne sont pas ravagés réellement par 
les virus. Il y a eu, toutefois, des vers et virus pour GNU/Linux même 
s'il n'y pas (encore) eu de virus qui se soient étendus sur les 
distributions Debian. Dans tous les cas, les administrateurs peuvent 
vouloir de mettre en place des passerelles antivirus ou de se protéger 
eux-mêmes.

<p>Debian fourni à l'heure actuelle les outils suivants pour mettre 
en place des environnements antivirus :
<list>
<item><url id="http://packages.debian.org/sanitizer" name="sanitizer">, un outil
qui peut être utiliser pour filtrer le courrier de procmail et retirer les 
virus.
<item><url id="http://packages.debian.org/amavis-postfix" name="amavis-postfix">, un
script qui fourni une interface depuis le MTA jusqu'à un ou plusieurs scanners de 
virus (ce paquet fourni la version postfix).
</list>

<p>
Comme vous pouvez le voir, Debian ne fourni pas à l'heure actuelle un logiciel 
antivirus. Il existe, toutefois, des projets de logiciels antivirus qui pourront 
(dans le futur) être inclus dans Debian 
<url id="http://sourceforge.net/projects/openantivirus/" name="openantivirus">
et 
<url id="http://sourceforge.net/projects/jvirus/" name="jvirus"> (peu de chance
pour celui-ci étant donné qu'il est complètement basé sur Java). De même, Debian 
ne fournira jamais des logiciels antivirus commerciaux tels que :
<url id="http://www.pandasoftware.com/com/linux/linux.asp" name="Panda Antivirus">,
<url id="http://www.nai.com/naicommon/buy-try/try/products-evals.asp" name="NAI Netshield (uvscan)">,
<url id="http://www.sophos.com/" name="Sophos Sweep">,
<url id="http://www.antivirus.com/products/" name="TrendMicro Interscan">,
<url id="http://www.ravantivirus.com" name="RAV">....
Pour plus d'infos, voir la <url id="http://www.computer-networking.de/~link/security/av-linux_e.txt"
name="Linux antivirus software mini-FAQ">.

<chapt>Avant la compromission <--! A traduire compromise!. C'est Ok! jpg -->

<sect id="intrusion-detect">Mise en place d'un système de détection d'intrusion

<p>
Debian inclus certains outils pour la détection d'intrusion qui sont utiles
pour défendre votre système local (si vous êtes paranoïaque ou si votre 
système est rééllement critique) ou pour défendre d'autres systèmes dans 
le même réseau.

<p>
Soyez toujours aux aguets de manière à réellement améliorer la sécurité 
du système avec n'importe lequel de ces outils, vous devez avoir un 
mécanisme alerte+réaction. Donc, n'utilisez pas de système de détection 
d'intrusion si vous n'avertissez personne (ne perdez pas de temps à configurer 
des choses que vous n'utiliserez pas par la suite).

<p>
La plupart des outils de détection d'intrusion vont soit loguer dans syslog 
soit envoyer des courriers à l'utilisateur root (la plupart d'entre eux 
peuvent être configurés afin d'envoyer un courrier au lieu qu'un autre 
utilisateur le fasse) concernant le détail de l'attaque qui a été détecté.
Un administrateur doit les configurer convenablement afin que de fausses alertes 
ne soient pas envoyées. Les alertes peuvent indiquées une attaque en cours et ne seraient
pas très utiles un jour plus tard, puisque l'attaque pourrait déjà alors avoir été
couronnée de succès. Assurez-vous donc qu'une police correcte a été mise en place
vis à vis des alertes et que le mécanisme mécanique pour les implémenter est en place.

<p>
Une source d'information intéressante est 
<url id="http://www.cert.org/tech_tips/intruder_detection_checklist.html"
name="CERT's Intrusion Detection Checklist">

<sect1>Détection d'intrusion fondée sur le réseau

<p><package>snort</package> est un renifleur flexible de paquet ou un logueur
qui détecte les attaques selon un dictionnaire de signature. Il détecte une variété 
d'attaque et de vérifications, tels que des débordements de capacité, les scans dissimulés 
de ports, les attaques CGI, les vérifications SMB, et bien d'autres. Snort a une capacité
d'alerte en temps réel. C'est un outil qui peut être installé sur n'importe quel routeur
pour garder un oeil sur le réseau. Installez le simplement via
<tt>apt-get install snort</tt>, suivez les questions et regardez les logs.

<p>
Snort dans Debian est activé avec de nombreuses vérifications de sécurité 
que vous pourriez vouloir; toutefois, vous devriez prendre le temps de 
personnaliser l'installation pour prendre en compte les services que vous
utilisez sur votre système. Vous pouvez très bien aussi recevoir des vérifications
supplémentaires à propos de ces services.

<p>Vous pouvez utiliser <prgn>snort</prgn> à la fois pour établir une détection
d'intrusion sur le réseau pour un certains nombre d'hôte mais aussi pour détecter
les attaques réseaux contre votre propre hôte.

<p>Il y a d'autres outils qui peuvent être utilisés pour détecter les attaques réseaux
(bien que plus simplistes). <package>Portsentry</package> est un autre paquetage intéressant
 qui peut vous informer lorsqu'un scan de votre réseau est effectué sur votre site.
D'autres outils tel que<package>ippl</package> ou
<package>iplogger</package> peuvent aussi détecter des attaques IP (TCP et ICMP),
même s'ils ne fournissent pas de techniques avancées pour détecter 
les attaques réseaux (comme le ferait snort).

<p>Vous pouvez testez chacun de ces outils avec le programme <prgn>idswakeup</prgn>
program, un faux générateur d'alerte pour alarmer les NIDSs avec un grand nombre
de signature d'attaque commune disponible chez Debian.

<sect1>La détection fondée sur hôte 

<p><package>Tiger</package> est un ancien outil de détection d'intrusion qui
a été porté sous Debian depuis la distribution woody. Tiger
fournit un ensemble de vérification sur des problèmes communs liés aux failles de sécurité, il vérifie la 
taille des mots de passe, les problèmes du système de fichier, les process de communications...
La version Debian inclue de nouvelles vérifications de sécurité

Spécificité-Debian: somme MD5 des binaires fournis, et vérification des paquets
installés et vulnérables. L'installation par défaut fait que 
<prgn>tiger</prgn> se lance chaque jour et génère un rapport qui est envoyé 
au super-utilisateur. Les rapports ainsi générés fournissent l'information
sur les compromissions réussies sur le système.

<p>Il y a aussi un grand nombre de logiciel d'audit de log, sur-site, comme
<package>logcheck</package>. Ces outils peuvent être très utiles s'ils sont
correctement personnalisés pour alerter l'administrateur à propos d'évènements
inhabituels se produisant sur le système de fichier local. <prgn>Logcheck</prgn>
peut être grandement personnalisé, il peut donc envoyer des mails
pour des évènements récupérés par les logs qui sont dignes d'attention.
L'installation par défaut inclus des profiles pour
des évènements ignorés et des violations de police pour trois types d'installation
(station de travail, serveur et paranoïa). Le paquetage Debian inclue un
fichier de configuration <file>/etc/logcheck/logcheck.conf</file>, complété 
par le programme, indiquant à qui sont envoyé les vérifications. Il fournit aussi
une ouverture pour des paquetages qui fournissent  des services pour implémenter
de nouvelles polices dans les répertoires suivant:
<file>/etc/logcheck/hacking.d/_packagename_</file>,
<file>/etc/logcheck/violations.d/_packagename_</file>,
<file>/etc/logcheck/violations.ignore.d/_packagename_</file>,
<file>/etc/logcheck/ignore.d.paranoid/_packagename_</file>,
<file>/etc/logcheck/ignore.d.server/_packagename_</file>, and
<file>/etc/logcheck/ignore.d.workstation/_packagename_</file>. 
Cependant,peu de paquetage font actuellement cela. Si vous possédez une police qui peut être utile
aux autres utilisateurs, envoyez la comme rapport de bug pour le paquetage adéquat.
Pour plus d'information voir
<file>/usr/share/doc/logcheck/README.Debian</file>



<p>Vous pourrez aussi trouver un ensemble de vérificateurs d'intégrité (voir <ref
id="check-integ">) qui peuvent être très utiles pour instaurer une vérification d'anomalies
dans un environnement sécurisé. Une intrusion effective sur un système, à coup sûr, 
modifie les fichiers dans le système de fichier local pour contourner les polices de sécurité
locales, installer des trojans, créer des utilisateurs... ces événements peuvent être détectés
grâce à ces outils.


<sect id="kernel-patches">Les utilitaires pour mettre des rustines au noyau

<p>FIXME: Cette section a besoin de couvrir la manière d'installer ces
rustines spécifiques sur Debian en utilisant les paquets kernel-2.x.x-patch-XXX.
</p>

<p>
Il existe quelques rustines pour le noyau qui améliorent expressivement
la sécurité du système. En voici quelques un :


<list>

<item>OpenWall patch par Solar Designer.  C'est un ensemble utile de restriction
pour le noyau, comme la restriction de liens, FIFOs dans /tmp, restriction de
/proc, maniement de la description de fichiers speciaux, pile de l'utilisateur non-executable
et bien plus.  Site Internet:
<url name="http://www.openwall.com/linux/" id="http://www.openwall.com/linux/">

<item><em>LIDS &mdash; Linux intrusion detection system par Huagang Xie &amp;
Philippe Biondi</em>.  Cette rustine rend le processus de création d'un système
Linux dur plus facile. Vous pouvez restreindre chaque processus, donner les droits pour
écrire ou lire les fichiers, ou les supprimer, par défaut, vous pouvez lire 
les fichiers. De plus vous pouvez aussi installer des capacités pour certains 
processus. Bien que tout cela soit encore en phase bêta, c'est un outil incontournable
pour une administration paranoïaque d'un système. Site Internet: <url
name="http://www.lids.org" id="http://www.lids.org">

<item><em>POSIX Access Control Lists (ACLs) pour Linux</em> Cette rustine
ajoute les listes de contrôle d'accès, une méthode avancée pour restreindre 
l'accès aux fichiers, par le noyau linux. Site Internet: <url
name="http://acl.bestbits.at/" id="http://acl.bestbits.at/">

<item><em>Linux trustees</em>. Cette rustine ajoute un honnête 
système de permission à votre noyau linux. Tous les objets sont
stockés dans la mémoire noyau, ce qui permet un accès rapide pour
toutes les permissions. Site Internet: 
<url name="http://trustees.sourceforge.net/" 
id="http://trustees.sourceforge.net/">

<item><em>International kernel patch</em>.  C'est une rustine noyau 
orienté cryptage, cependant vous devez faire attention aux lois en vigueur dans
votre pays quand à la cryptographie. Il ajoute la possibilité d'utiliser des systèmes de fichiers
cryptés. Site Internet: <url
name="http://www.kerneli.org" id="http://www.kerneli.org">

<item><em>SubDomain</em>. Une extension du noyau pour créer plus facilement
et de manière plus sécurisé un environnement chroot. Vous pouvez manuellement
spécifier les fichiers nécessaires ays service chroot et n'avez pas besoin de 
compiler statiquement ces services.  Site Internet: <url
name="http://www.immunix.org/subdomain.html"
id="http://www.immunix.org/subdomain.html">

<item><em>UserIPAcct</em>.  Ce n'est pas réellement une rustine liée à la sécurité,
mais il vous permet de créer des quotas par utilisateur pour le traffic sur votre
serveur. Vous pouvez ressortir des statistiques sur le traffic utilisateur.
Site Internet: <url id="http://ramses.smeyers.be/useripacct">.

<item><em>FreeS/WAN</em>. Si vous voulez utiliser IPSec avec Linux, vous avez besoin 
de cette rustine. Vous pouvez ainsi créer des VPNs très facilement, même vers les machines
Windows, puisque IPSec est un standard commun. Site Internet: <url
id="http://www.freeswan.org">

</list>

<sect>Éviter les rootkits
<p>

<sect1 id="LKM">LKM - Loadable Kernel Modules

<p>
LKM (Loadable Kernel Modules) sont des fichiers contenant les 
composants chargeables dynamiquement dans le noyau. Ils sont 
dynamiquement chargeables dans le noyau afin de faire tourner 
certaines tâches. Sur GNU/Linux, ils sont utilisés pour étendre 
les fonctionnalités du noyau. Plusieurs avantages dans l'utilisation 
des LKMs, comme nous l'avons précédemment vu, ils peuvent être chargés 
dynamiquement sans recompiler le noyau entièrement, peuvent être 
utilisés pour spécifier des pilotes de périphériques (ou systèmes de 
fichiers) et d'autres pilotes de matériels tels que les cartes sons, 
les cartes réseaux. Mais certains pirates peuvent utilisés les LKMs 
pour les rootkits (knark et adore) afin d'installer des portes 
dérobées sur des systèmes GNU/Linux.

<p>
Les rootkits LKM peuvent cacher des processus, des fichiers, 
répertoires et même des connexions sans modifier les codes 
sources des binaires.
Par exemple, <prgn>ps</prgn> peut avoir des informations sur 
des processus depuis <file>/proc</file>, un LKM malveillant 
peut miner le noyau pour cacher des processus spécifiques de 
procfs, ainsi même une bonne copie du binaire <prgn>ps</prgn>
ne peut lister tous les processus correctement.

<sect1>Détection des rootkits

<p>
La détection peut-être simple et sans douleur ou difficile et 
usante selon la mesure que vous choisissez. Il existe deux 
mesures de défense concernant la sécurité LKM, la proactive et 
la réactive.

<sect2>Défense proactive

<p>
L'avantage de cette défense est qu'elle prévient des dommages que 
pourrait entraîner un rootkit au système. La défense proactive la 
plus utilisé est "attrapons-les en premier", ceci permet de charger 
un LKM bien défini afin de protéger le système d'un LKM infecté. 
Une autre mesure consiste à retirer ces options dans le noyau, rendant 
ainsi le système plus sécurisé. Par exemple, vous pouvez retirer la 
possibilité de charger et décharger les modules du noyau.

<p>
Sur les systèmes Debian, vous pouvez trouver certains paquets qui sont 
des outils proactifs :
<list>
<item> <package>kernel-patch-2.4-lsm</package> - LSM est le projet Linux 
Security Modules.

<item> <package>lcap</package> - Retire les "privilèges" dans le noyau, 
rendant le système plus sécurisé.
</list>

<p>
Si vous n'avez pas l'utilité de toutes ces caractéristiques sur votre 
système GNU/Linux, vous pourriez désactiver le support des modules 
lors de la configuration du noyau. Cela prévient des rootkits LKM mais 
vous ne pourrez plus utiliser les modules sur votre GNU/Linux. Faites 
attention que la désactivation des modules peut surcharger le noyau, 
parfois cela n'est pas nécessaire.

<p>Pour désactiver le support des modules chargeables, mettre juste 
CONFIG_MODULES=n dans <file>.config</file>.

<sect2>Défense réactive 


<p>
L'avantage d'une défense réactive est qu'elle représente une faible surcharge
au niveau des ressources systèmes. Elle fonctionne en comparant la table des
appels systèmes avec une copie sûre enregistrée sur disque (System.map). Le
désavantage le plus évident est qu'elle renseigne l'administrateur seulement
quand le système a déjà été compromis.

<!-- AA rootkit ? traduction officielle ? kit d'intrusions furtifs ? -->
<p>La détection des rootkits dans la Debian peut être accomplie avec
<package>chkrootkit</package>. Ce programme cherche des signes de présence
de rootkits sur le système local et dit  si l'ordinateur cible est infecté par
un rootkit.

<p>Vous pouvez aussi utiliser
<url name="SKAT" id="http://s0ftpj.org/en/site.html">. 
SKAT vérifie la zone mémoire du kernel (<file>/dev/kmem</file>) pour des
informations au sujet de l'hôte cible, ces informations incluent l'installation
de modules noyau chargeables.

<P>FIXME: Ajouter des infos sur comment compiler le noyau sans le support 
des LKM?


<sect>Idées géniales/paranoïaques &mdash; ce que vous pourriez faire

<p><!-- AA duh ? -->
C'est probablement la section la plus instable et amusante, car j'espère
que quelques unes des idées "bah. ça semble dingue" pourraient être réalisées.
Plus loin vous trouverez certaines idées &mdash; Suivant votre point de vue
vous les qualifierez de géniales, paranoïaques, folles ou sûres &mdash; pour
augmenter votre sécurité rapidement mais vous n'en sortirez pas indemne.

<list>
<item>S'amuser avec PAM.
Comme il est dit dans l'article PAM du phrack 56, la chose bien avec PAM est
qu' "On est limité seulement par son imagination." C'est vrai. Imaginez une
connexion root seulement possible avec empreinte digitale ou un scan de l'oeil 
ou une cryptocarte (Pourquoi ai-je fait une conjonction de OU et pas de ET ici).

<item>Journalisation fasciste. Je voudrais dire que tout ce dont nous avons
discuté plus haut est de la "journalisation douce". Si vous voulez effectuer
une vraie journalisation, procurez vous une imprimante avec du papier listing
<!-- traduction de fanfold ? --> et journalisez tout en l'imprimant. Ca semble
amusant, mais c'est fiable et ne peut être supprimé.

<item>Distribution CD. Cette idée est très simple à réaliser et offre une assez
bonne sécurité. Créez une distribution Debian durcie, avec les bonnes règles
pare-feu, faites-en une image ISO et gravez la sur un CD.
Rendez le amorçable. C'est une bonne distribution en lecture-seule avec seulement
600 MB d'espace pour les services, et c'est impossible pour des intrus d'obtenir
un accès en lecture/écriture sur ce système. Assurez vous juste que toutes les 
données qui devraient être écrites, soient écrites via le réseau. De toute façon,
l'intrus ne pourra changer les règles pare-feu, les entrées de routages ou
démarrer ses propres daemons (il pourra, mais après un redémarrage il aura à forcer
votre système une nouvelle fois pour les changer).

<item>Désactiver la capacité module. Quand vous désactivez l'usage des modules
noyau à la compilation, beaucoup de portes dérobées basées sur le noyau sont
impossibles à implémenter car la plupart d'entre elles sont basées sur 
l'installation de modules noyau modifiés.

<item>Journalisation par câble série (contribution de Gaby schilders).
Tant que les serveurs ont toujours des ports série, imaginez-vous ayant une machine
dédiée à la journalisation déconnectée du net au milieu avec un multiplexeur de
ports série (cyclades ou similaire). Maintenant faites journaliser vos serveurs
vers leurs ports série. Écriture seulement. La machine de journalisation 
acceptera du texte clair en entrée sur ses ports séries et écrira seulement sur
un fichier journal. Branchez un graveur de cd/dvd. Quand le journal approche
600MB il l'écrit sur un cd-rom. Maintenant si seulement ils faisaient des graveurs
avec des auto-échangeurs... Pas aussi "copie-en-dur" <!-- AA hard-copy ?..jpg --> que
l'imprimante, mais ça peut gérer de plus grand volumes et les cds ne prennent
pas autant d'espace de stockage.

<item>Rendez tout immuable (tiré du Tips-HOWTO écrit par Jim Dennis).
Tout de suite après que vous ayez installé et configuré votre système visitez
<file>/bin</file>, <file>/sbin/</file>, <file>/usr/bin</file>, <file>/usr/sbin
</file> et <file>/usr/lib</file> (et quelques un des autres suspects habituels)
et faites un usage généreux de la commande <prgn>chattr +i</prgn>.  
Ajoutez aussi cela au fichiers noyau dans la racine. Maintenant 
<prgn>mkdir /etc/.dist/</prgn> copiez tout <file>/etc/</file> (je fais cela
en deux étapes en utilisant /tmp/etcdist.tar pour éviter la récursion) dans ce
répertoire.
(En option vous pouvez juste créer /etc/.dist.tar.gz) -- et marquer cela comme
immuable.

<p>La raison de tout ceci est de limiter les dégâts que vous pouvez faire quand
 vous êtes connecté en root. Vous n'écraserez pas des fichiers avec un opérateur
 de redirection égaré, et vous ne rendrez pas votre système inutilisable avec
 un espace mal placé dans une commande <prgn>rm -fr</prgn> (vous pourriez encore
 faire pas mal de dégâts à vos données &mdash; mais vos librairies et binaires
 seront plus à l'abris).

<p>Cela rend aussi un large éventail d'exploits de sécurité et de deni de 
 service soit impossible soit plus difficile (car beaucoup d'entre eux comptent
 sur l'écrasement d'un fichier à travers les actions d'un programme SUID qui
 <em>ne fournit pas une commande shell arbitraire</em>).

<p>Le seul inconvénient de cela est présent lorsque vous compilez et exécutez votre
<prgn>make install</prgn> sur différentes sortes de binaires systèmes. D'un
autre côté cela empêche aussi le <prgn>make install</prgn> d'écraser les 
fichiers. Quand vous oubliez de lire le Makefile et chattr -i les fichiers 
qui vont être récrits (et les répertoires auxquels vous voulez ajouter des
fichiers) &dash; le make échoue, utilisez juste la commande chattr et relancez
le. Vous pouvez aussi profiter de l'occasion pour déplacer vos vieux binaires,
librairies <!-- AA ou parle t'on de répertoires ? --> ou quoique ce soit 
d'autre dans un répertoire .old/ ou les renommer ou les sauvegarder avec tar...

<p>Notez que cela vous empêche aussi de mettre à jour vos paquetages systèmes.
Car les fichiers qu'ils fournissent ne peuvent être récrits, vous pourriez donc
souhaiter avoir un mécanisme pour désactiver le sémaphore immuable sur tous
les binaires juste avant de faire un <prgn>apt-get update</prgn>.

</list>


<sect1>Construction d'un pot de miel

<p>FIXME. Nécessite plus de contenu spécifique à la Debian.

<p>Si vous le souhaitez (et pouvez aussi l'implémenter et y consacrer du temps)
vous pous pouvez aussi configurer un pot de miel complet en utilisant un système
Debian GNU/Linux. Vous avez tous les outils requis pour configurer un "réseau de
miel" (i.e. le réseau, le pot de miel est juste le serveur factice): le firewall,
le détecteur d'intrusion réseau et le faux serveur. Faites attention cependant,
vous devez être plutôt sûr d'être alerté à temps (voir <ref id="log-alerts">)
pour que vous puissiez prendre les mesures appropriées et terminer le compromis
aussitôt que vous pensez que vous en avez vu assez.

<list>

<item>la technologie pare-feu dont vous aurez besoin (fourni par les 
noyaux Linux).

<item><package>syslog-ng</package> pour envoyer les logs du pot de miel
vers un serveur syslog distant.

<item><package>snort</package> pour configurer la capture de tout le traffic
réseau arrivant sur le pot de miel et détecter les attaques.


<item><package>osh</package> qui pourrait être utilisé pour mettre en place un
shell restreint avec journalisation (voir l'article de Lance Spitzner plus bas).

<item>bien sûr, tous les serveurs que vous pouvez imaginer pour votre faux serveur 
pot de miel (mais ne durcissez <em>pas</em> le pot de miel).

<item>et aussi de faux services, fournis par <package>dtk</package> si vous
voulez aussi utiliser le honeynet comme un service de détection d'intrusion.

<item>Vérificateurs d'intégrité (voir <ref id="check-integ">) et la boîte à 
outils du légiste (The Coroner's Toolkit (<package>tct</package>)) pour faire
des audits post-attaques.

</list>

<p>Vous pouvez en lire plus sur la construction des pots de miel dans l'excellent
article de Lance Spizner
<url id="http://www.net-security.org/text/articles/spitzner/honeypot.shtml"
name="To Build a Honeypot"> (de la série des "connaissez votre ennemi"), ou
le 
<url id="http://www.zdnetindia.com/techzone/resources/security/stories/7601.htm"
name="Building your own honeypot"> de David Raikow.
De même, le <url id="http://project.honeynet.org/" name="Honeynet Project">
est dédié à la construction de pots de miel et à l'audit des attaques menées contre
eux, il y a là des informations de valeurs sur comment configurer un pot de miel et
comment auditer les résultats d'une attaque (voyez le concours).

<chapt>Après la compromission
<!-- AA After the compromise -->


<sect>Comportement général

<p>Si vous êtes physiquement présent quand l'attaque se déroule et que faire
ce qui suit n'a pas d'effet fâcheux sur vos transactions d'affaires, 
débranchez simplement la carte réseau jusqu'a ce que vous puissiez comprendre
ce que l'intrus a fait et sécurisez votre machine. La désactivation du réseau
à la couche 1 est le seul vrai moyen de garder un attaquant hors d'une machine
compromise. (Conseil sage de Phillip Hofmeister)

<p>Si vous voulez réellement corriger la compromission rapidement, vous devriez
retirer l'hôte compromis du réseau et réinstaller le système d'exploitation à
partir de zéro. Cela pourrait n'avoir aucun effet si vous ne savez pas comment
l'intrus est devenu root. Dans ce cas vous devez tout vérifier: pare-feu/
intégrité fichier/journaux de l'hôte de journalisation et caetera. Pour
plus d'informations sur quoi faire après une intrusion, voir <url name="Sans'
Incident Handling Guide" id="http://www.sans.org/y2k/DDoS.htm"> ou
<url id="http://www.cert.org/tech_tips/root_compromise.html"
name="CERT's Steps for Recovering from a UNIX or NT System Compromise">.

<sect>Sauvegarde du système

<p>Rappelez vous que si vous êtes sûr que le système a été compromis, vous
ne pouvez faire confiance aux logiciels qui s'y trouvent ou à n'importe quelle
autre information qu'il vous donne. Les applications pourraient contenir un
trojan, des modules noyau pourraient être installés, etc.

<p>La meilleure chose à faire est une sauvegarde complète du système de fichier
(en utilisant <prgn>dd</prgn>) après avoir démarré d'un média sûr. Les CDs 
Debian GNU/Linux peuvent utilement être utilisés car il fournissent un shell en
console 2 quand l'installation est commencée (allez y en utilisant Alt+2 et en
appuyant sur la touche Entrée). Le shell peut être utilisé pour sauvegarder les
informations vers un autre endroit (peut être un serveur de fichier réseau à 
travers NFS/FTP...) pour analyse pendant que le système est hors-ligne (ou 
réinstallé).

<p>Si vous êtes sûr qu'il y a seulement un module noyau trojan, vous pouvez 
essayer d'exécuter l'image noyau du CD en mode <em>rescue</em>. Assurez vous
aussi de démarrer en mode <em>single</em> de façon à ce qu'aucun autre processus
trojan ne s'exécute après le noyau.

<sect>Analyse post-mortem
<p>Si vous souhaitez rassembler plus d'informations, le paquetage <package>tct
</package> (The Coroner's Toolkit de Dan Farmer et Wietse Venema) contient
des utilitaires qui effectuent une analyse 'post mortem' d'un système.
<package>tct</package> autorise l'utilisateur à collecter des informations sur 
les fichiers effacés, processus qui s'exécutent et plus. Voir la documentation
incluse pour plus d'informations.

<p>L'analyse post mortem devrait toujours être faite sur une copie de sauvegarde
des données, <em>jamais</em> sur les données elles-même car elles pourraient être
altérées par cette analyse (et perdues).

<p>FIXME. Ce paragraphe fournira, je l'espère plus d'informations sur la
"médecine légale" <!-- AA Analyse post-mortem ? (forensics)--> sur un système Debian dans
un futur proche.

<p>FIXME: décrire comment faire des debsums sur un système stable avec md5sums
sur un CD et avec le système de fichiers récupérés restorés sur une partition 
séparée

<chapt>Foire Aux Questions (FAQ)

<p>
Ce chapitre introduit quelques questions qui reviennent souvent sur 
la liste de diffusion de sécurité. Vous devriez les consulter avant de 
poster sur la liste ou certains pourraient vous dire d'aller RTFM.

<sect>La sécurité dans le système d'exploitation Debian

<sect1>Debian est-il plus sûr que X ?
<p>
Un système est aussi sûr que l'administrateur est capable de le rendre.
Debian essaye d'installer les services d'une façon <em>sûre par défaut</em> et ne peut pas être aussi paranoïaque que d'autres systèmes exploitations 
qui installent tous les services <em>désactivés par défaut</em>. Toutefois,
l'administrateur système a besoin d'adapter la sécurité du système à la 
politique de sécurité locale.

<sect1>De nombreux bogues Debian sont listés dans bugtraq, cela le rend il 
plus vulnérable ?

<p>
Debian contient un certains nombres de paquetages et différents logiciels,
probablement plus que certains systèmes d'exploitation propriétaires. Cela
signifie qu'il y a un plus grand risque de trouver des logiciels proposant
des failles de sécurité exploitable que sur certains systèmes contenant
moins de logiciels. 

<p>Cependant, il y a de nombreux papiers consultatifs liés à l'audit
de code source effectué sur des composants logiciels majeurs livrés dans
Debian. Lorsque un de ces audits de code source fait ressortir une faille
majeur, elle est réparée et un papier est envoyé aux listes telle que celle
de Bug Traq.

<p>Les bugs présents dans la distribution Debian affectent également d'autres
vendeurs et d'autres distributions.  Vérifiez la partie "Debian
specific: yes/no" en haut de chaque document (DSA).  Si il est inscrit
"yes", cela signifie que seul Debian est affecté, si il est inscrit "no", c'est probablement
que d'autres distributions sont aussi affectées.


<sect1>Debian possède t'il une certification touchant à la sécurité?

<p>Réponse courte : non. 

<p>Réponse longue : la certification coûte de l'argent et personne
n'a attribué de ressources pour faire certifier la distribution Debian 
GNU/Linux à n'importe quel niveau que ce soit, par exemple, la Common 
Criteria. Si vous êtes intéressés par l'obtention d'une distribution
GNU/Linux certifié, essayez de fournir les ressources pour que cela
devienne possible.

<sect1>Existe-t-il un programme de durcissement pour Debian ?

<p>Oui. <url name="Bastille Linux"
id="http://www.bastille-linux.org">, orienté à la base vers certaines 
distributions Linux(RedHat et Mandrake), fonctionne actuellement sur 
Debian. La planification prévoit d'intégrer les changements à la version
en amour, dans tous les cas, le paquetage Debian est nommé, bien sûr,
<package>bastille</package>.

<p>
Certains pensent, cependant, qu'un outil de durcissement n'élimine 
pas la nécessité d'une bonne administration.

<sect1>Comment sécuriser davantage un service XYZ dans la Debian ? 
<!-- Changed to XYZ in order to avoid confusion :) jfs -->

<p>
Les informations disponibles dans ce document vous permettront de 
rendre certains services (FTP, Bind) plus sécurisés dans la Debian GNU/Linux. 
Toutefois, pour les services non abordés ici, vous pouvez vérifier la 
documentation des programmes ou les informations générales Linux.
La plupart des directives concernant la sécurité pour les systèmes Unix 
peut également s'appliquer à la Debian. Ainsi, la sécurisation d'un service 
X dans la Debian revient, la plupart du temps, à sécuriser un service comme pour 
n'importe quelle autre distribution Linux (ou Unix, peu importe).

<sect1>Les paquets Debian sont-ils tous sûrs ?

<p>L'équipe de sécurité Debian ne peut pas analyser tous les paquets inclus
dans Debian pour tester des potentielles failles de sécurité, puisque il n'y a tout simplement
pas assez de ressources pour auditer le code source de l'ensemble du projet.
Cependant Debian bénéficie des audits de code source réalisés en amont par des 
développeurs d'autres projets comme
<url name="Linux Kernel Security Audit Project" id="http://kernel-audit.sourceforge.net/">
or the <url name="Linux Security-Audit Project" 
id="http://www.lsap.org/">.

<p>Au fond, un développeur Debian peut distribuer un trojan dans un paquet 
et il n'y a pas moyen de le vérifier. Même s'il était introduit dans 
la Debian, il serait impossible de couvrir toutes les situations imaginables 
dans lesquelles le trojan pourrait agir.

<p>Cela colle a la clause <em>aucune garanties</em> de la license. Dans 
tous les cas, les utilisateurs Debian peuvent être assurés que le code stable
rassemble une large audience et que la plupart des problèmes seront découvert
de pendant l'utilisation (si problème il y a). Il n'est pas recommandé d'installer
des logiciels non testés dans un système correct (si vous n'êtes pas en mesure
de fournir un nécessaire audit de code). Pour finir, si des failles de 
sécurités étaient incluses dans la distribution, le processus permettant de 
les inclure (utilisation de signature numérique) assure que le problème pourra
être remonté jusqu'au développeur, et que le projet Debian ne prend pas cela à
la légère.

<sect1>Les utilisateurs et les groupes du système d'exploitation

<sect2>Tous les utilisateurs systèmes sont-ils nécessaires ?

<p>Oui et non. Debian est livrée avec certains utilisateurs prédéfinis 
(id &lt; 99 comme décrit dans  <url name="Debian Policy"
id="http://www.debian.org/doc/debian-policy/">) afin de faciliter  
l'installation de nouveaux services (ils sont déjà 
lancés par l'utilisateur approprié). Si vous n'avez pas l'intention 
d'en installer de nouveaux, vous pouvez supprimer sereinement 
ces utilisateurs qui ne possèdent aucun fichier sur votre système et 
qui n'exécutent aucun service.

<p>Vous pouvez facilement trouver les utilisateurs ne possédant aucun 
fichier en exécutant la commande suivante (soyez sûr de l'exécuter en 
tant que root, étant donné qu'un utilisateur ordinaire pourrait ne pas 
avoir les droits nécessaires pour accéder à certains répertoires 
sensibles):

<!-- Libre à vous de rendre ce script plus sécurisé ... >:^) // era -->
<example>
cut -f 1 -d : /etc/passwd |
while read i; do find / -user "$i" | grep -q . && echo "$i"; done
</example>

<p>Ces utilisateurs sont fournis par <package>base-passwd</package>. Vous
trouverez dans sa documentation plus d'informations sur la manière dont 
ces utilisateurs sont gérés dans Debian..

<p>La liste des utilisateurs par défaut (avec un groupe correspondant):

<list>

<item>root:
	Root est (typiquement) le super utilisateur.

<item>daemon:
	
	Quelques démons non privilégiés ont besoin d'être capable d'écrire sur certains
	fichiers du disque en tant que démons (portmap, atd, probably others).
	Les démons qui n'ont besoin d'aucune appropriation de fichier peuvent tourner en tant
	que nobody.nogroup, et plus complexe, des démons de sécurité tournent en tant qu'utilisateurs
	spécifiques. L'utilisateur démon est aussi utile pour les démons installés localement.

<item>bin: 
	   maintenu pour des raisons historiques.

<item>sys:
	   la même chose qu'avec bin.
              Toutefois, /dev/vcs* et /var/spool/cups sont la propriété du 
              groupe sys.

<item>sync:
	Le shell de l'utilisateur sync est /bin/sync. Donc,si son mot de passe est 
	quelque chose de facile à deviner (comme ""), n'importe qui peut synchroniser le système 
	à la console même si il n'a pas de compte sur le système
	
<item>games:
	De nombreux jeux sont sgid à games ainsi ils peuvent écrire dans les fichiers 
	des meilleurs scores. Ceci est expliqué dans les règles.
	
<item>man:
	Le programme man est (parfois) lancé en tant qu'utilisateur man, il peut alors écrire
	les pages cat vers <file>/var/cache/man</file>

<item>lp:
	Utilisé par les daemons printer.

<item>mail:
	Les boîtes aux lettres dans <file>/var/mail</file> appartiennent au 
	groupe mail, comme décrit dans la politique. L'utilisateur et le 
	groupe sont utilisés à d'autres fins de même que par différents MTA.

<item>news:
	Plusieurs serveurs de news et autres programmes associés (tel suck)
	utilisent l'utilisateur et le groupe news de différentes façons. 

	Les fichiers dans la file d'attente des news sont souvent appropriés
	par l'utilisateur et le groupe news. Les programmes tel que inews qui
	peuvent être utilisés pour poster des news son typiquement sgid news.

<item>uucp:
	L'utilisateur et le groupe uucp est utilisé par le sous-système UUCP.
	Il gère les fichiers de spool et de configuration. Les utilisateurs 
	du groupe uucp peuvent faire marcher uucico.

<item>proxy:
	Comme daemon, cet utilisateur et groupe est utilisé par certains 
	daemons (particulièrement les daemons proxy) qui ne possèdent pas 
	d'id utilisateur et qui ne nécessite pas la possession de fichiers. 
	Par exemple, le groupe proxy est utilisé par pdnsd et squid tourne 
	en tant qu'utilisateur proxy.

<item>majordom:
	Majordomo a un uid alloué statiquement sur les systèmes Debian pour 
	des raisons historiques. Il n'est plus installé sur les nouveaux systèmes.
	
<item>postgres:
	Les bases de données postgresql appartiennent à cet utilisateur et groupe.
	Tous les fichiers dans <file>/var/lib/postgresql</file> appartiennent à cet 
	utilisateur afin d'imposer un niveau de sécurité convenable.

<item>www-data:
	Certains navigateurs web tournent en tant que www-data. 
	Le contenu Internent *ne devrait pas* être approprié par cet utilisateur,
	ou un serveur Internet compromis serait alors en mesure de récrire un
	site web. Les données transférées par les serveurs Internet, incluant les 
	fichiers logs, seront appropriées par www-data.

<item>backup:
	De cette manière la responsabilité de Sauvegarde/restauration peut être
	localement déléguée à quelqu'un sans qu'il ait toutes les permissions de root.
	
<item>operator:
	Operator est historiquement (et pratiquement) le seul compte "utilisateur"
	qui peut se loguer à distance, et qui ne dépend pas de NIS/NFS.
	
<item>list:
	Les archives des mailing liste et les données appartiennent à l'utilisateur et le groupe.
	Certains programmes de mailing liste utilisent aussi cet utilisateur.
	
<item>irc:
	Utilisé par les démons irc. Un utilisateur alloué statiquement est nécessaire
	à cause d'un bug dans ircd -- il se setuid()s lui-même pour un UID donné au
	démarrage.

<item>gnats.
 
<item>nobody, nogroup:
	Daemons that need not own any files run as user nobody and group
	nogroup. Thus, no files on a system should be owned by this user or
	group.

</list>

<p>Autres groupes qui n'ont pas d'utilisateur associé :

<list>

<item>adm:
	Le groupe adm est utilisé pour les tâches de surveillance du système. Les membres 
	de ce groupe peuvent lire de nombreux journaux d'évenements dans /var/log et 
	peuvent utiliser xconsole. Historiquement, /var/log était /usr/adm (et plus tard 
	/var/adm)d'où le nom du groupe.

<item>tty:
	les dispositifs Tty appartiennent à ce groupe. On l'utilise pour écrire et empêcher 
	la possibilité d'écrire sur les tty d'autres personnes.

<item>disk:
	Accès en dur vers les disques. Le plus proche de l'accès root.

<item>kmem:
	/dev/kmem et les fichiers similaires sont lisible par ce groupe. C'est la plupart
	du temps un reste de BSD BSD, mais certains programmes en ont besoin pour un 
	accès direct en lecture sur la mémoire du système ce qui peut ainsi être fait par
	sgid kmem.

<item>dialout:
	Accès direct et total aux ports séries. Les membres de ce groupe peuvent reconfigurer
	les modems, connectique de téléphonie, etc.

<item>dip: 
	Le nom du groupe signifie "Dialup IP". Etre dans le groupe dip
	permet d'utiliser un outil tel que <prgn>ppp</prgn>,
	<prgn>dip</prgn>, <prgn>wvdial</prgn>, etc. pour établir une 
	connexion. Les utilisateurs de ce groupe ne peuvent pas configurer le 
	modem, ils peuvent juste utiliser les programmes qui en font l'usage.

<item>fax:
	Autorise les membres à utiliser les logiciels de fax pour envoyer et 
	recevoir des faxes.

<item>voice:
	Voicemail, utile pour les systèmes qui utilisent leur modem comme 
	répondeur.

<item>cdrom:
	Ce groupe peut être utiliser localement pour donner à certains utilisateurs
	un accès à un lecteur cdrom.

<item>floppy:
	Ce groupe peut être utiliser localement pour donner à certains utilisateurs
	un accès à un lecteur de disquettes.

<item>tape:
	Ce groupe peut être utiliser localement pour donner à certains utilisateurs
	un accès à un lecteur de bandes.

<item>sudo:
	Les membres de ce groupe n'ont pas besoin de fournir un mot de passe lors de 
	l'utilisation de sudo. Voir <file>/usr/share/doc/sudo/OPTIONS</file>.

<item>audio:
	Ce groupe peut être utiliser localement pour donner à certains utilisateurs
	un accès à un périphérique audio.

<item>src: 
	Ce groupe possèdent les codes sources, incluant les fichiers dans 
	<file>/usr/src</file>. Il peut être utiliser afin de donner à un utilisateur 
	la capacité de manipuler les codes sources du système.

<item>shadow:
	<file>/etc/shadow</file> est lisible par ce groupe. Certains programmes 
	qui ont besoin d'accéder à ce fichier sont set gid shadow.

<item>utmp: 
	Ce groupe peut écrire dans <file>/var/run/utmp</file> et dans les fichiers 
	similaires. Les programmes qui nécessitent l'écriture sont sgid utmp.

<item>video:
        Ce groupe peut être utiliser localement pour donner à certains utilisateurs
	un accès à un périphérique vidéo.
	
<item>staff: 
	Autorise les utilisateurs à ajouter des modifications au système local
	(<file>/usr/local</file>, <file>/home</file>) sans les privilèges root.
	Comparé au groupe "adm" qui lui est plus apparenté à la surveillance/sécurité.<--!traduction de monitoring. -> surveillance. jpg -->

<item>users:
	Tandis que les systèmes Debian utilisent le système de groupe par 
	utilisateur par défaut (chaque utilisateur à son propre groupe), certains
	préfèrent d'utiliser un système de groupe plus traditionnel.
	Dans ce système, chaque utilisateur est un membre du groupe "users".

</list>

<sect2>Quelle est la différence entre les groupes adm et staff ?
<p>

<p>Le groupe 'adm' rassemble les administrateurs et est utile afin de le autoriser 
à lire les journaux d'activités sans avoir à utiliser <prgn>su</prgn>. Le groupe 'staff'
est profitable pour des personnes du genre administrateur système helpdesk/junior et 
leur offre la capacité de faire des choses dans <file>/usr/local</file> et de créer 
des répertoires dans <file>home</file>.


<sect1>Question concernant les services et les ports ouverts

<sect2>Pourquoi tous les services sont-ils activés lors de l'installation ?

<p>Ceci est juste une approche qui est, d'un côté,
une sécurité présente et d'un autre coté l'utilisation amicale. Contrairement à
OpenBSD, qui désactive tous les services à moins que ceux-ci soit activés 
par l'administrateur, Debian GNU/Linux activera tous les services installés
à moins de les désactiver(see <ref id="disableserv"> pour plus d'information).
Après tout, vous avez installés ces services de votre propre chef, n'est ce pas?

<p>Il y a un grand nombre de discussions sur les mailings listes Debian (sur
debian-devel et debian-security) à propos de ce que doit être l'installation 
standart. Cependant, il n'y a pas de consensus à ce jour (10 mars 2002) 
sur la solution à adopter.

<sect2>Puis-je retirer inetd?

<p>Inetd n'est pas aisé à retirer étant donné que <package>netbase</package>
dépend du paquet qui le fourni à savoir (<package>netkit-inetd</package>. 
Si vous voulez le retirer, vous pouvez soit le désactiver (voir <ref 
id="disableserv"> ou retirer le paquet en utilisant le paquet 
<package>equivs</package> à la place.

<sect2>Pourquoi ai-je le port 111 d'ouvert ?

<p>Le port 111 est mappeur de port sunrpc, il est installé par défaut dans
toutes les installations de base d'un système Debian puisqu'il est requit pour savoir
lorsque le programme d'un utilisateur a besoin de RPX pour fonctionner correctement. 
Dans tous les cas, il est utilisé en grande partie pour NFS. Si vous n'en avez 
pas besoin retirer le comme décrit dans <ref id="rpc">.

<sect2>Pour quel usage est employé identd (113)?

<p>Identd est employé par les administrateurs pour fournir les détails userid
aux systèmes distants qui veulent savoir qui est la personne responsable 
pour une connexion donnée sur votre machine. Cela inclus notamment les serveurs mail,
FTP et IRC, cependant, il peut être utilisé pour remonter l'utilisateur qui attaque
un système distant par l'intermédiaire de votre machine.

<p>Pour suivre une longue discussion à ce propos, voir <url
id="http://lists.debian.org/debian-security/2001/debian-security-200108/msg00297.html"
name="mailing list archives">, basiquement, si vous ne savez pas à quoi cela sert, 
ne l'activez pas. Mais si vous le bloquez par un pare-feu, <em>s'il vous plaît</em> créez une règle de rejet et non pas une règle de déni, autrement la communication
pourrait continuer jusqu'à réception d'une expiration de délai (timeout)(see <url
id="http://logi.cc/linux/reject_or_deny.php3" name="reject or deny
issues">).


<sect2>J'ai vérifié et j'ai le port suivant (XYZ) d'ouvert, puis-je le fermer ? 

<p>
Bien sûr que vous pouvez, les ports que vous laissez ouvert doivent 
adhérer à la politique de votre site concernant les services publiques 
disponibles pour les autres systèmes. Vérifiez s'ils sont ouvert par 
inetd (voir <ref id="inetd">) ou par d'autres paquets installés et prenez
les mesures adéquates (configuration d'inetd, suppression du paquet, éviter
qu'il démarre au démarrage, ...)

<sect2>J'ai retiré les services de <file>/etc/services</file>, suis-je ok ? 

<p><em>Non</em>, le fichier <file>/etc/services</file> fourni juste une 
cartographie d'un nom virtuel à un numéro de port donné, la suppression des 
noms ne va pas (en général) prévenir les services d'être lancés. Certains
daemons ne se lanceront pas si <file>/etc/services</file> est modifié mais 
ce n'est pas dans la norme et ce n'est pas la manière recommandée de faire. 
Pour ceci voir <ref id="disableserv">.

<sect1>J'ai perdu mon mot de passe et je ne peux plus accéder au système !

<p>Les démarches à prendre afin de récupérer votre système dépend si vous avez 
ou pas appliqué les différentes procédures concernant la limitation d'accès à 
Lilo et au BIOS.

<p>Si vous les avez limités tous les deux. Vous devez désactiver les 
fonctionnalités du BIOS (démarrer uniquement depuis le disque dur) avant de 
commencer, si vous avez également oublier votre mot de passe pour le BIOS, vous 
devrez ouvrir votre système et retirer manuellement la pile du BIOS.

<p>Si vous avez des CD-Rom ou des disquettes de démarrage, vous pouvez :
<list>

<item>démarrer depuis une disquette et démarrer le noyau

<item>accéder aux consoles virtuelles (Alt+F2)

<item>monter le disque dur où votre /root est 

<item>éditer (la disquette de secours de la Debian 2.2 est livrée avec 
<prgn>ae</prgn>, la Debian 3.0 est livrée avec <prgn>nano-tiny</prgn> qui est 
similaire à <prgn>vi</prgn>) <file>/etc/shadow</file> et changer la ligne :

<example>
root:asdfjl290341274075:XXXX:X:XXXX:X::: (X=n'importe quel nombre)
</example>

<p>to:

<example>
root::XXXX:X:XXXX:X:::
</example>

</list>

<p>Ceci retirera le mot de passe root. Vous pouvez démarrer le système 
et vous connecter en tant que root (avec un mot de passe vide)
depuis le prompt login:. Ceci fonctionnera ainsi jusqu'à ce que vous ayez 
configuré le système plus solidement, par exemple, vous autorisez des
utilisateurs avec des mots de passe nul et le root peut se loguer à
partir de la console.

<p>Si vous avez aussi introduit ces caractéristiques, vous devrez entrer
en utilisateur unique. LILO nécessite de n'avoir aucune restriction, 
si vous en avez mis en place relancer <prgn>lilo</prgn> après le reset du root
sus-mentionné. C'est rusé puisque votre <file>/etc/lilo.conf</file>
devra être modifié pour obtenir un système de fichier / qui est un disque virtuel
et non un réel disque dur.

<p>Une fois que LILO n'est plus restreint, vous pouvez:

<list>

<item>Pressez les touches Alt, shift ou Control juste avant que le système BIOS
ne finisse, pour obtenir le prompt de LILO.

<item>Taper 'linux single', 'linux init=/bin/sh' ou 'linux 1' au prompt.

<item>vous devriez arriver un prompt shell un mode utilisateur unique (il vous demandera
un mot de passe, mais vous le saviez déjà)

<item>remonter en lecture/écriture la partition /
<example>
mount -o remount,rw /
</example>

<item>changez le mot de passe du super-utilisateur avec <prgn>passwd</prgn> (étant 
donné que vous êtes le super-utilisateur, l'ancien mot de passe ne vous sera pas 
demandé).

</list>

<sect>Mon système est vulnérable !

<sect1>J'ai souffert d'une intrusion, que dois-je faire ?

<p>Lire ce document et prendre les mesures appropriées récapitulés ici.
Si vous avez besoin d'aide, vous pouvez utiliser debian-security@lists.debian.org 
pour demander conseil sur la manière de rétablir/raccommoder votre système.

<sect1>Comment puis-je dépister une attaque ?

<p>En regardant les logs (s'ils n'ont pas été modifiés), en utilisant 
un système de détection d'intrusion (voir <ref id="intrusion-detect">),
<prgn>traceroute</prgn>, <prgn>whois</prgn> et outils similaires 
(incluant des analyses légales) vous pouvez rechercher la source de l'attaque.

La manière dont vous devez réagir sur ces information dépend uniquement
de vos règles de sécurité, et de ce que <em>vous</em> considérez comme une attaque
Un scan distant est il une attaque? Un test de failles de sécurité est il une attaque?

<sect1>le program X dans Debian est vulnérable, que dois-je faire?
<p>Tout d'abord, prenez un moment pour regarder si la vulnérabilité a été
annoncée sur les mailing listes publiques de sécurité (comme Bugtraq) ou
autre forums. L'équipe de sécurité Debian se met à jour à l'aide de ces listes,
ils sont donc peut être déjà conscient du problème. Ne lancez pas d'autres actions
si vous avez vu paraître l'annonce sur <url id="http://security.debian.org">.
<p>Si vous n'avez rien vu de cela, envoyez s'il vous plaît sur les paquets affectés 
avec une description de la vulnérabilité rencontrée aussi détaillée que possible 
(la preuve par un code conçu est aussi bienvenue) à security@debian.org qui vous mettra
en rapport avec l'équipe de sécurité.

<sect1>Le numéro de version pour un paquet indique que j'utilise une version vulnérable!
<p>Au lieu de mettre à jour une nouvelle version nous appliquons la rustine de sécurité
à la version présente dans la version stable. La raison pour laquelle nous agissons 
ainsi est simple. Elle permet d'assurer qu'une version a le moins de changement possible,
de cette manière les choses ne changeront pas ou ne se briseront pas et ce dû à une
mise à jour de sécurité. Vous pouvez vérifier que vous utilisez une version sécurisée
de votre paquet en regardant le changelog du paquet ou en comparant 
(version antérieure -slash- version Debian) exactement le numéro de version
avec celui indiqué dans le journal de sécurité Debian (Debian Security Advisory).              

<sect1>J'ai trouvé des utilisateurs utilisant 'su' dans mes logs.
<p>Vous pouvez trouver des lignes comme celles-ci dans vos logs:
<example>
Apr  1 09:25:01 server su[30315]: + ??? root-nobody
 Apr  1 09:25:01 server PAM_unix[30315]: (su) session opened for user nobody by (uid=0)
</example>
<p>Ne vous inquiétez pas trop, vérifiez d'abord si ceci n'est pas dû
au travail d'un job placé dans la cron
(habituellement <file>/etc/cron.daily/find</file> ou <prgn>logrotate</prgn>):

<example>
$ grep 25 /etc/crontab
25 6    * * *   root    test -e /usr/sbin/anacron || run-parts --report
/etc/cron.daily
$ grep nobody /etc/cron.daily/*
find:cd / && updatedb --localuser=nobody 2>/dev/null
</example>


<sect1>Logiciels spécifiques

<sect2>Proftpd est vulnérable à une attaque du type "Denial of Service"

<p>Ajouter <tt>DenyFilter \*.*/</tt> à votre fichier de configuration, pour plus 
d'informations voir <url id="http://www.proftpd.org/critbugs.html">.


<sect>Questions concernant l'Equipe Sécurité Debian

<!-- FIXME: update from web page -->

<sect1>Qu'est ce qu'un rapport de sécurité Debian (Debian Security Advisory (DSA)) 

<p>C'est l'information envoyée par l'Equipe de Sécurité Debian (voir ci-dessous) 
informant qu'une mise à jour de sécurité concernant une vulnérabilité est disponible
pour le système d'exploitation Debian. Les DSAs signés sont envoyés aux mailing
listes publique et postés sur le site Debian (sur la page de garde
et sur <url id="http://www.debian.org/security/" name="security area">).
<p>Les DSAs incluent les informations sur les paquets affectés, le bug
découvert et l'endroit où récupérer les paquets mis à jour (ainsi que leurs sommes MD5).

<sect1>La signature sur le rapport Debian ne se vérifie pas correctement!

<p>C'est la plupart du temps un problème de fin de message. La liste
   debian-security-announce a un filtre qui autorise uniquement le poste des messages
   ayant une signature correcte appartenant à un des membres de l'équipe de sécurité.

<p>D'autre part, certains logiciels de courrier changent la fin des messages
   ce qui rompt la signature. Assurez-vous pour cela que votre logiciel
   ne fait aucun encodage ou décodage MIME, ou de conversion de taulation/espace.

<p>Des coupables connus sont fetchmail (avec l'option mimedecode activée)
  et formail (pour procmail 3.14 uniquement).

<sect1>Comment les incidents sont-ils gérés dans Debian ? 

<p>Dès que l'Equipe Sécurité reçoit une notification d'un incident, 
un ou plusieurs membres l'inspecte et délibère si Debian/stable est 
vulnérable ou pas. Si votre système est vulnérable, un travail est 
entrepris pour résoudre le problème. Le responsable du paquet est 
également contacté s'il n'a pas déjà contacter l'Equipe Sécurité. 
Finalement, la solution est testée et de nouveaux paquets sont 
préparés qui sont ensuite compilés sur toutes les architectures 
stables et mis à disposition après coup. Après que toutes ces tâches 
soient terminées un "Debian Security Advisory (DSA)" est envoyé sur 
les listes de diffusions publiques.

<sect1>Combien de temps faudra-t-il à debian pour résoudre la vulnérabilité XXXX?

<p>L'analyse du temps que prend l'Equipe de Sécurité Debian pour envoyer
un rapport et produire un paquet réparé à partir du moment où une vulnérabilité
est connue, démontre qu'il faut un temps minimal avant que cette vulnérabilité ne soit
réparée dans la distribution stable.

<p>Un rapport 
<url id="http://lists.debian.org/debian-security/2001/debian-security-200112/msg00257.html" name="published in the debian-security mailinglist">
montre que durant l'année 2001, il fallait un temps moyen de
35 jours à l'Equipe de Sécurité Debian pour sécuriser les vulnérabilités découvertes. 
Cependant, plus de 50% de ces vulnérabilités ont été réparé dans un espace
de dix jours, et plus de 15% de celles-ci ont été réparé <em>le jour même</em> de la sortie du rapport.

<p>Cependant, quand ils posent cette question les gens 
ont tendance à oublier que:
<list>
<item>Les DSAs ne sont pas envoyés jusqu'à ce que:
<list>
<item>les paquets soient disponibles pour <em>toutes</em>
les architectures supportées par Debian (Cela prend du temps pour les paquets
qui font partie intégrante du système core, spécialement si on considère le nombre
d'architecture supporté dans la version stable).
<item>Les nouveaux paquets sont ensuite testés pour s'assurer qu'aucun
nouveau bug ne s'est introduit
</list>
<item>Les paquets doivent être disponibles avant que le DSA ne soit envoyé (dans la file
d'arrivée ou sur les miroirs).
<item>Debian est un projet basé sur le volontariat.
<item>Il y une clause de "non-garantie", qui est une part de la licence livrée avec
la Debian.
</list>

<sect1>Comment est assurée la sécurité pour les versions <tt>testing</tt> et <tt>unstable</tt>?
<p>La réponse courte est: il n'y en a pas. Testing et unstable évoluent très rapidement
   et l'équipe de sécurité  n'a pas les ressources nécessaires pour les supporter correctement.
   Si vous désirez un serveur stable et sécurisez nous vous encourageons fortement
   à rester sur une version stable.

<p><em>Cependant</em>, dans les faits, unstable est mis à jour
très rapidement puisque les mises à jour de sécurité sont plus 
rapidement disponible en amont (Pour les autres versions, comme celles
introduites dans la stable, il est nécessaire de faire un report).

<sect1>Pourquoi n'y a t'il pas de miroir officiel de security.debian.org?
<p>A: Le but de security.debian.org est de mettre à disposition les mises
   à jour de sécurité aussi vite et facilement que possible. Les mirrors 
   ajouteraient un niveau de complexité qui n'est pas nécessaire et qui
   provoquerait une certaine frustration en cas de non mise à jour.

<!-- FIXME:
Q: J'ai vu le DSA 100 et le DSA 102, mais maintenant où est le DSA 101?
A: Quelques vendeurs (la plupart de GNU/Linux, mais aussi des dérivés de
   BSD) coordinent les rapports de sécurités pour certains incidents et
   se mettent d'accord pour une ligne d'édition particulière, de cette
   manière tous les vendeurs sont en mesure de faire une version de leur
   rapport, et en conséquence laisse temporairement vide un ou plusieurs
   numéros de rapport.
-->

<sect1>Comment joindre l'équipe Sécurité ?

<p>A: Les informations de sécurité peuvent être envoyées à security@debian.org, 
   qui est lu par tous les développeurs Debian. Si vous disposez d'informations
   sensible, utilisez team@security.debian.org qui n'est lu que par les membres
   de l'équipe de sécurité. Si vous le désirez, le mail peut être chiffré à l'aide
   de la clef de contact de la sécurité Debian(key ID 363CCD95).

<sect1>Quelles différence existe-t-il entre security@debian.org et 
debian-security@lists.debian.org?

<p>Lorsque vous envoyez des messages à security@debian.org, ceux-ci
sont envoyés aux mailing listes des développeurs (debian-private) à laquelle
tous les développeurs Debian sont inscrits; tous les envois à cette liste
sont tenus confidentiels (i.e. ne sont pas archivés sur le site public). 
Debian-security@lists.debian.org est une mailing liste publique,
ouverte à tous ceux qui le désirent, et des archives sont disponible pour
la recherche à partir du site Internet.


<sect1>Comment puis-je aider l'équipe sécurité Debian ? 

<p>
<list>
<item>En contribuant à ce document, en résolvant les FIXMEs ou en fournissant 
un nouveau contenu. La documentation est importante et réduit le nombre 
de réponses aux problèmes courants. La traduction de ce document dans d'autres 
langues est également un bonne contribution.

<item>En empaquetant des applications utiles pour pourvoir/vérifier la sécurité 
sur/en utilisant un système Debian. Si vous n'êtes pas un développeur, déposer 
un <url name="WNPP bug" id="http://www.debian.org/devel/wnpp/"> et proposer des 
logiciels que vous pensez utiles et qui ne sont pas encore disponibles.

<item>Contrôler les applications dans Debian ou aider à résoudre les bogues et 
rapporter les problèmes à security@debian.org. Le travail d'autres projets tels que 
<url name="Linux Kernel Security Audit Project" id="http://kernel-audit.sourceforge.net/">
ou <url name="Linux Security-Audit Project"
id="http://www.lsap.org/"> accroît la sécurité de Debian GNU/Linux dès lors que 
les contributions apportent, éventuellement, une aide supplémentaire.

</list>

<p>
Dans tous les cas, s'il vous plaît, passez en revue chaque problème 
avant de les rapporter à security@debian.org. Si vous êtes capable de fournir 
des rustines, cela accélérera le processus. Ne faites pas juste suivre le 
courrier de bugtraq étant donné qu'il a déjà été reçu. Fournir tout autre 
information est cependant toujours une bonne idée.

<sect1>Qui compose l'Equipe de Sécurité ?

<p>
l'Equipe de Sécurité Debian se résume à cinq membres et deux secrétaires. 
l'Equipe Sécurité elle-même invite tout le monde à se joindre à l'équipe.

<sect1>l'Equipe Sécurité Debian vérifie-t-elle chaque nouveau paquet dans Debian ? 

<p>
Non, l'équipe securité Debian ne vérifie pas tous les paquets et il n'existe pas 
de vérification automatique (lintian) afin de déceler de nouveaux paquets 
malveillants étant donné que ces vérifications sont plutôt impossible à détecter 
automatiquement. Les développeurs, toutefois, sont complètement responsables du
logiciel qui est introduit dans Debian et aucun logiciel n'est introduit tant 
qu'il n'est pas signé par des développeurs habilités. Ceux-ci ont la responsabilité 
d'analyser le logiciel qu'ils maintiennent et la sécurité afférante. <--! Attente d'une meilleure traduction. Fait. jpg -->

<sect1>Je possède un ancienne version de Debian, la sécurité est-elle supportée ?

<p>
Malheureusement non, l'Equipe Sécurité Debian ne peut pas gérer les deux versions 
stables (officieusement elle ne gère pas non plus la version unstable) et d'autres 
anciennes versions. Cependant, vous pouvez espérer des actualisations de la sécurité 
pour une période limitée juste après la sortie de la nouvelle distribution Debian.

<appendix>La procédure de durcissement étape par étape

<!--
# J'ai pris la liberté de changer cette "liste de vérification" par 
# "processus pas à pas" puisque ça n'a pas réellement la forme 
# d'une liste de vérification, et j'ai ajouté une liste de vérification
# différente. Le remaniement est plus pour éviter la confusion que pour 
# autre chose. // era
-->

<p>
Une procédure est toujours utile étant donné qu'elle permet de voir 
les étapes du durcissement du système et permet une prise de décisions.
Une approche possible d'une telle procédure pour Debian 2.2 GNU/Linux est 
présentée ci-dessous. Ceci est une procédure post-installation, avec une 
liste de mesures à prendre en compte, étape par étape, lors de la 
configuration voir <ref id="checklist">. De même que, cette procédure est 
(pour le moment) plus orientée sur le renforcement des services réseaux.

<list>

<item>
Faire une installation du système (tenez compte des informations dans ce 
manuel concernant le partitionnement). Après l'installation de base passez 
dans l'installation traditionnelle, ne sélectionnez pas les paquets "task" 
mais sélectionnez les mots de passe "ombrés".

<item>Passer en revue avec <prgn>dselect</prgn> et retirer les paquets 
non nécessaire mais sélectionnés avant de faire [I]nstall. Laisser le strict 
minimum de logiciels sur le serveur.

<item>Actualiser tous les logiciels à partir des paquets disponibles 
sur security.debian.org comme décrit précédemment dans <ref id="update">.

<item>Exécuter les différents problèmes présentés dans ce manuel concernant 
les quotas utilisateur, les logins et lilo.

<item>De façon à renforcer un service, faire une liste de services actifs 
sur votre système.

<example>
$ ps -aux
$ netstat -pn -l -A inet 
# /usr/sbin/lsof -i | grep LISTEN
</example>

Vous devrez installer <package>lsof-2.2</package> pour que la troisième 
commande fonctionne (à lancer en root). Vous devriez faire attention car
lsof peut traduire le mot LISTEN  dans vos paramètres.

<item>Afin de retirer les services non nécessaires, avant tout déterminer 
comment ils sont démarrés et de quels paquets proviennent-ils. Cette 
tâche peut être facilement réalisé en vérifiant le programme qui écoute 
la "socket" <--! traduction de socket nécessaire-->, l'exemple suivant 
nous le montre en utilisant ces outils et <prgn>dpkg</prgn>.

<example>
#!/bin/sh
# FIXME: this is quick and dirty; replace with a more robust script snippet
for i in `sudo lsof -i | grep LISTEN | cut -d " " -f 1 |sort -u` ; do
        pack=`dpkg -S $i |grep bin |cut -f 1 -d : | uniq`
        echo "Service $i is installed by $pack";
        init=`dpkg -L $pack |grep init.d/ `
        if [ ! -z "$init" ]; then
                 echo "and is run by $init"
        fi
done
</example>

<item>Une fois les services indésirables trouvés, supprimer le paquet (avec
<prgn>dpkg --purge</prgn>) ou utiliser <prgn>update-rc.d</prgn> (voir
 <ref id="disableserv">) de façon à le retirer du système de démarrage.

<item>Pour les services inetd (lancés par le super daemon) vous pouvez juste
vérifier les services activés, par exemple avec :

<example>
$ grep -v "^#" /etc/inetd.conf | sort -u
</example>

et désactiver ceux qui ne sont pas nécessaire en commentant les lignes, supprimant 
le paquet ou en utilisant <prgn>update-inetd</prgn>

<item>Si vous avez des services "wrappés" (ceux utilisant <prgn>/usr/sbin/tcpd</prgn>), 
vérifier que <file>/etc/hosts.allow</file> et <file>/etc/hosts.deny</file> sont 
configurés d'après votre politique pour les services.

<item>Si possible, et s'appuyant sur chaque service, vous pouvez avoir 
envie de limiter les services lors d'une utilisation de plusieurs interfaces 
externes afin d'écouter que sur une seule d'entre elles. Par exemple, si vous 
voulez un accès FTP interne, paramétrez le daemon FTP afin qu'il écoute 
uniquement l'interface désiré et non toutes les interfaces (c'est-à-dire 
0.0.0.0:21).

<item>Redémarrez la machine ou passer en mode utilisateur seul puis repasser en mode multi-utilisateur avec :
<example>
$ init 1
(....)
$ init 2
</example>
<item>Vérifiez que les services sont maintenant disponibles et, si nécessaire, réitérez les étapes ci-dessus.
<item>Installez maintenant les services nécessaires si vous ne l'avez pas encore fait et configurer les
proprement.
<item>Vérifiez ce que les utilisateurs sont habitués pour lancer les services 
disponibles avec par exemple :
<example>
$ for i in `/usr/sbin/lsof -i |grep LISTEN |cut -d " " -f 1 |sort -u`; do user=`ps -ef |grep $i |grep -v grep |cut -f 1 -d " "` ; echo "Le service $i a été lancé en tant qu'utilisateur $user"; done
</example>

pensez à changer ces services pour un utilisateur/groupe donné et 
peut-être les "chrooté" pour augmenter le niveau de sécurité. Vous pouvez 
procéder en changeant les scripts de démarrage de services de <file>/etc/init.d</file>.
La plupart des services dans la Debian utilisent <prgn>start-stop-daemon</prgn> ainsi 
vous pouvez utiliser les options --change-uid et --chroot pour installer ces 
services. "Chrooter" des services ne rentre pas dans le cadre de ce document mais 
un petit avertissement est nécessaire : vous aurez peut-être besoin de mettre tous les 
fichiers installés par le paquet service en utilisant dpkg -L ainsi que les paquets
dont il dépend dans l'environnement chroot.

<item>Répéter les étapes ci-dessus afin de vérifier que seuls les services
désirés sont lancés avec une combinaison utilisateur/groupe prédéfinie.

<item>Tester les services installés afin de voir si leur fonctionnement est 
bien celui souhaité.

<item>Vérifier le système en utilisant un scanner de vulnérabilités (tel 
<package>nessus</package>) de façon à déterminer les vulnérabilités du système
(mauvaise configuration, services vieux ou indésirables).

<item>Mettre en place des mesures contres les intrusions de toute sorte (réseaux et hôtes) 
(telles que <package>snort</package> et <package>logsentry</package>).

<item>Répéter l'étape du scanner de réseaux et vérifier que le système de détection
d'intrusion fonctionne correctement.

</list>

Pour le vrai paranoïaque, il faut prendre en considération ce qui suit :

<list>

<item>Ajouter au système des possibilités de pare-feux, acceptant les connexions entrantes 
uniquement pour les services définis et limitant les connexions sortantes à celles autorisées.

<item>Revérifier l'installation avec une nouvelle évaluation de vulnérabilité à l'aide 
d'un scanner de réseaux.

<item>Vérifier les connexions sortantes en utilisant un scanner de réseaux depuis le système 
jusqu'à un hôte à l'extérieur et vérifier que les connexions non voulues ne trouvent pas leur
sortie.

</list>


<p>FIXME: cette procédure considère le service harden mais pas le
sytème harden au niveau utilisateur, incluant des informations
à propos de la vérification des permissions utilisateurs,  les fichiers
setuid et le gel des changements dans le système en utilisant
le système de fichier ext2.


<appendix id="checklist">Liste de contrôles des configuration.

<p>Cet appendice récapitule brièvement les points des autres sections de ce manuel sous 
une forme condensée de liste de contrôles. Ceci est un petit résumé pour une personne qui
a déjà lu le manuel.

<!-- FIXME: Add pointer to Unix Security Checklist (CERT) -->

<!-- Order is slightly different from body text. Consider changing text? -->
<!-- (FIXME) -->

<p>FIXME: Ceci est basé sur la version 1.4 du manuel et a peut-être besoin d'une mise à jour.


<list>
<item>Limiter les accès physiques et les possibilités de démarrage.
	      <list>
<item>Activer un mot de passe pour le BIOS.
		<item>Désactiver le démarrage sur disquette/cdrom/...
		    
		<item>Mettre un mot de passe à LILO ou GRUB (respectivement <file>/etc/lilo.conf</file>
ou <file>/boot/grub/menu.lst</file>);
			vérifier que le fichier de configuration de LILO ou de GRUB soit en lecture
			seule.

		<item>Interdire le démarrage par disquette sur le MBR en récrivant par dessus le MBR 
		(peut-être pas ?)

	      </list>

<item>Partitionnement
	      <list>
<item>Séparer les données où les utilisateurs peuvent écrire, données non-système, et
		    rapidement changer les données runtime pour leurs propres partitions
		


		<item>Mettre les options de montage <tt>nosuid,noexec,nodev</tt> dans
		    <file>/etc/fstab</file> sur les partitions ext2 tel que /tmp.
	      </list>



<item>Hygiène pour les mots de passes et la sécurité des connexions.
	  	      
	      <list>
<item>Établir un bon mot de passe root.
		<item>Activer les mots de passes ombrés et MD5.
		<item>Installer et utiliser PAM.
		    
		    <list>
<item>Ajouter le support du MD5 à PAM et être sûr que 
			  (de manière générale) les entrées dans les fichiers
			<file>/etc/pam.d/</file> qui ouvrent les droits d'accès
			  à la machine ont un second champs dans
			  le fichier pam.d <!-- ou est ce le troisième? (FIXME:
			  vérifier) --> mettre à "requisite" ou "required".
			  
		      <item>Modifiez <file>/etc/pam.d/login</file> pour que
			  seul le root puisse se loguer localement.

		      <item>Indiquer également les tty:s autorisés dans 
			  <file>/etc/security/access.conf</file> et généralement 
			  limiter le plus possible l'accès à ce fichier par l'utilisateur
			  root.
			  
		      <item>Ajouter pam_limits.so si vous voulez fixer des limites par
			  utilisateur.
			  
		      <item>Modifiez <file>/etc/pam.d/passwd</file>: augmenter la taille minimum
		      	  du mot de passe (6 caractères peut-être).

		      <item>Ajouter le groupe wheel à <file>/etc/group</file> si vous voulez;
			  ajouter l'entrée pam_wheel.so group=wheel au fichier 
			  <file>/etc/pam.d/su</file>.
			  
		      <item>Pour les contrôles d'usage par utilisateur, utiliser les entrées 
		      appropriées dans parm_listfile.so.
		      
		      <item>Avoir un fichier <file>/etc/pam.d/other</file> et mettre en 
		      place une sécurité serrée.

		    </list>
<item>Fixer des limites dans <file>/etc/security/limits.conf</file>
(notez que <file>/etc/limits</file> n'est pas utilisé is vous utiliser
		    PAM)

		<item>Resserrer <file>/etc/login.defs</file>; de même que, si vous 
		activé MD5 et/ou PAM, soyez sûr de faire également les changements ici.
		    
		<item>Désactiver l'accès par ftp à l'utilisateur root dans le fichier
		<file>/etc/ftpusers</file>.
		    
		<item>Désactiver la connexion par réseau de root; use <manref
		    name="su" section="1"> ou <manref name="sudo"
		    section="1">.  (prendre en compte que le paquet
		    <package>sudo</package> soit installé)
		    
		<item>Utiliser PAM pour imposer des contraintes supplémentaires sur 
		les connexions ?

	      </list>

<item>Autres problèmes de sécurité locaux 
	      <list>
<item>Modification du Kernel <--! Traduction nécessaire.Fait. jpg -->
(see <ref id="kernel-conf">)
		    
		<item>Rustines pour noyaux
		    (voir <ref id="kernel-patches">)
		    
		<item>Resserrer les permissions sur les fichiers de logs.
		    (<file>/var/log/{last,fail}log</file>, logs d'Apache)
		    
		<item>Verifier que la vérification de setuid soit active dans 
		    <file>/etc/checksecurity.conf</file>
<item>Penser à créer des fichiers de logs en avec uniquement le droit d'ajout<--! Traduction de append-only nécessaire. Fait. jpg -->
et des fichiers de configuration invariable en utilisant chattr (système de fichier ext2 uniquement)

		<item>Mettre en place une vérification d'intégrité des fichiers (voir  <ref
		id="check-integ">).  Installer <package>debsums</package>
<item>Penser à remplacer locate par slocate
		    
		<item>Impression de tous les logs sur une imprimante locale ?
		    
		<item>Graver votre configuration sur un CD démarrable et 
		démarrer dessus? <!-- traduction nécessaire. Fait.jpg-->
<item>Désactiver les modules pour le noyau ?

	      </list>

<item>Restreindre les accès réseaux
	      <list>

<item>Installer et configurer <prgn>ssh</prgn>
(proposer PermitRootLogin No dans <file>/etc/ssh</file>,
		    PermitEmptyPasswords No;
		    noter d'autre suggestion de texte)
		    
		<item>Envisager la désactivation ou la suppression de in.telnetd.
		    
		<item>Généralement, désactiver les services inutiles dans le fichier 
		<file>/etc/inetd.conf</file> en utilisant <tt>update-inetd
		      --disable</tt> (ou désactiver inetd complètement, ou utiliser une 
		      solution de rechange tel xinetd ou rlinetd).
		    
		<item>Désactiver les autres services inutiles; 
		mail, ftp, DNS, www, etc ne devraient pas être lancés si vous 
		n'en avez pas besoin et veillez à les vérifier régulièrement.
		
		<item>Pour les services dont vous avez besoin, n'utilisez pas 
		uniquement les programmes communs, rechercher des versions plus 
		sécurisées disponibles avec la Debian (ou depuis tout autre source).
		Peu importe celle que vous utiliserez, soyez sûr que vous compreniez
		bien les risques induits.
		
		<item>Mettre en place des prisons chroot pour les utilisateurs et daemons extérieurs.

		<item>Configurer pare-feux et tcpwrappers
		    (voir <manref name="hosts_access" section="5">);
		    notez l'astuce pour /etc/hosts.deny 
		    		    
		<item>Si vous utiliser ftp, mettre en place un serveur ftpd qui sera toujours lancé dans 
		un environnement chrooté au répertoire home de l'utilisateur.
		    
		<item>Si vous utiliser X, désactiver l'authentification xhost et utiliser plutôt ssh;
		de façon encore plus sécurisé, désactiver X à distance si vous pouvez (ajouter -nolisten tcp 
		à la ligne se référant à la commande X et mettre hors service XDMCP dans le fichier 
		    <file>/etc/X11/xdm/xdm-config</file> en plaçant la valeur 0 à requestPort).
		    
		<item>Désactivez l'accès aux imprimantes de l'extérieur.
		    
		<item>Encryptez toute session IMAP ou POP via SSL ou SSH;
		installez stunnel si vous voulez fournir ce service pour des utilisateurs distant.
		    
		<item>Mettre en place un hôte de logs et configurer les autres machines afin qu'elles envoient
		les logs à cet hôte (<file>/etc/syslog.conf</file>).
		    
		<item>Sécuriser BIND, Sendmail et tout autre daemon complexe 
		    (Lancer dans une prison chroot; lancer en tant qu'utilisateur non root)

		<item>Installer snort ou un outil similaire.
		    
		<item>Faire sans NIS et RPC si vous pouvez (désactiver portmap).
		    
	      </list>
<item>Problèmes de politique
	      <list>
<item>Éduquer les utilisateurs sur le comment et le pourquoi de vos règles.
		Lorsque que vous avez interdit quelque chose qui est généralement 
		disponible sur d'autres systèmes, fournissez leur une documentation qui 
		explique comment arriver aux mêmes résultats d'une manière plus sécurisée.

		<item>Interdire l'utilisation de protocoles qui utilisent des mots 
		de passes en clair (telnet, rsh and friends; ftp, imap, http, ...).
		    
		<item>Interdire les programmes qui utilisent la SVGAlib.
		    
		<item>Utiliser les quotas disques.

	      </list>
<item>Rester informé à propos des problèmes de sécurité
	      <list>
<item>S'abonner aux listes de discussions liées à la sécurité.
		    
		<item>S'abonner aux mises à jour de sécurité -- ajouter une ou des entrées 
		http://security.debian.org/debian-security au fichier 
		<file>/etc/apt/sources.list</file> <item>Se rappeler périodiquement de lancer 
		<prgn>apt-get update ; apt-get upgrade</prgn>
(mettre en place peut-être un job avec cron ?) tel décrit dans <ref
		id="update">.

	      </list>

</list>

<appendix id="snort-box">Paramétrer un IDS autonome <--! Voir la traduction de standalone ! 
ici je l'ai traduit par dédié mais cela ne me convient pas. J'ai corrigé par autonome. jpg -->

<p>
Vous pouvez facilement mettre en place une bécane Debian autonome pour 
un Système de Détection d'Intrusion en utilisant <package>snort</package>.

<p>Quelques directives :

<list>
<item>Installer un système de base Debian et ne pas sélectionner 
de paquets additionnels.

<item>Télécharger et installer manuellement (avec dpkg) les 
paquets nécessaire (voir la liste de paquets installée ci-dessous).

<item>Télécharger et installer ACID (Analysis Console for
Intrusion Databases).

</list>

<p>
ACID est actuellement empaqueté pour Debian avec <package>acidlab</package>,
qui fournit une interface web graphique à la sortie de snort.
Il peut être téléchargé depuis 
<url id="http://www.cert.org/kb/acid/">, <url
id="http://acidlab.sourceforge.net"> ou <url
id="http://www.andrew.cmu.edu/~rdanyliw/snort/">. 
Vous pourriez avoir envie de lire le 
<url id="http://www.linuxdoc.org/HOWTO/Snort-Statistics-HOWTO/index.html" name="Snort Statistics HOWTO">.

<p>
Vous pouvez paramétrer ce système avec, au moins, deux interfaces :
une interface connecté à un réseau de gestion (pour accéder aux résultats 
et maintenir le système), l'autre interface sans adresse ip lié au segment 
du réseau à analyser.

<p>
De façon à configurer les cartes réseaux sans adresses ip vous ne pouvez pas 
utilisez le fichier standard Debian <file>/etc/network/interfaces</file> étant donné que le programme <prgn>ifup</prgn> et <prgn>ifdown</prgn> attendent plus d'informations que nécessaire. Vous devez faire, simplement,
<tt>ifconfig eth0 up</tt>.

<p>
Vous avez besoin, en outre de l'installation standard Debian, d'Apache, 
MySQL et PHP4 pour faire fonctionner ACID. Paquets téléchargés (Note: 
les versions peuvent différer en fonction de quelle distribution Debian 
vous utilisez, ceux-ci sont de la debian <em>woody</em> de septembre 2001) :

<example>
ACID-0.9.5b9.tar.gz
adduser_3.39_all.deb
apache-common_1.3.20-1_i386.deb
apache_1.3.20-1_i386.deb
debconf_0.9.77_all.deb
dialog_0.9a-20010527-1_i386.deb
fileutils_4.1-2_i386.deb
klogd_1.4.1-2_i386.deb
libbz2-1.0_1.0.1-10_i386.deb
libc6_2.2.3-6_i386.deb
libdb2_2.7.7-8_i386.deb
libdbd-mysql-perl_1.2216-2_i386.deb
libdbi-perl_1.18-1_i386.deb
libexpat1_1.95.1-5_i386.deb
libgdbmg1_1.7.3-27_i386.deb
libmm11_1.1.3-4_i386.deb
libmysqlclient10_3.23.39-3_i386.deb
libncurses5_5.2.20010318-2_i386.deb
libpcap0_0.6.2-1_i386.deb
libpcre3_3.4-1_i386.deb
libreadline4_4.2-3_i386.deb 
libstdc++2.10-glibc2.2_2.95.4-0.010703_i386.deb
logrotate_3.5.4-2_i386.deb
mime-support_3.11-1_all.deb
mysql-client_3.23.39-3_i386.deb
mysql-common_3.23.39-3.1_all.deb
mysql-server_3.23.39-3_i386.deb
perl-base_5.6.1-5_i386.deb
perl-modules_5.6.1-5_all.deb
perl_5.6.1-5_i386.deb
php4-mysql_4.0.6-4_i386.deb
php4_4.0.6-1_i386.deb
php4_4.0.6-4_i386.deb
snort_1.7-9_i386.deb
sysklogd_1.4.1-2_i386.deb
zlib1g_1.1.3-15_i386.deb
</example>

<p>Paquets installés (dpkg -l):
<example>
ii  adduser        3.39
ii  ae             962-26
ii  apache         1.3.20-1
ii  apache-common  1.3.20-1
ii  apt            0.3.19
ii  base-config    0.33.2
ii  base-files     2.2.0
ii  base-passwd    3.1.10
ii  bash           2.03-6
ii  bsdutils       2.10f-5.1
ii  console-data   1999.08.29-11.
ii  console-tools  0.2.3-10.3
ii  console-tools- 0.2.3-10.3
ii  cron           3.0pl1-57.2
ii  debconf        0.9.77
ii  debianutils    1.13.3
ii  dialog         0.9a-20010527-
ii  diff           2.7-21
ii  dpkg           1.6.15
ii  e2fsprogs      1.18-3.0
ii  elvis-tiny     1.4-11
ii  fbset          2.1-6
ii  fdflush        1.0.1-5
ii  fdutils        5.3-3   
ii  fileutils      4.1-2   
ii  findutils      4.1-40
ii  ftp            0.10-3.1
ii  gettext-base   0.10.35-13
ii  grep           2.4.2-1
ii  gzip           1.2.4-33
ii  hostname       2.07
ii  isapnptools    1.21-2
ii  joe            2.8-15.2  
ii  klogd          1.4.1-2   
ii  ldso           1.9.11-9   
ii  libbz2-1.0     1.0.1-10
ii  libc6          2.2.3-6
ii  libdb2         2.7.7-8
ii  libdbd-mysql-p 1.2216-2
ii  libdbi-perl    1.18-1
ii  libexpat1      1.95.1-5
ii  libgdbmg1      1.7.3-27
ii  libmm11        1.1.3-4
ii  libmysqlclient 3.23.39-3
ii  libncurses5    5.2.20010318-2
ii  libnewt0       0.50-7  
ii  libpam-modules 0.72-9
ii  libpam-runtime 0.72-9  
ii  libpam0g       0.72-9
ii  libpcap0       0.6.2-1
ii  libpcre3       3.4-1   
ii  libpopt0       1.4-1.1
ii  libreadline4   4.2-3 
ii  libssl09       0.9.4-5   
ii  libstdc++2.10  2.95.2-13 
ii  libstdc++2.10- 2.95.4-0.01070
ii  libwrap0       7.6-4   
ii  lilo           21.4.3-2
ii  locales        2.1.3-18
ii  login          19990827-20
ii  makedev        2.3.1-46.2
ii  mawk           1.3.3-5
ii  mbr            1.1.2-1 
ii  mime-support   3.11-1 
ii  modutils       2.3.11-13.1
ii  mount          2.10f-5.1
ii  mysql-client   3.23.39-3
ii  mysql-common   3.23.39-3.1
ii  mysql-server   3.23.39-3
ii  ncurses-base   5.0-6.0potato1
ii  ncurses-bin    5.0-6.0potato1
ii  netbase        3.18-4  
ii  passwd         19990827-20
ii  pciutils       2.1.2-2
ii  perl           5.6.1-5   
ii  perl-base      5.6.1-5   
ii  perl-modules   5.6.1-5
ii  php4           4.0.6-4   
ii  php4-mysql     4.0.6-4 
ii  ppp            2.3.11-1.4
ii  pppconfig      2.0.5
ii  procps         2.0.6-5   
ii  psmisc         19-2   
ii  pump           0.7.3-2 
ii  sed            3.02-5 
ii  setserial      2.17-16
ii  shellutils     2.0-7
ii  slang1         1.3.9-1  
ii  snort          1.7-9
ii  ssh            1.2.3-9.3
ii  sysklogd       1.4.1-2
ii  syslinux       1.48-2
ii  sysvinit       2.78-4  
ii  tar            1.13.17-2  
ii  tasksel        1.0-10 
ii  tcpd           7.6-4     
ii  telnet         0.16-4potato.1
ii  textutils      2.0-2  
ii  update         2.11-1    
ii  util-linux     2.10f-5.1
ii  zlib1g         1.1.3-15
</example>

</book>
