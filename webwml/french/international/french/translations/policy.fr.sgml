
<!doctype debiandoc system [
<!-- include version information so we don't have to hard code it
     within the document -->
<!--entity % versiondata SYSTEM "version.ent"> &versiondata; -->
]>
<debiandoc>
<!--/policy.sgml /1.48 -->
  <!--
  Debian GNU/Linux Policy Manual.
  Copyright (C)1996,1997,1998 Ian Jackson and Christian Schwarz;
  released under the terms of the GNU
  General Public License, version 2 or (at your option) any later.
  Initial version 1996, Ian Jackson, ijackson@gnu.ai.mit.edu
  Revised November 27, 1996, David A. Morris, bweaver@debian.org 
  New sections March 15, 1997, Christian Schwarz, schwarz@debian.org
  Reworked/Restructured April-July 1997, Christian Schwarz, schwarz@debian.org
  Maintainer since 1997, Christian Schwarz, schwarz@debian.org
  Christoph Lameter contributed the "Web Standard"
  The debian-policy mailing list has taken responsibility for the
  contents of this document since September 1998, with the package
  maintainers responsible for packaging administrivia only.
  -->
  
  <book>
    <titlepag>
      <title>La Charte Debian </title>
      <author>
	<name>Ian Jackson </name>
	<email>ijackson@gnu.ai.mit.edu</email>
      </author>
      <author>
	<name>Christian Schwarz</name> 
	<email>schwarz@debian.org</email>
      </author>
      <author>
	<name>révision : David A. Morris</name> 
	<email>bweaver@debian.org</email>
      </author>
      <author>
	<name>La liste de diffusion « Debian Policy&nbsp;»</name>
	<email>debian-policy@lists.debian.org</email>
      </author>
      <version>version 3.5.4.0 05/2001</version>

      <abstract>
	Ce manuel est la charte de la distribution Debian
GNU-Linux. Sont abordés la structure et le contenu d'une archive Debian,
certaines questions sur la conception du système d'exploitation,
ainsi que les exigences techniques que chaque paquet doit satisfaire afin
d'être inclus dans la distribution. Le paquet «&nbsp;debian-policy&nbsp;» 
quant à lui est maintenu par un groupe de responsables sans pouvoirs 
rédactionnels, dont voici la liste actuelle :
	<enumlist>
	  <item>
	  <p>Julian Gilbey <email>jdg@debian.org</email></p>
          </item>
         <item>
          <p>Manoj Srivastava <email>srivasta@debian.org</email></p>
	  </item>
	</enumlist>
      </abstract>


      <copyright>
	<copyrightsummary>
	  Copyright &copy;1996,1997,1998 Ian Jackson
	  and Christian Schwarz.
	</copyrightsummary>
	<p>
	  Ce manuel est un logiciel libre ; il peut être redistribué 
et/ou modifié selon les termes de la «&nbsp;GNU General Public License&nbsp;», telle que publiée par la «&nbsp;Free Software Foundation&nbsp;» ; version 2 
ou toute version supérieure.
	</p>

	<p>
	  Il est distribué dans l'espoir qu'il sera utile, mais <em>sans aucune
garantie</em> ; sans même la garantie implicite d'une possible valeur 
marchande ou d'une adéquation avec la satisfaction d'un but précis. 
Consultez la «&nbsp;GNU General Public License&nbsp;» pour plus de détails.
	</p>

	<p>
Une copie de la «&nbsp;GNU General Public License&nbsp;» est disponible à
<tt>/usr/share/common-licenses/GPL</tt> dans la distribution Debian GNU-Linux
ou sur la « Toile » à 
<url id="http://www.gnu.org/copyleft/gpl.html" name="The GNU General Public Licence">.
Vous pouvez également l'obtenir en écrivant à la
Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.
	</p>
      </copyright>
    </titlepag>

    <toc detail="sect">
    
    <chapt id="1">
      <heading>À propos de ce manuel</heading>
      <sect>
	<heading>Les objectifs de ce manuel</heading>
	<p>
	  Ce manuel est la charte de la distribution 
Debian GNU-Linux. Sont abordés la structure et le contenu d'une archive 
Debian, certaines questions sur la conception du système d'exploitation,
ainsi que les exigences techniques que chaque paquet doit satisfaire afin
d'être inclus dans la distribution.
	  </p>
	
<p>
Ce manuel décrit aussi la politique debian pour ce qui concerne la création 
des paquets. Ce n'est pas un cours sur la construction des paquets et il ne
décrit pas complètement le comportement du système de gestion des paquets. 
Il essaye plutôt de définir la seule interface que doivent maîtriser les 
développeurs 
<footnote><p>
D'une manière informelle, l'intégration de «&nbsp;matériel&nbsp;» se fait 
selon les critères suivants :
<taglist>
<tag>Interfaces standards</tag>
<item> <p>
Le «&nbsp;matériel&nbsp;» présenté est une interface au système de gestion de 
paquets dont l'utilisation est obligatoire ; un nombre significatif de paquets
l'utilise et elle ne sera pas modifiée sans une étude sérieuse. Les
responsables de paquet peuvent donc compter sur la stabilité de cette 
interface et les auteurs du système de gestion des paquets doivent assurer
la compatibilité avec les définitions de ces interfaces. (Le format des 
fichiers «&nbsp;control&nbsp;» et «&nbsp;changelog&nbsp;» en est un exemple.)
</p>
               </item>
               <tag>Convention choisie</tag>
               <item>
                 <p>
Quand on a besoin, pour des raisons d'inter-opérabilité, de faire un choix
parmi un certain nombre de possibilités techniquement valides. Le numéro
de version est un exemple.
</p></item></taglist>
Veuillez noter que ces critères ne s'excluent pas mutuellement ; une convention
choisie devient souvent une interface standard.
	    </p>
	  </footnote>.
<p>
Les notes de ce manuel ne font pas partie de la Charte
et sont purement instructives.</p>
<p>
Les mots <em>must</em>, <em>should</em>, <em>may</em> et les adjectifs
<em>required</em>, <em>recommended</em> et <em>optional</em> servent à
distinguer la signification des diverses directives contenues dans cette
charte. La distribution Debian ne considérera généralement pas comme
acceptables les paquets qui ne se conforment pas aux directives dénotées par
<em>must</em> (ou <em>required</em>)<footnote><p>
En français, nous employons le verbe «&nbsp;devoir&nbsp;» et ses déclinaisons.
</footnote>. Une non conformité à une directive
dénotée par <em>should</em> (ou <em>recommended</em>) sera en général
considérée comme un bogue, mais cela n'empêchera pas nécessairement la
distribution du paquet.<footnote><p>
En français, nous employons le futur de l'indicatif et jamais le verbe
«&nbsp;devoir&nbsp;».</footnote>.
Les directives dénotées par <em>may</em> (ou <em>optional</em>) sont 
véritablement facultatives et sont laissées à l'appréciation du responsable 
de paquet.
</p>
<p>
Ce classement est en gros équivalent à celui des bogues : <em>serious</em>
(pour les violations des directives <em>must</em> ou <em>required</em>),
<em>minor</em>, <em>normal</em> ou <em>important</em> (pour les violations 
des directives <em>should</em> ou <em>recommended</em>) et <em>wishlist</em> 
(pour les éléments <em>optional</em>)<footnote><p>Comparez avec la RFC 2119.
Remarquez cependant que ces mots sont employés différemment dans ce
document</p></footnote>.
</p>

	<p>
	  La plupart des informations de ce manuel seront également utiles
pour la création de paquets qu'on distribuera d'une autre façon
ou qui sont destinés à un usage local.
	</p>
      </sect>
      <sect>
	
<heading>Nouvelles versions de ce document</heading>
	<p>
	  La version actuelle de ce document est toujours accessible depuis
	  le serveur FTP de Debian <ftpsite>ftp.debian.org</ftpsite> comme
	  <ftppath>/debian/doc/package-developer/policy.txt.gz</ftppath> (dans
ce répertoire se trouvent d'autres formats : <tt>policy.html.tar.gz</tt>,
<tt>policy.pdf.gz</tt> et <tt>policy.ps.gz</tt>)
ou sur la 
<url id="http://www.debian.org/doc/debian-policy/" name="Debian Policy Manual"> page web</p>

	<p>
	 De plus, ce manuel est distribué avec le
paquet <tt>debian-policy</tt>.
	</p>

<p>
Le paquet <tt>debian-policy</tt> contient aussi le fichier 
<tt>upgrading-checklist.txt</tt> qui note les changements entre les versions 
de ce document
</p>
      </sect>
      <sect>
	<heading>Avis et critiques</heading>

	<p>
	  Le système Debian GNU-Linux est en constante évolution et ce
manuel aussi.
	</p>
	<p>
	Bien que les auteurs de ce document aient veillé à ne pas introduire
de coquilles et autres erreurs, il en reste toujours.
Si vous découvrez des erreurs dans la version de ce manuel ou si
vous voulez faire part de vos commentaires, suggestions ou
critiques, veuillez envoyer un courrier électronique sur la liste de diffusion
«&nbsp;Debian Policy&nbsp;», <email>debian-policy@lists.debian.org</email>,
ou un rapport de bogue concernant le paquet <tt>debian-policy</tt>.
	</p>
</sect>
<sect>
<heading>À propos de la traduction</heading>
<p>
Depuis la version 3.5.0.0, la charte Debian regroupe le 
<em>Debian Policy Manual</em> et des éléments tirés du 
<em>Debian Packaging Manual</em>.</p>
<p>
Serge Stinckwich et David Rocher ont initié la traduction du 
<em>Debian Policy Manual</em> et ils furent rejoints par Christophe Le Bars, 
Benjamin Drieu, Laurent Pelecq, Christophe Mertz, Olivier Ripoll, 
Georges Mariano, Hugues Marilleau, Michel Court et les relecteurs de la liste 
de diffusion <em>debian-l10n-french</em>, 
<email>debian-l10n-french@lists.debian.org</email>.</p>
<p>
David Curé et Christian Jacolot ont traduit les passages 
du <em>Debian Packaging Manual</em> intégrés dans la charte.</p>
<p>
Si vous voulez faire part de vos commentaires, suggestions ou critiques,
vous pouvez envoyer un courrier à Philippe Batailler <email>
pbatailler@teaser.fr</email>.
</p>
	      </sect>
    </chapt>
    <chapt id="2">
      <heading>L'archive Debian</heading>
      <p>
	Le système Debian GNU-Linux est maintenu et distribué sous la forme
d'un ensemble de <em>paquets</em>. Très nombreux (plus de 6000), ces paquets
sont répartis en plusieurs <em>sections</em> et on leur donne des
<em>priorités</em> afin de simplifier leur traitement.
      </p>
      <p>
	Le projet Debian s'efforce de construire un système
d'exploitation libre, mais tous les paquets que nous voulons rendre
accessibles ne sont pas <em>libres</em> selon notre définition
(voir plus loin les Directives Debian pour le logiciel libre) ou ne peuvent
pas être importés ou exportés sans restrictions. L'archive a donc été
séparée suivant les sections <em>main</em>, <em>non-free</em>,
<em>contrib</em>, <em>non-US/main</em>, <em>non-US/non-free</em> et 
<em>non-US/contrib</em>. Ces sections sont détaillées plus bas.
      <p>
	Les sections <em>main</em> et <em>non-US/main</em> constituent 
ensemble la <em>distribution Debian GNU-Linux</em>.
      <p>
	Les paquets des autres sections ne sont pas considérés comme faisant
partie de la distribution Debian, bien que nous soutenions leur utilisation
à travers notre infrastructure (comme notre système
de suivi des bogues et nos listes de diffusion). La <em>Charte Debian</em> 
s'applique aussi à ces paquets.
</p>

      <sect id="pkgcopyright">
	<heading>Le copyright des paquets et les sections</heading>
	<p>
	  Les objectifs de cette section doivent nous permettre de :

	  <list compact="compact">
	    <item>
<p> mettre à disposition le plus grand nombre possible de 
logiciels ;</p>
	    </item>
	    <item>
	  <p>encourager chacun à écrire des logiciels libres ;</p>
	    </item>
	    <item>
		<p>faciliter la production des cédéroms
 de notre système sans craindre de violation de licences, ou de restrictions
 d'importation/exportation ou de toutes autres lois.
		</p>
	    </item>
	  </list>
	</p>
      <sect1>
	<heading>Les directives Debian pour le logiciel libre</heading>
	<p>
	  Les directives Debian pour le logiciel libre (DFSG : 
«&nbsp;Debian Free Software Guidelines&nbsp;») suivantes constituent notre 
définition du logiciel «&nbsp;libre&nbsp;».
	  <taglist>
	    <tag>Redistribution autorisée
	    </tag>
	    <item>
	      <p>
		La licence d'un composant Debian ne doit pas empêcher quiconque
 de vendre ou de donner ce logiciel en tant qu'élément d'une distribution
 logicielle qui regroupe des programmes de différentes sources. La licence
 ne doit pas demander le paiement de droits ou de redevances
 pour une telle vente.
	      </p>
	    </item>
	    <tag>Code source
	    </tag>
	    <item>
	      <p>
		Le programme doit inclure son code source et doit permettre sa
 distribution en tant que code source et comme forme compilée.
	      </p>
	    </item>
	    <tag>Travaux dérivés
	    </tag>
	    <item>
	      <p>
		La licence doit autoriser les modifications et les travaux 
dérivés. Elle doit autoriser leur distribution selon les termes mêmes de
la licence du logiciel original.
	      </p>
	    </item>
	    <tag>Intégrité du code source de l'auteur
	    </tag>
	    <item>
	      <p>
		La distribution d'un code source modifié peut être limitée
par la licence <em>seulement</em> si des fichiers «&nbsp;patch&nbsp;», joints 
avec le code source, permettent de modifier le programme au moment de sa 
compilation. La licence doit explicitement permettre la redistribution de 
logiciels construits à partir de code source modifié. La licence peut exiger 
que les travaux dérivés portent un nom différent ou un numéro de version 
différent du logiciel initial. (C'est un  compromis. Le projet Debian 
encourage tous les auteurs à ne pas limiter les modifications de fichier, 
source ou binaire.)
	      </p>
	    </item>
	    <tag>Non-discrimination envers des personnes ou groupes 
de personnes
	    </tag>
	    <item>
	      <p>
		La licence ne doit faire aucune discrimination à l'encontre 
d'une personne ou d'un groupe de personnes.
	      </p>
	    </item>
	    <tag>Non-discrimination envers des champs d'activités
	    </tag>
	    <item>
	      <p>
		La licence ne doit pas empêcher l'usage du programme dans un
 champ spécifique d'activité. Par exemple, elle ne doit pas empêcher 
 l'utilisation du programme dans le cadre d'une activité commerciale ou
 pour faire de la recherche génétique.
	      </p>
	    </item>
	    <tag>Distribution de licence
	    </tag>
	    <item>
	      <p>
		Les droits attachés au programme doivent s'appliquer à tous 
ceux à qui le logiciel est redistribué sans que ceux-ci aient besoin 
d'une licence supplémentaire.
	      </p>
	    </item>
	    <tag>La licence ne doit pas être spécifique à Debian
	    </tag>
	    <item>
	      <p>
		Les droits attachés à un programme ne doivent pas être liés
à l'appartenance de ce programme à un système Debian. Si ce programme
est extrait de Debian et est utilisé ou distribué sans Debian mais
dans les termes de la licence du programme, toutes les parties à
qui ce programme a été redistribué doivent avoir les mêmes droits
que ceux qui sont accordés avec le système Debian.
	      </p>
	    </item>
	    <tag>La licence ne doit pas contaminer d'autres logiciels
	    </tag>
	    <item>
	      <p>
		La licence ne doit pas apporter des restrictions à d'autres 
logiciels distribués avec le logiciel en question. Par exemple, la licence ne
doit pas exiger que tous les autres programmes distribués sur le même
support soient des logiciels libres.
	      </p>
	    </item>
	    <tag>Exemples de licence
	    </tag>
	    <item>
	      <p>
		Les licences «&nbsp;GPL&nbsp;», «&nbsp;BSD&nbsp;» et 
«&nbsp;Artistic&nbsp;» sont des exemples de licence que nous considérons 
comme <em>libres</em>.
	      </p>
	    </item>
	  </taglist>
	</p>
      </sect1>
      <sect1>
	<heading>La section «&nbsp;main&nbsp;»</heading>
	<p>
	  Tous les paquets dans <em>main</em> et dans <em>non-US/main</em> 
doivent se conformer aux <em>DFSG</em>
(«&nbsp;Debian Free Software Guidelines&nbsp;» -- Les directives Debian pour 
le logiciel libre).
	</p>

	<p>
	  De plus, les paquets dans <em>main</em>
	  <list compact="compact">
	    <item>
	      <p>
ne doivent pas demander un paquet extérieur à <em>main</em> pour leur 
compilation ou leur exécution (ainsi les paquets ne doivent pas déclarer de 
relation «&nbsp;Depends&nbsp;», «&nbsp;Recommends&nbsp;» ou 
«&nbsp;Build-Depends&nbsp;» avec un paquet qui n'est pas contenu dans 
<em>main</em>),
	      </p>
	    </item>
	    <item>
	      <p>
		ne doivent pas être tellement bogués que nous refusions de les 
soutenir, 
	      </p>
	    </item>
	    <item>
	      <p>
		et doivent se conformer à toutes les règles énoncées 
dans ce manuel.
	      </p>
	    </item>
	  </list>
	</p>
<p>
De la même manière, les paquets dans <em>non-US/main</em>
<list compact="compact">

<item>
<p>
ne doivent pas demander un paquet extérieur à <em>main</em> ou à 
<em>non-US/main</em> pour leur compilation ou exécution,
		</p>
	      </item>
<item>
<p>
ne doivent pas être tellement bogués que nous refusions de les soutenir,
              </p>
            </item>
            <item>
              <p>
<item>
              <p>
doivent se conformer à toutes les règles énoncées dans ce manuel.
              </p>
            </item>
          </list>
        </p>
	</sect1>

      <sect1>
	<heading>La section «&nbsp;contrib&nbsp;»</heading>
	<p>
	 Tous les paquets dans <em>contrib</em> et <em>non-US/contrib</em> 
doivent se conformer aux «&nbsp;DFSG&nbsp;».
	</p>

	<p>
De plus, les paquets dans <em>contrib</em> et <em>non-US/contrib</em>
	  <list compact="compact">
	    <item>
	      <p>
ne doivent pas être tellement bogués que nous refusions de les soutenir, 
		</p>
	      </item>
<item>
<p>
et doivent se conformer à toutes les règles énoncées dans ce manuel.
		</p>
	      </item>
	    </list>
</p>
<p>
De plus, les paquets dans <em>contrib</em> ne doivent pas exiger, pour leur
compilation ou pour leur exécution, de paquet appartenant à une section
<em>non-US</em>.
	  </p>
<p>		
Voici des exemples de paquets qu'on peut mettre dans <em>contrib</em> ou 
<em>non-US/contrib</em> :
<list compact="compact">
<item><p>
des paquets libres qui demandent pour leur compilation ou 
leur exécution des paquets appartenant aux sections <em>contrib</em>, 
<em>non-free</em> ou des paquets qui ne sont pas contenus dans notre archive ;
	      </p>
	    </item>
	    <item>
	      <p>
des paquets «&nbsp;wrapper&nbsp;», et des accessoires libres pour des 
programmes non libres.
	      </p>
	    </item>
	  </list>
	</p>
      </sect1>
      <sect1>
	<heading>La section «&nbsp;non-free&nbsp;»</heading>
	<p>
On doit placer dans les sections <em>non-free</em> et <em>non-US/non-free</em>
les paquets qui ne se conforment pas aux «&nbsp;DFSG&nbsp;», ou bien les 
paquets dont la distribution est rendue problématique par des brevets ou des 
questions légales.
	  </p>
<p>
De plus les paquets dans <em>non-free</em> et <em>non-US/non-free</em> 
<list compact="compact">
<item>
<p>
ne doivent pas être tellement bogués que nous refusions de les soutenir, 
		</p>
	      </item>
<item>
<p>
et doivent se conformer, autant qu'il leur est possible, à toutes les règles 
énoncées dans ce manuel<footnote><p>
Il se peut que certains paquets ne puissent pas respecter telle règle ; p.ex.,
les sources ne sont pas disponibles. Ces situations seront examinés au cas par
cas.</p>
		  </footnote>.</p>
	      </item>
	    </list>
</p>
     </sect1>

      <sect1>
	<heading>Les sections  «&nbsp;non-US&nbsp;»</heading>
	<p>
	  Certains programmes qui contiennent du code source utilisant
la cryptographie doivent être déposés sur le serveur <em>non-US</em> à cause 
des limitations US à l'exportation. De tels programmes doivent être
distribués dans les sections <em>non-US</em> appropriées : 
<em>non-US/main</em>, <em>non-US/contrib</em> ou <em>non-US/non-free</em>.
</p>
	<p>
	  Ceci ne s'applique qu'aux paquets qui contiennent du code source
utilisant la cryptographie. Un paquet qui contient un programme interfacé
avec un programme de cryptographie ou lié dynamiquement à une bibliothèque
de cryptographie ne sera pas distribué par le serveur <em>non-us</em>
s'il peut fonctionner sans le programme ou la bibliothèque cryptographique.
	</p>
      </sect1>
      <sect1>
	<heading>Considérations supplémentaires sur le copyright</heading>
	<p>
Tous les paquets doivent être accompagnés d'une copie <em>verbatim</em>
de leur copyright et de leur licence dans le fichier
	  <tt>/usr/share/doc/<em>&lt;nom-de-paquet&gt;</em>/copyright</tt> 
(voir <ref id="copyrightfile"> pour des précisions).</p>
	<p>
	  Nous nous réservons le droit d'empêcher l'inclusion de fichiers 
dans nos archives si
	  <list compact="compact">
	    <item>
	      <p>
		 leur utilisation ou leur distribution violent une loi ;
	      </p>
	    </item>
	    <item>
	      <p>
	leur utilisation ou leur distribution créent un conflit éthique ;
		      </p>
	    </item>
	    <item>
	      <p>
		nous sommes obligés de signer une licence pour les utiliser ;
	      </p>
	    </item>
	    <item>
	      <p>
		leur distribution entre en conflit avec des politiques 
du projet Debian.
	      </p>
	    </item>
	  </list>
	</p>

	<p>
	  Les programmes dont les auteurs encouragent l'utilisateur à faire des
dons conviennent très bien à la section «&nbsp;main&nbsp;», sauf si les auteurs
affirment que ne pas faire de don est immoral, non-éthique, illégal 
ou quelque chose de similaire ; dans ce cas, ces programmes 
doivent être placés dans la section <em>non-free</em>.
</p>

	<p>
	  Les paquets dont les notices de copyright (ou des problèmes de 
brevet) ne permettent pas la redistribution, même sous forme binaire, 
et pour lesquels aucune permission spéciale n'a été obtenue, ne doivent pas 
être placés sur le site FTP de Debian et ses miroirs.</p>

	<p>
On notera que dans la loi internationale du copyright (ceci s'applique aussi
aux États-Unis), <em>aucune</em> distribution ou modification d'un travail 
n'est autorisée sans une mention explicite. C'est pourquoi un programme sans
notice de copyright <em>est</em> protégé et vous ne pouvez rien en faire
sans risquer d'être poursuivi. De même, un programme avec une notice
de copyright qui n'énoncerait pas explicitement ce qui est permis
interdit tout.
</p>

	<p>
Beaucoup d'auteurs de soi-disant logiciels libres ignorent les problèmes
posés aux utilisateurs par des copyrights restrictifs (ou l'absence
de notice de copyright). Il est souvent intéressant de contacter
diplomatiquement de tels auteurs pour leur demander de modifier les
termes de leur licence. Cependant cela peut être politiquement difficile
et vous devriez au préalable demander conseil sur la liste
de diffusion <tt>debian-legal</tt>, comme il est expliqué plus bas.
</p>

	<p>
En cas de doute à propos d'un copyright, envoyez un courrier électronique à
<email>debian-legal@lists.debian.org</email>. Soyez prêt à nous donner
le copyright complet. Les logiciels couverts par la «&nbsp;GPL&nbsp;», les 
logiciels du domaine public et les copyrights de type «&nbsp;BSD&nbsp;» sont 
sûrs ; méfiez-vous d'expressions comme «&nbsp;utilisation commerciale 
interdite&nbsp;» et «&nbsp;distribution limitée&nbsp;».
</p>
      </sect1>
      <sect1>
	<heading>Les sous-sections</heading>

	<p>
Les paquets des sections (<em>main</em>, <em>contrib</em> et <em>non-free</em>
sont regroupés en <em>sous-sections</em> pour simplifier leur traitement.
</p>

	<p>
	  La section et la sous-section seront spécifiées dans le champ de 
contrôle <tt>Section</tt> de chaque paquet. Toutefois, le responsable de
l'archive Debian peut changer ce choix afin d'assurer la cohérence de la 
distribution Debian. le champ <tt>Section</tt> sera de la forme :
<list compact="compact">
<item>
<p>
<em>subsection</em> si le paquet appartient à la section <em>main</em>,
</p>
	      </item>
<item>
<p>
<em>section/subsection</em> si le paquet appartient à la section 
<em>contrib</em> ou à la section <em>non-free</em>, et
		</p>
	      </item>
<item>
<p>
<tt>non-US</tt>, <tt>non-US/contrib</tt> ou <tt>non-US/non-free</tt> si le
paquet appartient, respectivement, aux sections <em>non-US/main</em>, 
<em>non-US/contrib</em> et <em>non-US/non-free</em>.
               </p>
             </item>
           </list>
         </p>

	<p>
Les responsables de l'archive Debian donne la liste des sous-sections
autorisées :
<em>admin</em>, <em>base</em>, <em>comm</em>,
            <em>contrib</em>, <em>devel</em>, <em>doc</em>,
            <em>editors</em>, <em>electronics</em>, <em>games</em>,
            <em>graphics</em>, <em>hamradio</em>,
            <em>interpreters</em>, <em>libs</em>, <em>mail</em>,
            <em>math</em>, <em>misc</em>, <em>net</em>, <em>news</em>,
            <em>non-US</em>, <em>non-free</em>, <em>oldlibs</em>,
            <em>otherosfs</em>, <em>science</em>, <em>shells</em>,
            <em>sound</em>, <em>tex</em>, <em>text</em>,
            <em>utils</em>, <em>web</em>, <em>x11</em>.
	  </p>
	      </sect1>
      <sect>
	<heading>Les priorités</heading>
	  
	<p>
	  Chaque paquet aura une <em>priorité</em> spécifiée dans son
<em>fichier de contrôle</em>. Cette information, utilisée par l'outil
de gestion des paquets Debian, permet de séparer les paquets prioritaires
de ceux qui le sont moins.
</p>
	<p>
	  Le système Debian de gestion de paquet, <prgn>dpkg</prgn>, comprend
les <em>niveaux de priorités</em> suivants :

	  <taglist>
	    <tag><tt>required</tt></tag>
	    <item>
	      <p>
Ce sont les paquets nécessaires au bon fonctionnement du système. Vous ne 
devez pas les enlever sous peine de rendre votre système complètement 
inutilisable ; vous ne pourrez probablement même plus utiliser 
<prgn>dpkg</prgn> pour remettre les choses en place. Les systèmes composés 
uniquement de paquets <tt>required</tt> sont probablement inutilisables, 
mais ils disposent des fonctionnalités suffisantes pour permettre à 
l'administrateur système de <em>booter</em> et d'installer d'autres logiciels.
 </p>
	    </item>
	    <tag><tt>important</tt></tag>
	    <item>
	      <p>
Ces paquets incluent ceux que l'on s'attend à trouver  sur un système de type 
Unix. Si l'on pense qu'un expert Unix, détectant l'absence d'un programme 
s'exclamera : «&nbsp;Qu'arrive-t-il à la terre ? où est passé le programme 
<prgn>foo</prgn> ?&nbsp;», alors celui-ci doit être dans <tt>important</tt>
<footnote>
<p>
C'est un critère fort, car nous cherchons à produire, entre autres choses, un 
Unix libre.</p>	</footnote>. Les autres paquets sans
lesquels le système ne fonctionne pas bien ou est inutilisable
doivent avoir cette priorité. Cela <em>n'inclut pas</em>
«&nbsp;Emacs&nbsp;» ou «&nbsp;X11&nbsp;» ou «&nbsp;TeX&nbsp;» ou tout autre 
grosse application. Les paquets <tt>important</tt> constituent simplement un 
ensemble minimal d'outils nécessaires et communément attendus.
 </p>
	    </item>
	    <tag><tt>standard</tt></tag>
	    <item>
	      <p>		
Ces paquets fournissent un système en mode caractère, relativement
petit mais pas trop limité. Ils seront installés par défaut si
l'utilisateur ne sélectionne rien d'autre. Ce niveau n'inclut pas
beaucoup de grosses applications, mais contient «&nbsp;Emacs&nbsp;» 
(considéré comme partie de l'infrastructure, plutôt que comme application)
et un sous-ensemble raisonnable de «&nbsp;TeX&nbsp;» et «&nbsp;LaTeX&nbsp;» 
</p>
	    </item>
	    <tag><tt>optional</tt></tag>
	    <item>
	      <p>		
(En un sens, ce qui n'est pas obligatoire est facultatif, mais
ici «&nbsp;optional&nbsp;» ne doit pas être compris ainsi.) Ce sont tous les
logiciels qu'on pourrait raisonnablement vouloir installer quand on ne les
connaît pas et qu'on a pas d'exigences particulières. Cela constitue un 
système nettement plus gros et contient «&nbsp;X11&nbsp;», la distribution 
complète de «&nbsp;TeX&nbsp;» et de nombreuses applications. Notez qu'il ne
doit pas y avoir de conflit entre les paquets optionnels.
</p>
	    </item>
	    <tag><tt>extra</tt></tag>
	    <item>
	      <p>
Sont regroupés là les paquets qui sont en conflit avec d'autres
paquets dont les priorités sont «&nbsp;required&nbsp;», «&nbsp;important&nbsp;», «&nbsp;standard&nbsp;»
ou «&nbsp;optional&nbsp;», ou bien les paquets utiles uniquement
si vous savez déjà ce qu'ils font, ou bien les paquets qui ont des
exigences spécifiques.	
	      </p>
	    </item>
	  </taglist></p>
	  
	<p>
	Les paquets ne doivent pas dépendre de paquets dont les priorités 
sont de valeur inférieure (hors dépendances pour la construction).
Pour cela, on pourra ajuster les priorités d'un ou de plusieurs paquets.
	</p>
      </sect>
	  
      <sect>
	<heading>Les paquets binaires</heading>
	  
	<p>
La distribution Debian GNU-Linux est fondée sur le système Debian de gestion de
paquets, appelé <prgn>dpkg</prgn>. Par conséquent, tous les
paquets de la distribution Debian doivent être fournis au format de
fichier <tt>.deb</tt>.
</p>
	
	<sect1>
	  <heading>Le nom d'un paquet</heading>
	    
	  <p>
Chaque paquet doit avoir un nom unique dans l'archive Debian.
</p>
	    
	  <p>
Un nom de paquet ne doit comporter que des lettres minuscules (a-z),
des chiffres (0-9), les signes plus (+), moins (-) ou point (.). Il doit
contenir au moins deux caractères, dont l'un est une lettre.
</p>
	    
	  <p>
Le nom d'un paquet fait partie du nom du fichier <tt>.deb</tt> et est
inclus dans le <em>fichier de contrôle</em> du paquet.
	  </p>
	</sect1>
	        
	<sect1>
	  <heading>Le responsable d'un paquet</heading>
	    
	  <p>
	    Chaque paquet doit avoir un responsable Debian (quelqu'un ou 
un groupe de personnes, qu'on peut joindre à une adresse électronique, telle
que, par exemple, une liste de diffusion). Le responsable assure que la 
licence du logiciel du paquet suit les règles des distributions auxquelles 
il appartient.
</p>
	  <p>
Le responsable doit être indiqué dans le champ <tt>Maintainer</tt> avec son 
nom correct et une adresse électronique valide. Quand une personne s'occupe 
de plusieurs paquets, elle essaiera d'éviter d'avoir différents noms ou 
adresses dans les champs <tt>Maintainer</tt> des différents paquets.
</p>
	    
	  <p>
Quand la personne en charge d'un paquet quitte le projet Debian,
c'est le groupe Debian QA <email>packages@qa.debian.org</email>
qui reprend la maintenance du paquet jusqu'à ce qu'un volontaire 
se propose pour cette tâche.
Ces paquets sont appelés <em>paquets orphelins</em>
<footnote>
              <p>
La façon élégante de le faire  peut être trouvée dans le 
« Debian Developer's Reference », [trad. franç. : Guide de référence du 
développeur Debian], soit dans le paquet <tt>developers-reference</tt>, soit 
sur le serveur FTP Debian <ftpsite>ftp.debian.org</ftpsite> comme 
<ftppath>/debian/doc/package-developer/developers-reference.txt.gz</ftppath>
ou sur la
<url id="http://www.debian.org/doc/packaging-manuals/developers-reference/"
                name="Debian Developer's Reference"> page web.
              </p>
            </footnote>.


</p>
	</sect1>
	    
	    
	<sect1>
	  <heading>La description d'un paquet</heading>
	    
	  <p>
Chaque paquet Debian doit avoir une description complète enregistrée
dans les champs <em>ad hoc</em> de son <em>fichier de contrôle</em>.
</p>
<p>
La description apportera les informations dont a besoin un administrateur-
système pour décider d'installer le paquet. La description ne reprendra pas
simplement la documentation du programme. Les instructions de configuration 
ou d'utilisation du paquet ne doivent pas en faire partie -- c'est le rôle 
des scripts d'installation, des pages de man, des fichiers infos, etc. -- non 
plus que les notices de copyright et autres écrits administratifs  -- c'est 
le rôle des fichiers de copyright.
</p>
	</sect1>
	    
	    
	<sect1>
	  <heading>Les dépendances</heading>
	    
	  <p>
Chaque paquet doit indiquer ses relations de dépendance avec les
paquets dont il a besoin pour fonctionner correctement.
</p>
	  <p>
Par exemple, une relation de dépendance doit être déclarée pour toute 
bibliothèque partagée qui est demandée par un exécutable 
dynamiquement lié d'un paquet.
</p>
	    
	  <p>
Il n'est pas nécessaire d'indiquer les dépendances d'un paquet envers
des paquets étiquetés <tt>Essential</tt> (voir ci-dessous), et on ne doit 
pas le faire, à moins que ce ne soit une dépendance pour une version
précise de tel paquet. 
</p>
	  <p>
Dans certains cas, l'installation d'un paquet exige l'installation 
<em>et</em> la configuration préalables d'un autre paquet. Il faut alors 
déclarer une relation <tt>Pre-Depends</tt> pour ce paquet.</p>
	    
	  <p>
Vous ne déclarerez pas une relation <tt>Pre-Depends</tt>
pour un paquet avant d'en avoir débattu dans la liste de diffusion
<tt>debian-devel</tt> et qu'un consensus favorable se soit dégagé.
</p>
</sect1>
	    
	    
	<sect1>
	  <heading>Les paquets virtuels</heading>
	    
	  <p>
Parfois il y a des paquets qui font plus ou moins la même chose.
Dans ce cas, il est utile de définir un <em>paquet virtuel</em> dont
le nom décrit la fonction de ces paquets. (Les paquets virtuels existent
de manière logique et non physique, c'est pour cela qu'ils sont appelés
<em>virtuels</em>.) Les paquets assurant cette fonction viendront 
<em>remplir</em> ce paquet virtuel. Ainsi, tout autre paquet qui a besoin 
de cette fonction pourra simplement dépendre du paquet virtuel, sans
avoir à énumérer tous les paquets possibles.
</p>
	    
	  <p>
Tous les paquets utiliseront les noms de paquets virtuels
quand il convient de le faire ; ils s'arrangeront pour en créer de
nouveaux quand c'est nécessaire. On n'utilisera que les paquets 
virtuels qui ont été acceptés et qui apparaissent dans la liste des noms de 
paquets virtuels 
(sauf de manière privée, pour un ensemble local de paquets corrélés).
</p>
	    
	  <p>
La plus récente version de la liste officielle des paquets virtuels se trouve 
sur <ftpsite>ftp.debian.org</ftpsite> dans
<ftppath>/debian/doc/package-developer/virtual-package-names-list.txt</ftppath>
ou sur votre miroir local. De plus, elle est dans le paquet
<tt>debian-policy</tt>. La procédure de mise à jour de la liste est
décrite au début du fichier.
</p>
</sect1>
	    
	<sect1>
	  <heading>Les paquets dans «&nbsp;base&nbsp;»</heading>
	    
	  <p>
Les paquets inclus dans la section <tt>base</tt> ont une fonction
particulière. Ils forment le sous-ensemble minimal du système Debian
GNU-Linux qui est installé, avant tout autre chose, sur un nouveau système.
Ainsi, seulement un tout petit nombre de paquets peut aller dans
la section <tt>base</tt> afin de minimiser la quantité d'espace disque
nécessaire à une installation.
</p>	    
	  <p>
La plupart de ces paquets auront le niveau de priorité
<tt>required</tt> ou au moins <tt>important</tt> et beaucoup d'entre eux
seront étiquetés <tt>essential</tt> (voir ci-dessous).
</p>
	    
	  <p>
Vous ne devez placer aucun paquet dans la section <tt>base</tt> avant
qu'une discussion dans la liste de diffusion <tt>debian-devel</tt>
n'ait abouti à un consensus sur le sujet.
</p>
</sect1>
	    
	<sect1>
	  <heading>les paquets «&nbsp;essential&nbsp;»</heading>
	    
	  <p>
Certains paquets sont marqués <tt>essential</tt>. (Ils ont
<tt>Essential: yes</tt> dans leur champ de contrôle.)
Cet indicateur est utilisé pour les paquets qui sont <em>indispensables</em> à
un système.
</p>
	    
	  <p>
Comme ces paquets ne peuvent pas être facilement supprimés
(il faut ajouter une option de <em>forçage</em> de <prgn>dpkg</prgn>)
l'indicateur <tt>essential</tt> ne doit être utilisé que si
c'est absolument nécessaire.
Un paquet comprenant une bibliothèque partagée ne doit pas être étiqueté
<em>essential</em> --les dépendances empêchent sa suppression
prématurée, or il doit être possible de la supprimer quand elle est
périmée.
</p>
<p>
Comme <prgn>dpkg</prgn> n'empêche pas la mise à jour de paquets alors qu'un 
paquet <em>essential</em> est non configuré, tous les paquets 
<em>essential</em> doivent fournir l'essentiel de leurs fonctions même s'ils
ne sont pas configurés. Quand un paquet ne peut pas satisfaire à cette
exigence, il ne doit pas être étiqueté <em>essential</em> ; et tous les paquets
qui en dépendent doivent, comme il est de règle, expliciter leurs dépendances.
</p>
	    
	  <p>
Vous ne devez pas étiqueter un paquet comme <tt>essential</tt> avant qu'une
discussion dans la liste de diffusion <tt>debian-devel</tt>
n'ait abouti à un consensus sur le sujet.
</p>
</sect1>
	    
	    
	<sect1>
	  <heading>Les scripts du responsable de paquet</heading>
	    
	  <p>
Les scripts d'installation d'un paquet éviteront d'afficher des
messages que l'utilisateur n'a pas besoin de voir et s'appuieront
sur <prgn>dpkg</prgn> pour sauver de l'ennui un utilisateur qui
installe de nombreux paquets. Cela signifie entre autres choses qu'il faut
utiliser l'option <tt>--quiet</tt> de <prgn>install-info</prgn>.
</p>
	    
	  <p>
Les scripts d'installation doivent détecter toute erreur qui se produit et
doivent arrêter immédiatement l'installation en cours.
</p>
	    
	  <p>
On remarquera que la section <ref id="scripts">, s'applique généralement
aussi aux scripts des responsables de paquet.
</p>

<p>
On n'utilisera pas <prgn>dpkg-divert</prgn> sur un fichier appartenant à 
un autre paquet sans consulter au préalable le responsable du paquet en 
question.
</p>

<p>
Tous les paquets qui donnent une valeur au nom «&nbsp;partagé&nbsp;» d'une 
commande (en général, c'est un nom de fichier), utiliseront en général
<prgn>update-alternatives</prgn>, de manière à rendre possible leur
installation simultanée. Quand on n'emploie pas 
<prgn>update-alternatives</prgn>, chaque paquet doit utiliser 
<tt>Conflicts</tt> pour s'assurer que les autres paquets ne sont pas
installés. (On peut spécifier dans ce cas un conflit avec quelques
versions antérieures d'un paquet qui n'utilisait pas
<prgn>update-alternatives</prgn> -- c'est une exception à la règle
habituelle qui demande d'éviter les conflits de version.)
</p>

<sect2>
<heading>Poser des questions avec les scripts du responsable</heading>

<p>
Les scripts du responsable de paquet peuvent interroger l'utilisateur quand
c'est nécessaire. On peut interroger «&nbsp;à la main&nbsp;» ou bien par
l'intermédiaire d'un programme, tel que <prgn>debconf</prgn>, qui se
conforme aux règles Debian de gestion de la configuration, version 2 ou
supérieure. Ces règles se trouvent dans le fichier 
<file>debconf_specification</file> du paquet <package>debian-policy</package>. 
On peut aussi trouver ce fichier sur le site FTP 
<ftpsite>ftp.debian.org</ftpsite> dans 
<ftppath>/debian/doc/package-developer/debconf_specification.txt.gz</ftppath>
ou sur un miroir local<footnote>
<p>
2.5% des paquets Debian 
[Voyez <url id="http://kitenet.net/programs/debconf/stats/">] utilisent
<package>debconf</package> pour interroger l'utilisateur au moment de 
l'installation ; ce nombre augmente régulièrement. Les avantages de debconf 
sont expliqués rapidement sur
<url id="http://kitenet.net/doc/debconf-doc/introduction.html"> : configuration
préalable (en particulier), installation non-interactive, élimination des
questions redondantes, cohérence de l'interface utilisateur, etc.
		</p>
<p>
Le nombre croissant de paquet utilisant <package>debconf</package>, 
l'existence d'une implémentation naissante d'un second système Debian de 
gestion de la configuration (<package>cdebconf</package>) et la stabilisation 
des protocoles utilisés nous invitent finalement à les mentionner dans la
charte.
		</p>
	      </footnote>.
	    </p>

<p>
Les paquets qui utilisent les règles Debian de gestion de la configuration
peuvent contenir un script supplémentaire <file>config</file> et un fichier
<file>templates</file> dans leur archive de contrôle. Le script
<prgn>config</prgn> peut être lancé avant le script <prgn>preinst</prgn> et
avant que le paquet soit dépaqueté ou bien avant que ses dépendances et
pré-dépendances soient satisfaites : il doit donc fonctionner en utilisant
seulement les outils présents dans les paquets <em>Essential</em> <footnote>
<p>
<package>Debconf</package> ou tout autre outil qui met en oeuvre les règles 
Debian de gestion de la configuration est aussi installé, et toutes les 
dépendances concernant des versions sont satisfaites avant le commencement de 
la configuration préalable.
		</p>
	      </footnote>.
	    </p>
	    
<p>
Les paquets essaieront de minimiser le nombre de questions
posées et s'assureront que chaque question ne sera posée qu'une
seule fois. Cela signifie que les paquets doivent
essayer d'utiliser les fichiers de configuration partagés (comme
<tt>/etc/papersize</tt> ou <tt>/etc/news/server</tt>) et les variables
partagées de <package>debconf</package>,
plutôt que de redemander, chacun, la même information.
</p>
	  
	  <p>
Quand un paquet doit donner une information importante à l'utilisateur
(comme : «&nbsp;ne pas exécuter directement ce programme, vous devez d'abord
modifier les fichiers de configuration suivants sinon votre système
émettra des messages mal formatés&nbsp;»), il affichera ce message
dans le script <prgn>config</prgn> ou dans le script <prgn>postinst</prgn>).
Il demandera ensuite à l'utilisateur de taper sur la touche
«&nbsp;retour-chariot&nbsp;» quand il a pris connaissance du message. Les 
messages de copyright et les instructions d'utilisation ne sont pas considérés
comme des messages vitaux. Ils doivent apparaître respectivement
dans <tt>/usr/share/doc/<var>package</var>/copyright</tt> et dans la
documentation en ligne, où tous les utilisateurs peuvent les consulter.
</p>
	    
	  <p>
Presque toujours, seuls les scripts <prgn>config</prgn> et 
<prgn>postinst</prgn> poseront les questions nécessaires ; Quand on utilise
le script <prgn>postinst</prgn>, il doit empêcher, par une condition 
quelconque, qu'elles soient posées en cas d'échec de l'installation d'un 
paquet ou s'il est appelé avec <tt>abort-upgrade</tt>, <tt>abort-remove</tt> ou
<tt>abort-deconfigure</tt>.</p>

	</sect1>
      </sect>
      
<sect>
	<heading>Les paquets sources</heading>
	  
      <sect1 id="standardsversion">
	  <heading>La conformité aux manuels Debian</heading>

 <p>
On doit indiquer la version la plus récente de la <em>Charte Debian</em> à 
laquelle se conforme le paquet. Cela se précise dans le champ
de contrôle <tt>Standards-Version</tt> du paquet source. La version actuelle
est la version 3.5.4.0.
</p>
	  <p>
On peut utiliser cette valeur pour remplir automatiquement des rapports de 
bogue quand le paquet est vraiment trop vieux.
</p>
	    
	  <p>
Le numéro de version est composé de quatre parties : un numéro de version 
majeur et un mineur, un niveau de patch majeur et un mineur. Quand les normes
changent, exigeant des modifications dans tous les paquets, le numéro
majeur est changé. Les changements significatifs, exigeant des évolutions
dans de nombreux paquets, sont signalés par un changement du numéro mineur.
Le niveau majeur de patch sera modifié pour tout changement
limité de la signification des standards. Le niveau de
patch mineur sera changé pour toute amélioration légère (typographique, ou
autres...) qui ne modifie pas le sens de ce document, ou pour des changements 
qui n'affectent pas le contenu des paquets.
</p>
	  <p>
Seuls les trois premiers chiffres de la version sont significatifs pour le 
champ <em>Standards-Version</em>, et on peut choisir
de donner soit les trois chiffres, soit la formule complète
	    <footnote>
	      <p>
Par le passé, on devait donner la formule complète à quatre chiffres,
par exemple : «&nbsp;2.3.0.0&nbsp;». Mais comme un changement de niveau de 
«&nbsp;patch&nbsp;»
n'introduit pas une nouvelle norme, on a trouvé préférable d'assouplir la 
règle et de ne demander qu'une formule à trois chiffres, dans ce cas : 
«&nbsp;2.3.0&nbsp;». (On peut toujours
utiliser la formule complète si l'on veut.)
	      </p>
	    </footnote>.
	  </p>
	    
	  <p>
Vous consulterez régulièrement, et notamment si votre paquet est obsolète,
la plus récente version de la <em>Charte Debian</em>, et vous mettrez à jour 
votre paquet si nécessaire.
Lorsque le paquet est conforme à la nouvelle norme,
vous mettrez à jour le champ <tt>Standards-Version</tt>
du paquet source et vous le diffuserez
<footnote><p>
Consultez le fichier <tt>upgrading-checklist</tt> pour connaître les
changements entre différentes versions de ce document.</p>
	  </footnote>.
</p>
</sect1>
	    
         <sect1>
           <heading>Les relations entre paquets</heading>
 
           <p>
Les paquets source préciseront les paquets binaires qui doivent être 
installés et ceux qui ne doivent pas l'être, pour que leur construction 
réussisse.
Si l'on doit, par exemple, compiler un paquet avec tel compilateur particulier,
une dépendance de compilation sera déclarée envers ce paquet.
           </p>
 
           <p>
Pour un très petit nombre de paquets, ceux dont on a toujours besoin pour 
compiler, lier et insérer dans un paquet debian un programme classique écrit 
en C ou C++ comme «&nbsp;Hello world!&nbsp;», il n'est pas nécessaire de 
déclarer explicitement des relations de dépendance. Ces paquets, sur lesquels
on peut trouver des renseignements dans la liste 
<tt>/usr/share/doc/build-essential/list</tt> (contenue dans le
paquet <tt>build-essential</tt>), sont marqués <em>build-essential</em>
<footnote>
<p>
Le raisonnement : 
<list>
<item>
<p>
On peut ainsi maintenir une liste distincte de la Charte (une liste nécessite 
moins de contrôle que la Charte) ;
		    </p>
		  </item>
<item>
<p>
Un paquet distinct permet l'installation des paquets 
«&nbsp;build-essential&nbsp;» sur une machine, et permet aussi que d'autres 
paquets tels que les paquets «&nbsp;task&nbsp;» installent les paquets 
«&nbsp;build-essential&nbsp;» à travers une relation de dépendance ;
		    </p>
		  </item>
<item>
<p>
Un paquet distinct permet de séparer les rapports de bogues concernant la 
liste du processus de gestion de la charte dans le «&nbsp;BTS&nbsp;»
(système de suivi des bogues).
		    </p>
		  </item>
		</list></p>
	    </footnote>.
</p>
 
           <p>
La liste des dépendances de compilation ne contiendra que les paquets
explicitement nécessaires à la compilation. Les paquets simplement demandés
parce qu'un paquet de cette liste dépend d'eux ne doivent pas être déclarés
<footnote><p>
La raison en est que les relations de dépendance changent et vous ne 
déclarerez que les paquets et <em>seulement ceux-là</em> dont <em>vous</em> 
avez besoin. Ce dont les autres ont besoin est leur affaire. Si par exemple
vous utilisez la bibliothèque <tt>libimlib</tt>, vous aurez besoin d'une
dépendance de construction pour le paquet <package>libimlib2-dev</package> ;
mais vous n'avez pas besoin de dépendance pour les paquets <tt>libjpeg*</tt>,
même si <tt>libimlib2-dev</tt> dépend de ces paquets : l'installation de
<package>libimlib2-dev</package> s'assurera que toutes les dépendances
nécessaires à son exécution sont satisfaites.</p>
	    </footnote>.
           </p>
 
           <p>
Quand les relations de dépendance de compilation sont indiquées, on doit
pouvoir compiler un paquet et produire un binaire opérationnel sur un
système où les paquets <tt>essential</tt> et <tt>build-essential</tt> sont 
installés ainsi que ceux nécessaires pour que les relations de dépendance de 
compilation soient satisfaites (y compris les implicites). Cela signifie en 
particulier que, dans les relations de 
dépendance de compilation, on doit traiter rigoureusement les questions de
version de manière à éviter les paquets mal ou stupidement configurés quand
les relations de dépendances sont correctement satisfaites.
</p>
 
	<sect1>
	  <heading>Les modifications dans les «&nbsp;sources&nbsp;» originaux</heading>
	    
	  <p>
Si vous modifiez le code source d'une manière qui n'est pas liée au système
Debian, vous enverrez 
ces changements aux auteurs, dans la forme qu'ils préféreront, de manière à
ce qu'ils puissent être intégrés dans la version originale.
</p>
	    
	  <p>
Si vous avez besoin de configurer le paquet de façon différente sous 
Debian et sous Linux et si les sources originaux ne proposent pas de manière
de le faire, veuillez ajouter ces moyens de configuration.
C'est par exemple un nouveau test d'<prgn>autoconf</prgn> ou un
<tt>#define</tt>. Envoyez ensuite le «&nbsp;patch&nbsp;» aux auteurs,
en choisissant comme valeur par défaut la configuration qu'ils
avaient choisie.  Vous pouvez facilement remplacer la valeur par défaut
dans votre <tt>debian/rules</tt> ou dans tout autre endroit approprié.
</p>
	  <p>
Vous vérifierez que l'outil <prgn>configure</prgn>
détecte la bonne déclaration d'architecture (reportez
vous à la section <ref id="arch-spec"> pour plus de détails).
</p>
	  <p>
Si vous avez besoin de modifier un <prgn>Makefile</prgn> qui utilise
des scripts <prgn>configure</prgn> de style «&nbsp;GNU&nbsp;», vous modifierez
les fichiers <tt>.in</tt>, plutôt que directement le
<prgn>Makefile</prgn>. Cela permet à l'utilisateur de reconfigurer
le paquet si nécessaire. Vous <em>ne devez pas</em>
configurer le paquet et modifier le <prgn>Makefile</prgn> produit !
Cela rend impossible la reconfiguration ultérieure du paquet par
un autre utilisateur.
</p>
</sect1>
	    
	<sect1>
	  <heading>Comment documenter vos modifications ? </heading>
	    
	  <p>
Vous documenterez vos modifications et vos mises à jour des sources du paquet
dans le fichier <em>ad hoc</em> <tt>debian/changelog</tt>. (Plutôt que
de «&nbsp;réécrire l'histoire&nbsp;» en modifiant les vieilles entrées,
il vaut mieux corriger les erreurs en créant une 
nouvelle entrée dans le «&nbsp;changelog&nbsp;».)
</p>
	    
	  <p>
Dans les paquets définitifs, vous devez utiliser, 
pour <tt>debian/changelog</tt>, un format supporté par la version la plus 
récente de <prgn>dpkg</prgn>
<footnote><p>
Si vous souhaitez utiliser un autre format, vous pouvez le faire tant que
vous fournissez un outil d'analyse (parser) dans votre paquet source. Cet
outil doit avoir une API compatible avec celle attendue par 
<prgn>dpkg-genchanges</prgn> et par <prgn>dpkg-gencontrol</prgn>. Quand ce
nouveau format recueille un intérêt partagé, vous contacterez le 
responsable de <package>dpkg</package> afin qu'il ajoute le script analyseur 
de votre format dans le paquet <prgn>dpkg</prgn>. (Vous accepterez ainsi que 
l'analyseur et sa page de manuel soient distribués sous la licence 
«&nbsp;GNU GPL&nbsp;», comme l'est le reste du paquet <prgn>dpkg</prgn>.)
	      </p>
	    </footnote>.
</p>
</sect1>
	    
	<sect1>
	  <heading>La détection des erreurs dans les makefiles</heading>
	    
	  <p>
Quand <prgn>make</prgn> appelle une commande dans un
makefile (incluant les makefiles originaux de votre
paquet et <tt>debian/rules</tt>), cela se fait par
<tt>sh</tt>. Or <tt>sh</tt> traite mal les erreurs :
si vous incluez un mini-script shell en tant que
commande dans votre makefile, vous constaterez que si
vous n'avez pas de mécanisme de détection d'erreur, <prgn>make</prgn> 
continuera aveuglément malgré les problèmes rencontrés.
</p>
	    
	  <p>
Chaque fois que vous mettez plus d'une commande shell (cela
inclut l'utilisation d'une boucle) dans une commande
du makefile, vous devez vous assurer que les erreurs
sont détectées. Pour de simples commandes composées comme changer de 
répertoire et exécuter un programme,
il est suffisant d'utiliser «&nbsp;<tt>&amp;&amp;</tt>&nbsp;» à la place
du point-virgule.
Pour des commandes plus complexes incluant la plupart des boucles et 
des instructions conditionnelles, vous ajouterez la commande <tt>set -e</tt> 
au début de chacun de ces mini-scripts shell que sont les commandes d'un 
makefile.
</p>
</sect1>
	<sect1>
	  <heading>Les constructions obsolètes et les bibliothèques</heading>
	    
	  <p>
Le fichier d'«&nbsp;include&nbsp;» <prgn>&lt;varargs.h&gt;</prgn> est fourni 
pour les utilisateurs qui compilent des logiciels très anciens ; la 
bibliothèque <tt>libtermcap</tt> est fournie pour l'exécution de programmes 
qui ont été liés avec elle (soit de vieux programmes, soit des programmes comme
Netscape disponibles uniquement sous forme binaire).
</p>
	  <p>
Les paquets Debian utiliseront plutôt <prgn>&lt;stdarg.h&gt;</prgn> et 
<tt>ncurses</tt>.
</p>
</sect1>
</sect>
</chapt>

<chapt id="3"><heading>Les fichiers de contrôle et leurs
champs</heading>
<p>
Beaucoup d'outils du système de gestion des paquets manipulent les données de
la même façon : ces <em>données de contrôle</em> sont stockées dans des 
<em>fichiers de contrôle</em>.
Les paquets source et binaire possèdent des fichiers de contrôle ; et
les fichiers <tt>.changes</tt> qui contrôlent l'installation des
fichiers téléchargés, les bases de données internes à <tt>dpkg</tt>  
sont aussi des fichiers de contrôle.
<sect id="controlsyntax"><heading>La syntaxe des fichiers de contrôle</heading>
<p>
Un fichier consiste en un ou plusieurs paragraphes comportant des champs. Ces
paragraphes sont séparés par des lignes blanches. Certains fichiers de
contrôle n'autorisent qu'un seul paragraphe ; d'autres en autorisent 
plusieurs, et dans ce cas, chaque paragraphe fait souvent référence à un 
paquet différent. (Dans les paquets sources, par exemple, le premier 
paragraphe se réfère au paquet source et les paragraphes suivants aux paquets 
binaires créés à partir de ce source.)</p>
<p>
Chaque paragraphe est une série de champs contenant des données ; chaque champ
est constitué d'un nom, suivi par deux-points et la valeur associée. Il se
termine à la fin de la ligne. Les espaces horizontaux (espaces et
tabulations) peuvent apparaître immédiatement avant la valeur et après, mais 
là, ils sont ignorés ; par convention, il y a un espace après les deux-points.
Voici un exemple de champ :
<example>
           Package: libc6
         </example>
Le nom du champ est <tt>Package</tt> et la valeur est <tt>libc6</tt>.
</p>
<p>
Certaines valeurs de champ peuvent déborder sur plusieurs lignes ; dans ce cas
chaque nouvelle ligne <em>doit</em> commencer par un espace ou une tabulation.
Tous les espaces ou tabulations restants en fin de ligne sont ignorés.
	</p>      
<p>
Sauf indications contraires, une seule ligne de données est
autorisée et les espaces ne sont pas significatifs dans le corps du
champ. Les espaces ne doivent jamais apparaître dans les noms (de
paquets, d'architectures, de fichiers, etc), dans les numéros de version
ou entre les éléments de relations de version à plusieurs caractères.
	</p>
<p>
Les noms de champs sont indépendants de la casse ; en général, ceux-ci sont
écrits en commençant par une majuscule puis en mélangeant majuscules et
minuscules comme dans les exemples plus bas.
</p>
<p>
Les lignes vides ou les lignes contenant seulement des espaces ou des
tabulations ne sont pas autorisées à l'intérieur des valeurs de champ ou
entre les champs - ce qui signifierait un nouveau paragraphe.
	</p>
      </sect>
<sect><heading>La liste des champs</heading>
<p>
Cette liste n'est pas supposée être complète. La plupart des champs sont 
étudiés ailleurs dans ce texte.
	</p>
<p>
<sect1 id="Package"><heading><tt>Package</tt>
          </heading>

<p>
Le nom du paquet binaire. Les noms de paquet sont constitués de
caractères alphanumériques et des caractères <tt>+</tt>, <tt>-</tt>, <tt>.</tt>
(plus, moins, point).
	  </p>

	  <p>	    
Ils doivent contenir au moins deux caractères, commencer par un caractère
alphanumérique et ne pas contenir que des chiffres. Il est fortement 
recommandé de les écrire en minuscules
à moins que le paquet que l'on construit ou auquel on se réfère (par exemple,
dans d'autres champs) n'utilise déjà des majuscules.
</p>
	</sect1>
	
	<sect1 id="f-Version"><heading><tt>Version</tt></heading>

	  <p>	    
Ce champ donne le numéro de version des paquets source ou binaire - voir
<ref id="4">.
	  </p>

	</sect1>

	<sect1><heading><tt>Standards-Version</tt>
	  </heading>

	  <p>	    
Ce champ donne la plus récente version des normes (la charte Debian et les
textes associés) à laquelle se conforme le paquet. Il est mis à jour
manuellement quand on modifie le paquet source pour le rendre conforme
à des normes plus récentes ; on peut parfois se servir de ce champ pour
signaler qu'un paquet a besoin d'entretien. Son format est décrit plus bas ;
Voyez <ref id="standardsversion">.
  </p>

	</sect1>
	
	
	<sect1 id="Distribution"><heading><tt>Distribution</tt>
	  </heading>

	  <p>	    
Dans un fichier <tt>.changes</> ou affiché par l'analyse d'un changelog,
ce champ contient les noms (séparés par des espaces) des distributions dans 
lesquelles cette version du paquet sera installée. Les noms de 
distribution sont déterminés par les responsables de l'archive
	    <footnote>
Actuellement, les noms des distributions sont les suivants :
		<taglist>
		  <tag><em>stable</em></tag>
		  <item>
		    <p> 
C'est l'édition d'une version à jour de Debian GNU-Linux.
Une fois que la distribution est <em>stable</em>, seule la
correction d'erreurs majeures ou d'erreurs concernant la sécurité est 
autorisée. Quand cette distribution est modifiée, son numéro d'édition est 
incrémenté (par exemple : 1.2r1 devient 1.2r2 puis 1.2r3 etc.).
		    </p>
		  </item>
<tag><em>unstable</em></tag>
                  <item>
                    <p>
Cette valeur de distribution fait référence au côté
<em>développement</em> de l'arbre Debian des distributions. Les nouveaux
paquets, de nouvelles sources pour les paquets et la correction d'erreur
vont dans le répertoire <em>unstable</>. C'est prendre des risques que
d'utiliser cette distribution.
                    </p>
                  </item>
		  
		  <tag><em>testing</em></tag>
<item>
<p>
Cette valeur de distribution fait référence au côté <em>test</em> de l'arbre 
Debian des distributions. Les paquets qui la composent proviennent de la
distribution <em>unstable</em> où ils sont restés un court moment de manière
à s'assurer qu'ils n'ont pas de défauts graves. Les paquets de cette
distribution sont moins défectueux que ceux de la distribution 
<em>unstable</em> mais comportent des risques. On ne peut pas installer des
paquets dans <em>testing</em>.</p>
		  </item>

		  <tag><em>frozen</em></tag>
		  <item>
		    <p>
De temps en temps, la distribution <em>testing</em> entre dans un état 
dit de «&nbsp;gel du code&nbsp;» qui anticipe la version <em>stable</>. 
Pendant cette période de test, seules les corrections d'erreurs existantes ou 
nouvellement découvertes sont autorisées. Le détail précis de cette étape est
déterminé par le responsable de l'édition («&nbsp;Release Manager&nbsp;»).
		    </p>
		  </item>
		  
		  <tag><em>experimental</em></tag>
	  <item>
	    <p>
Les paquets qui possèdent cette valeur de distribution sont considérés par
leur responsable comme représentant un grand risque. Souvent, ce sont des
paquets en béta-test ou en cours de développement, provenant de sources
variées que les responsables veulent faire tester, mais ce ne sont pas des 
paquets qui peuvent être inclus dans d'autres répertoires de l'arbre Debian 
des distributions. À utiliser à ses risques et périls.
		    </p>
		  </item>
		</taglist>

<p>
On listera <em>toutes</em> les distributions dans lesquelles le paquet sera
installé. 
	      </p>
	    </footnote>.
	  </p>
	</sect1>
	      </sect>
    </chapt>
<chapt id="4"><heading>La numérotation des versions</heading>

<p>
Chaque paquet possède un numéro de version enregistré dans le champ 
<tt>Version</> de son fichier de contrôle.
</p>
<p>
Le système de gestion des paquets impose un ordre aux numéros de version : 
il peut ainsi connaître quel type de mise à niveau est en cours et les
applications qui lui servent d'interface peuvent dire si un paquet disponible 
est plus récent que celui installé sur le système. La partie la plus 
significative (du moins en ce qui concerne la comparaison) du format des 
numéros de version se trouve au début.
      </p>
<p>

Le format des numéros de version est le suivant :
&lsqb;<var>epoch</var><tt>:</tt>&rsqb;<var>version_originelle</var>&lsqb;<tt>-</tt><var>debian_revision</var>&rsqb;
      </p>
<p>
Les trois composants sont :

<taglist>

<tag><var>epoch</var></tag>
<item>
<p>
C'est simplement un entier non signé (souvent petit). Il peut être
omis et dans ce cas il est égal à 0. S'il est omis, le champ
<var>version_originelle</var> ne peut pas contenir un «&nbsp;:&nbsp;».
</p>
<p>
Il sert à permettre les erreurs dans les numéros des vieilles 
versions d'un paquet, et aussi à abandonner les précédentes structures de 
numérotation concernant les versions d'un paquet.
</p>
	  </item>

<tag><var>version_originelle</var></tag>
<item>
<p>
C'est la partie principale du champ. En général, on utilise le numéro de la 
version originelle («&nbsp;upstream&nbsp») du paquet à partir duquel le 
fichier <tt>.deb</> a été crée (s'il est utilisable). Le plus souvent, ce 
champ est dans le même format que celui spécifié par le ou les auteurs 
originels ; cependant, il peut devoir être reformaté pour s'adapter au format 
et aux méthodes de comparaison du système de gestion des paquets.
	    </p>
<p>
Les méthodes de comparaison du système de gestion des paquets en ce qui
concerne la partie <var>version_originelle</var> sont décrites  ci-dessous. 
Cette partie est obligatoire.
	    </p>
<p>
La partie <var>version_originelle</var> ne peut contenir que des
caractères alphanumériques <footnote><p>Les caractères alphanumériques sont :
<tt>A-Za-z0-9</tt></p>
	      </footnote>et les caractères <tt>.</tt>, <tt>+</tt>,
<tt>-</tt> et <tt>:</tt> (point, plus, trait d'union et deux-points) ; elle 
commencera par un chiffre. S'il n'y a pas de partie <var>révision_debian</var>
alors le trait d'union «&nbsp;-&nbsp;» n'est pas autorisé. S'il n'y a pas de
partie <var>epoch</var> alors les «&nbsp;:&nbsp;» ne sont pas autorisés.
	    </p>
	  </item>

<tag> <var>révision_debian</var></tag>
<item>
<p>
Cette partie du champ indique le numéro de version du paquet Debian basé sur
la version originelle. Il ne peut contenir que des caractères alphanumériques
et les caractères <tt>+</tt> et <tt>.</tt> (plus et point) ; les méthodes de 
comparaison sont les mêmes que pour la partie <var>version_originelle</var>.
	  </p>
<p>
Cette partie est facultative. Si elle manque, la partie
<var>version_originelle</var> ne peut contenir de trait d'union.  
On utilise cette partie quand un morceau de code a été écrit spécialement pour
obtenir un paquet Debian. Il n'y a qu'une seule <em>débianisation</em> de
ce paquet et aucune indication de révision n'est nécessaire.
</p>

<p>
Par convention, la partie <var>révision_debian</var> est remis à 1 à chaque
fois que la partie <var>version_originelle</var> est incrémentée.
</p>

<p>
Le système de gestion de paquet sépare les parties 
<var>version_originelle</var> et <var>révision_debian</var> au dernier trait 
d'union de la chaîne. Dans une comparaison, l'absence de la partie
<em>révision_debian</> est détectée plus tôt que sa présence (néanmoins 
la partie <var>révision_debian</var> est la partie la
moins significative du numéro de version).
</p>
	  </item>
</taglist>

Le système de gestion des paquets compare les parties 
<var>version_originelle</var> et <var>révision_debian</var> en utilisant le 
même algorithme.
      </p>

<p>
Les chaînes sont comparées de gauche à droite.
      </p>

<p>
Pour chaque chaîne, une partie initiale composée uniquement de
lettres est déterminée. Ces deux parties (l'une peut être vide) sont comparées
lexicalement. Si une différence est trouvée, elle est retournée. La
comparaison lexicale est une comparaison qui utilise des valeurs ASCII 
modifiées de manière à ce que toutes les lettres soient classées avant les 
chiffres et les caractères de ponctuation.
      </p>

<p>
Ensuite, pour ce qui reste de cette chaîne, une partie initiale composée
uniquement de chiffre est déterminée. La valeur numérique de ces deux
parties est comparée, la différence est retournée comme résultat de la
comparaison. Dans ce but, une chaîne vide (qui peut seulement
apparaître à la fin de l'une ou des deux chaînes que l'on compare)
compte pour zéro.
      </p>

<p>
Ces deux phases sont répétées (comparaison et suppression des caractères et 
des chiffres se trouvant au début des chaînes) jusqu'à ce qu'une différence 
soit trouvée ou que les deux chaînes soient terminées.
      </p>

<p>
Le but de la partie <var>epoch</var> est de permettre des erreurs dans la
numérotation de version et de s'arranger avec les situations où la
numérotation de version change. Il <em>ne sert pas</em> à corriger les
numéros de version contenant des chaînes de caractères que le système de
gestion des paquets ne peut pas interpréter (tel que <tt>ALPHA</tt> ou 
<tt>pre-</tt>) ou une numérotation bâtarde (l'auteur de ce manuel a 
entendu parler d'un paquet dont les versions allaient ainsi : <tt>1.1.1.2</>, 
<tt>1.3</>, <tt>1</>, <tt>2.1</>, <tt>2.2</>, <tt>2</> et ainsi de suite).
      </p>

<p>
Quand la numérotation d'un paquet pose problème, elle sera convertie en un 
format utilisable dans le champ <tt>Version</tt>.
      </p>

   <sect>
<heading>La numérotation des versions fondée sur des dates</heading>

<p>
En règle générale, les paquets Debian utiliseront les mêmes numéros de 
version que les sources.</p>

<p>
Cependant, la numérotation des sources est parfois fondée sur une date (par
exemple, un instantané d'une version de développement) ; le système de 
gestion des paquets ne peut pas manipuler cette numérotation sans les
<em>epochs</em>. Et <prgn>Dpkg</prgn> par exemple considère que
«&nbsp;96May01&nbsp;» est plus grand que «&nbsp;96Dec24&nbsp;».</p>

<p>
Pour éviter l'utilisation d'<em>epochs</em> à chaque nouvelle version source,
on emploiera dans de tels cas le format suivant : «&nbsp;19960501&nbsp;», «&nbsp;19961224&nbsp;».
Le responsable de paquet décidera d'embêter ou non le responsable des
sources avec une demande de modification de la numérotation de ses versions. 
	</p>

<p>
Il faut noter que d'autres formats fondés sur les dates et qui sont 
correctement analysés par le système de gestion des paquets <em> ne doivent
pas</em> être modifiés.
	</p>

<p>
Les paquets «&nbsp;Debian pure souche&nbsp;» (c.-à-d. écrits spécialement pour debian) 
dont les numéros de version comprennent des dates utiliseront toujours le
format suivant : «&nbsp;YYYYMMDD&nbsp;».
	</p>
      </sect>
    </chapt>

<chapt id="5"><heading>Considérations sur la construction de paquet</heading>
<sect id="timestamps"><heading>Timbres à date</heading>

<p>
Les responsables de paquets préserveront, autant que possible, 
les dates de modification des fichiers sources d'un paquet<footnote>
<p>
Le raisonnement est que la connaissance de l'âge d'un fichier apporte 
certaines informations ; par exemple, on peut reconnaître l'ancienneté de telle
documentation en regardant la date de modification. Et donc il serait bon de 
préserver les dates de modifications des fichiers sources.</p>
	  </footnote>.
</p>
      </sect>
<sect id="debianrules"><heading><tt>debian/rules</tt> - Le principal script
          de construction</heading>

<p>
Ce fichier doit être un <em>makefile</em> exécutable et doit contenir des 
règles permettant la compilation du paquet et la construction de paquet(s)
binaire(s) à partir des sources.
	</p>

<p>
Il doit commencer par la ligne <tt>#!/usr/bin/make -f</tt>,
afin de pouvoir être appelé directement sans passer par <prgn>make</prgn>.
	</p>

<p>
Puisqu'un script <tt>debian/rules</tt> interactif ne peut pas compiler un
paquet automatiquement et empêche une reproduction de ce paquet binaire par 
d'autres personnes, toutes les <em>cibles exigées</em> DOIVENT être
non-interactives. Au minimum, les cibles exigées sont celles qu'appelle
<prgn>dpkg-buildpackage</prgn>, à savoir, <em>clean</em>, <em>binary</em>,
<em>binary-arch</em>, <em>binary-indep</em>, et <em>build</em>. Il s'ensuit 
qu'une cible dont dépendent ces cibles, doit être aussi non interactive.
	</p>
<p>
Les cibles nécessaires et les cibles facultatives sont :

<taglist>
<tag><tt>build</tt></tag>
<item>
<p>
Configuration non interactive et compilation du paquet. Quand un paquet
possède une routine interactive de configuration préalable à la construction, 
soit le paquet source débianisé doit être construit après cette opération 
(afin qu'il puisse être construit sans ré-exécuter cette configuration), soit
la routine de configuration doit devenir non interactive. (Cette dernière façon
est préférable quand la routine détecte des caractéristiques propres à l'
architecture.)
	      </p>

<p>
Pour certains paquets, notamment ceux où la même arborescence source est 
compilée différemment pour obtenir des paquets binaires différents, la cible 
<tt>build</> n'a aucun sens. Pour ces paquets, il suffit de prévoir deux 
cibles ou plus (<tt>build-a</tt>, <tt>build-b</tt>, ...) pour chaque manière 
de construire le paquet et une cible <tt>build</tt> qui ne produit rien. La 
cible <tt>binary</tt> s'occupera de construire le paquet pour chaque cas 
possible et de créer le paquet binaire correspondant à chacun d'eux.
	      </p>

<p>
La cible <prgn>build</prgn> ne doit pas effectuer d'actions qui exigent les 
privilèges de root.
	      </p>

<p>
La cible <prgn>build</prgn> peut avoir besoin d'exécuter d'abord la 
cible <prgn>clean</prgn>. Voir ci-dessous.
	      </p>

<p>
Quand un paquet possède une routine de configuration qui prend du temps, ou 
quand le <em>makefile</em> est pauvrement conçu, ou quand <prgn>build</prgn> 
a d'abord besoin d'exécuter <prgn>clean</prgn>, il est alors intéressant 
d'exécuter <tt>touch build</tt> quand le processus de construction est 
terminé. On s'assure ainsi que si <tt>debian/rules build</tt> est lancé à
nouveau, il ne reconstruira pas le programme complet
<footnote><p>
Une autre façon de faire est que <prgn>build</prgn> dépende de 
<prgn>build-stamp</prgn> sans rien faire d'autre, et que 
<prgn>build-stamp</prgn> fasse le travail et se termine par 
<tt>touch build-stamp</tt>. C'est particulièrement utile si la routine
crée un fichier ou un répertoire appelé <tt>build</tt> ; <prgn>build</prgn>
doit alors être déclaré comme une cible <tt>.PHONY</tt>. Consultez la
documentation de <prgn>make</prgn> pour des renseignements sur les cibles
«&nbsp;phony&nbsp;»</p>
		</footnote>.
	      </p>

	    </item>
<tag><tt>binary</tt>, <tt>binary-arch</tt>, <tt>binary-indep</tt></tag>
<item>
<p>
La cible <prgn>binary</prgn> doit être tout ce qui est nécessaire à 
l'utilisateur pour construire le(s) paquet(s) binaire(s). Toutes ces cibles 
doivent
être non-interactives. Cette cible a deux parties : <prgn>binary-arch</prgn>
construit les paquets binaires qui sont spécifiques à une 
architecture particulière, et <prgn>binary-indep</prgn> construit les 
paquets qui ne le sont pas.
	      </p>

<p>
<prgn>binary</prgn> peut être (et c'est communément le cas) une cible sans 
commande, qui dépend simplement de <prgn>binary-arch</prgn> et de 
<prgn>binary-indep</prgn>.
	      </p>

<p>
Les deux cibles <prgn>binary-*</prgn> dépendront de la cible 
<prgn>build</prgn>, ci-dessus, afin que le paquet soit
construit s'il ne l'a pas déjà été. Elle créera ensuite les paquets binaires
pertinents en utilisant <prgn>dpkg-gencontrol</prgn> pour créer leurs fichiers
de contrôle et <prgn>dpkg-deb</prgn> pour construire les binaires et les 
placer dans le répertoire parent du répertoire.
	      </p>

<p>
Les cibles <prgn>binary-arch</prgn> et <prgn>binary-indep</prgn> 
<em>doivent</em> exister.
Si l'une des deux cibles <prgn>binary-*</prgn> n'a rien à faire (ce sera 
toujours le cas si le source crée un seul paquet binaire, qu'il soit 
dépendant de l'architecture ou pas), elle doit tout de même exister,
et doit toujours se dérouler correctement.
	      </p>

<p>
La cible <prgn>binary</prgn> doit être invoquée avec les privilèges de root
<footnote><p>
le paquet <prgn>fakeroot</prgn> permet souvent de construire correctement
un paquet tout en n'étant pas root.</p>
		</footnote>.
	      </p>
	    </item>
<tag><tt>clean</tt></tag>
            <item>

<p>
Cette cible doit nettoyer les effets obtenus par les cibles
<prgn>build</prgn> et <prgn>binary</prgn>, mais elle doit laisser les 
fichiers de sortie créés par la cible <prgn>binary</prgn> dans le répertoire 
parent. Cette cible ne doit pas être interactive.
	      </p>

<p>
Si un fichier <prgn>build</prgn> est créé par <prgn>touch</prgn> à la fin
de la cible <prgn>build</prgn>, comme suggéré ci-dessus, c'est la première 
chose qui sera effacée par la cible <prgn>clean</prgn> ; ainsi 
<prgn>build</prgn>, exécuté de nouveau après un nettoyage (<prgn>clean</prgn>)
interrompu, ne pensera pas que tout est déjà fait.
	      </p>

<p>
La cible <prgn>clean</prgn> peut avoir besoin d'être invoquée par root, si 
<prgn>binary</prgn> a été invoqué depuis le dernier <prgn>clean</prgn>, ou 
si <prgn>build</prgn> a été invoqué par root (étant donné que 
<prgn>build</prgn> peut créer des répertoires par exemple).
	      </p>
	    </item>
<tag><tt>get-orig-source</tt> (facultatif)</tag>
<item>
<p>
Cette cible va chercher la plus récente version du paquet original dans un 
site d'archive autorisé (par FTP ou WWW, par exemple), s'occupe des 
arrangements nécessaires pour le mettre sous la forme d'un fichier tar (une 
archive source) décrite ci-dessus, et le laisse dans le répertoire en cours.
	      </p>
<p>
Cette cible peut être invoquée dans n'importe quel répertoire et s'occupera
de supprimer tous ses fichiers temporaires. 
	      </p>
<p>
Elle est facultative mais la proposer, quand c'est possible, est une bonne 
idée.
	      </p>
	    </item>
	  </taglist>
<p>
Les cibles <prgn>build</prgn>, <prgn>binary</prgn> et <prgn>clean</prgn> 
doivent être invoquées avec comme répertoire actuel, le répertoire de plus
haut niveau du paquet.
	</p>
<p>
Des cibles supplémentaires peuvent exister dans <tt>debian/rules</tt>, soit
comme des interfaces publiées ou non documentées soit pour l'utilisation 
interne du paquet.
	</p>
<p>
Ce sont les variables de <prgn>make</prgn> à travers 
<prgn>dpkg-architecture</prgn> qui déterminent l'architecture <em>sur</em> 
laquelle et <em>pour</em> laquelle on construit. On peut obtenir, aussi bien
pour la machine sur laquelle on construit que pour la machine pour laquelle
on construit, la chaîne indiquant l'architecture Debian et la chaîne
indiquant l'architecture à la façon <em>GNU</em>. Voici une liste de
variables acceptées par <prgn>make</prgn> :
<list compact="compact">
            <item>
              <p><tt>DEB_*_ARCH</tt> (L'architecture Debian)</p>
</item>
            <item>
              <p><tt>DEB_*_GNU_TYPE</tt> (L'architecture indiquée à la
                façon <em>GNU</em>)</p>
            </item>
            <item>
              <p><tt>DEB_*_GNU_CPU</tt> (La partie CPU de 
<tt>DEB_*_GNU_TYPE)</tt></p>
            </item>
            <item>
<p><tt>DEB_*_GNU_SYSTEM</tt> (La partie système de <tt>DEB_*_GNU_TYPE)</tt></p>
          </list>
        </p>
<p>
où «&nbsp;*&nbsp;» représente <tt>BUILD</tt> pour une indication de la 
machine <em>sur</em>
laquelle on construit, ou bien <tt>HOST</tt> pour une indication de la machine
<em>pour</em> laquelle on construit.
	</p>
<p>
On peut assurer une compatibilité ascendante dans le fichier <em>rules</em>
en fixant par défaut les bonnes variables à des valeurs adéquates ;
veuillez consulter la documentation de <prgn>dpkg-architecture</prgn>
pour des précisions.
	</p>
<p>
Il est important de comprendre que la chaîne <tt>DEB_*_ARCH</tt> détermine
seulement l'architecture Debian sur ou pour laquelle on construit. On
ne l'utilisera pas pour avoir des renseignements sur le CPU ou le
Système ; les variables GNU sont là pour ça.
	</p>
      </sect>
    <sect id="dpkgchangelog"><heading><tt>debian/changelog</tt>
        </heading>

<p>
Ce fichier enregistre les modifications apportées aux éléments Debian
d'un paquet<footnote>Bien que rien n'empêche un auteur qui est aussi le 
responsable Debian d'utiliser ce fichier pour tous les changements, il faudra 
modifier son nom si les responsables Debian et les auteurs deviennent 
différents. Mais dans ce cas, il vaudrait mieux considérer le paquet comme
n'étant pas un paquet «&nbsp;pure souche&nbsp;» Debian.
</footnote>.
	</p>

<p>

Son format spécial permet aux outils de construction de paquets
de découvrir quelle version du paquet est en train de se construire
et de trouver des informations spécifiques à cette version.
	</p>

<p>

Le format ressemble à une suite d'entrées :

<example>
<var>paquet</var> (<var>version</var>) <var>distribution(s)</var>; 
urgency=<var>urgency</var>

  * <var>détails des modifications</var>
    <var>plus de détails</var>
  * <var>encore plus de détails</var>

 -- <var>nom du responsable et adresse électronique</var> <var>date</var>
</example>
	</p>

<p>
Les entrées <var>paquet</var> et <var>version</var> représentent le nom du 
paquet source et le numéro de version.
	</p>

<p>
L'entrée <var>distribution(s)</var> liste les distributions dans lesquelles 
cette version sera installée. Elle est copiée dans le champ 
<tt>Distributions</> du fichier <tt>.changes</tt>.
Voyez <ref id="Distribution">.
	</p>

<p>
<var>urgency</var> est la valeur pour le champ <tt>Urgency</tt>
du fichier <tt>.changes</> pour le chargement.
Une <var>urgency</var> ne peut pas contenir de virgules ; les virgules sont 
utilisées pour séparer les couples 
<tt><var>mot-clé</var>=<var>valeur</var></tt> dans le format du fichier
d'enregistrement de <tt>dpkg</> (bien qu'il n'y ait pour
l'instant qu'un seul <var>mot-clé</var> utile : <tt>urgency</>)<footnote><p>
les valeurs habituelles pour <tt>urgency</> sont : <tt>low</tt>, 
<tt>medium</tt>, <tt>high</tt> et <tt>critical</tt>. Elles influent sur la
rapidité avec laquelle on envisagera l'installation du paquet dans la 
distribution <tt>testing</tt> et elles donnent une indication de l'importance
des corrections contenues dans ce chargement (upload).</p>
	  </footnote>.
	</p>

<p>
Les détails sur les modifications peuvent n'être qu'une suite de lignes 
commençant par au moins deux espaces, mais par convention, on commence
une modification par une étoile «&nbsp;*&nbsp;» suivie d'un espace ; les 
lignes de continuation sont indentées pour les amener en face du texte de la 
ligne précédente. On peut séparer si l'on veut les groupes de modifications
par des lignes vides.
	</p>

<p>
Si par ce chargement sont corrigés des bogues enregistrés par le système de 
suivi de bogues (BTS), ils seront automatiquement fermés par l'installation
de ce paquet dans l'archive Debian et une chaîne 
<tt>closes: Bug#<var>nnnnn</var></tt> sera insérée dans les notes de
modifications<footnote>
<p>
Pour être précis, cette chaîne doit correspondre à l'expression rationnelle
Perl suivante (où $pound=<tt>#</tt>;) :
              <example>
/closes:\s*(?:bug)?${pound}?\s?\d+(?:,\s*(?:bug)?\${pound}?\s?\d+)*/i
              </example>
<footnote>
<p>Nous avons du mettre la variable $pound dans l'expression car
les outils servant à imprimer le texte n'admettaient pas un symbole « # »
précédé d'une barre oblique.</p>
	      </footnote>
<p>
Alors tous les numéros de bogues listés seront fermés par le script de
maintenance de l'archive (<prgn>katie</prgn>), ou, dans le cas d'une mise à
jour par un suppléant du responsable (Non-maintainer-upload), seront
marqués comme corrigés.</p>
	  </footnote>.
<p>
Le nom de responsable et son adresse électronique utilisés dans le 
<em>changelog</em> seront ceux de la personne installant <em>cette</em>
version. Ils <em>ne sont pas</em> nécessairement ceux du responsable habituel
du paquet. Ces informations seront copiées dans le champ <tt>Changed-By</tt>
du fichier <tt>.changes</tt> file, et plus tard, utilisées pour envoyer un 
accusé de réception quand le chargement aura été installé.
<p>

La date doit être dans le format RFC 822
<footnote>produite par le programme <prgn/822-date/</footnote>;
elle doit inclure le nom du fuseau horaire (timezone) spécifié
sous forme de chiffre, et en option le nom du fuseau ou son abréviation entre
parenthèses.

<p>
La première ligne de «&nbsp;titre&nbsp;» avec le nom du paquet commencera
sur la marge de gauche, la ligne de «&nbsp;fin&nbsp;» avec les renseignements sur
le responsable et la date, doit être précédée par exactement
un espace. Les éléments responsable et date doivent être
séparés exactement par deux espaces.
	</p>

<p>
<sect1><heading>Comment définir des formats alternatifs pour le fichier
<tt>changelog</>
<p>

Il est possible d'utiliser un format différent de celui proposé,
en fournissant un analyseur pour le format qu'on veut utiliser.
	  </p>
<p>
Un analyseur de changelog ne doit pas être interactif.
	  </p>
	</sect1>
      </sect>
<sect id="srcsubstvars"><heading><tt>debian/substvars</tt>
          et le remplacement de variables</heading>

<p>
Quand <prgn/dpkg-gencontrol/, <prgn/dpkg-genchanges/ et
<prgn/dpkg-source/ créent des fichiers de contrôle, ils procèdent au 
remplacement des variables qu'ils doivent écrire dans ces fichiers. Les
substitutions de variable sont de la forme 
<tt>${<var>variable-nom</var>}</tt>.
Le fichier facultatif <tt>debian/substvars</tt> contient les remplacements de 
variable à utiliser. On peut aussi fixer directement les variables dans le 
fichier <tt>debian/rules</> en utilisant l'option <tt>-V</> des commandes 
d'empaquetage des sources ; certaines variables prédéfinies sont disponibles.
	</p>

<p>
Le fichier <tt>debian/substvars</tt> est habituellement créé et modifié 
dynamiquement par les cibles de <tt>debian/rules</tt>, et dans ce cas, il 
doit être supprimé par la cible <prgn>clean</prgn>.
	</p>

<p>
Voyez <manref name="dpkg-source" section="1"> pour plus de détails sur les
remplacements de variables source, et sur le format de
<tt>debian/substvars</tt>.
	</p>
      </sect>

<sect id="debianfiles"><heading><tt>debian/files</tt></heading>

<p>
Ce fichier n'est pas un fichier permanent de l'arborescence source ; il est
utilisé pendant la construction des paquets pour enregistrer quels
fichiers sont en train d'être créés. <prgn>dpkg-genchanges</prgn>
l'utilise quand il crée un fichier <tt>.changes</tt>.
	</p>
<p>
Ce fichier ne doit pas exister dans le paquet source qu'on propose, et il 
doit être supprimé par la règle <tt>clean</> (ainsi que n'importe quel fichier 
temporaire ou de sauvegarde tel que <tt>files.new</tt>
<footnote><tt>files.new</> est utilisé
temporairement par <prgn>dpkg-gencontrol</prgn> et
<prgn>dpkg-distaddfile</prgn> ; ils écrivent une nouvelle version
de <tt>files</> avant de le renommer, pour éviter de laisser
une copie corrompue, si une erreur se produit.</footnote>).
Il peut aussi être sage, pour garantir un nouveau départ, de l'enlever ou
de le vider au début de la cible <tt>binary</tt>.
	</p>

<p>
Quand <prgn>dpkg-gencontrol</prgn> est exécuté pour un paquet binaire, il
ajoute une entrée dans le fichier <tt>debian/files</tt> pour le fichier 
<tt>.deb</tt> qui sera créé quand <prgn>dpkg-deb --build</prgn> sera
exécuté pour ce paquet binaire. Ainsi pour la plupart des paquets, il n'y a 
rien d'autre à faire que de supprimer ce fichier dans la cible 
<prgn>clean</prgn>.
	</p>

<p>
Si un chargement de paquet inclut des fichiers autres que ceux du paquet
source ou des paquets binaires dont les fichiers de contrôle ont été créés par
<prgn>dpkg-gencontrol</prgn>, ces fichiers seront placés dans le
répertoire parent du répertoire racine du paquet et 
<prgn>dpkg-distaddfile</prgn> sera appelé pour ajouter ces fichiers à la liste
<tt>debian/files</tt>.
	</p>
      </sect>

<sect id="restrictions"><heading>Restrictions sur les objets dans les paquets source</heading>

<p>
Un paquet source ne peut pas contenir des liens «&nbsp;en dur&nbsp;»<footnote>
<p>On ne les détecte pas encore pendant la phase de construction du paquet
source, mais seulement pendant la phase d'extraction.</p>
	  </footnote><footnote>
<p>
À l'avenir, les liens «&nbsp;en dur&nbsp;» pourraient être autorisés d'une manière ou
d'une autre, mais cela demandera beaucoup de travail.
	    </p>
	  </footnote>,
des fichiers spéciaux pour les <em>device</em>, des <em>sockets</em> ou des fichiers
<em>setuid</em> ou <em>setgid</em><footnote>
<p>
Les répertoires <em>setgid</em> sont autorisés.
	    </p>
	  </footnote>.
	</p>
      </sect>
<sect id="descriptions"><heading>La description des paquets - le champ
          <tt>Description</tt></heading>
<p>
La description d'un programme est faite pour permettre à l'utilisateur qui
n'a jamais entendu parler de ce programme auparavant de savoir s'il veut
l'installer. Elle donnera des informations sur les conflits et
dépendances significatives entre ce paquet et les autres, afin que
l'utilisateur sache pourquoi ces conflits et dépendances ont été
déclarés.
	</p>

<sect1><heading>Remarques sur la rédaction des descriptions</heading>

<p>
La ligne de résumé sera brève -- moins de 80 caractères.
	  </p>

<p>
Ne mettez pas le nom du paquet dans la ligne de résumé. Le logiciel
sait déjà l'afficher, et ce n'est pas nécessaire de l'indiquer. N'oubliez pas
que dans beaucoup de cas, l'utilisateur ne peut lire que la ligne de résumé : 
il faut donc la rendre aussi instructive que possible.
	  </p>

<p>
N'essayez pas de poursuivre la ligne du résumé dans la description étendue. 
Cela ne fonctionnera pas correctement quand la description complète est 
affichée et cela n'aura aucun sens quand  seul le résumé (la ligne de
résumé) est disponible.
	  </p>
<p>
La description étendue décrira ce que fait le paquet, et comment il
se relie au reste du système (en termes, par exemple, de sous-systèmes,
de partie de ...).
	  </p>
<p>
Le champ description doit être compréhensible pour tout le monde, y compris
ceux qui n'ont aucune idée sur ce que fait le paquet<footnote>
<p>
Le commentaire, qui est fourni par un programme dans ses fichiers
d'annonces et/ou fichiers <tt>README</tt>, est rarement approprié pour une
utilisation dans une description. Il est habituellement conçu pour les
gens qui connaissent déjà le paquet...
	      </p>
	    </footnote>.
	  </p>

<p>
Mettez les informations importantes d'abord, à la fois dans le résumé et 
dans la description étendue. Quelques fois, seule la première partie du
résumé ou de la description sera affichée. En principe on peut supposer qu'il 
y a une manière de voir l'ensemble de la description étendue.
	  </p>

<p>
Quand on le souhaite, on peut inclure des informations sur les dépendances 
ou sur d'autres choses dans la description étendue.
	  </p>

<p>
N'utilisez pas le caractère de tabulation, son effet est imprévisible.
	  </p>
	</sect1>
      </sect>
    </chapt>

<chapt id="6"><heading>Les scripts du responsable de paquet
        et la procédure d'installation</heading>
<sect><heading>Introduction aux scripts du responsable de paquet</heading>

<p>
Il est possible de fournir des scripts qui seront exécutés
par le système de gestion de paquet lors d'une installation, d'une mise à 
jour ou d'une suppression du paquet.
	</p>

<p>
Ces scripts sont les fichiers <tt>preinst</tt>, <tt>postinst</tt>, 
<tt>prerm</tt> et <tt>postrm</tt> de la zone de contrôle du paquet. Ils
doivent être des fichiers exécutables corrects ; quand ce sont des scripts 
(ce qui est recommandé), ils doivent commencer par la convention habituelle :
<tt>#!</tt>. Ils seront lisibles et exécutables par tout le monde mais ils
ne pourront pas être modifiés.
	</p> 

<p>
Le système de gestion de paquet teste le code de sortie de ces scripts. Il 
est important que ce code soit différent de zéro quand il y a une erreur ;
le système de gestion de paquet peut alors s'interrompre. Pour les
scripts shell, cela signifie qu'on doit <em>presque toujours</em>
utiliser <tt>set -e</tt> (et c'est généralement vrai pour tout script shell).
Bien sûr, il est aussi important que ce code ne soit pas différent de zéro 
quand tout s'est bien passé.
	</p>

<p>

Il est nécessaire pour les procédures de gestion des erreurs que les
scripts soient idempotents ;  c.-à-d., le même script doit pouvoir être
appelé plusieurs fois dans la même situation sans provoquer de
problèmes. Si le premier appel échoue, ou s'arrête au milieu du chemin
pour une raison ou une autre, le second appel fera, s'il y en a, les choses
qui n'ont pas été faites la première fois et se terminera normalement.
	</p>

<p>
Quand un paquet est mis à jour, une combinaison des scripts du vieux et
du nouveau paquet est appelée durant la procédure de mise à jour. Il faut 
faire attention quand les scripts se compliquent et il faut vérifier leurs 
arguments.
	</p>

<p>
D'une manière générale, le script <prgn>preinst</prgn> est appelé avant 
d'installer (une version particulière d') un paquet, et le script 
<tt>postinst</tt> après ; le script <tt>prerm</tt> avant d'effacer (une 
version d') un paquet et <tt>postrm</tt> après.
	</p>

<p>
Normalement on ne doit pas préfixer le chemin des programmes appelés par les 
scripts. Avant le début de l'installation, le système de
gestion de paquet vérifie que les programmes <prgn>ldconfig</prgn>, 
<prgn>start-stop-daemon</prgn>, <prgn>install-info</prgn> et 
<prgn>update-rc.d</prgn> peuvent être trouvés via la
variable d'environnement <tt>PATH</tt>. Ces programmes, et n'importe quel
autre programme qu'on s'attend à trouver dans le <tt>PATH</>, seront
donc appelés sans nom de chemin absolu.
Les scripts du responsable ne doivent pas non plus réinitialiser la variable
<tt>PATH</tt>, bien qu'ils puissent choisir de la modifier en ajoutant
au début ou à la fin un répertoire spécifique à un paquet.
Ces considérations s'appliquent vraiment à tous les scripts shell.
	</p>
      </sect>

<sect>
        <heading>L'idempotence des scripts du responsable</heading>
<p>
Il est nécessaire pour les procédures de gestion des erreurs que les
scripts soient idempotents. Cela signifie qu'un script, appelé à nouveau
après une exécution réussie, n'explose pas et ne fait pas de dégâts ; il
s'assure simplement que chaque chose est à sa place. Si le premier appel 
échoue, ou s'arrête au milieu du chemin pour une raison ou une autre, le 
second appel fera, s'il y en a, les choses qui n'ont pas été faites la 
première fois et se terminera normalement si tout est correct <footnote><p>
Qu'une erreur arrive -- l'utilisateur interrompt <prgn>dpkg</prgn> ou bien 
quelque chose d'imprévu se passe -- il ne faut pas laisser un paquet 
défectueux à l'utilisateur quand <prgn>dpkg</prgn> essaye de refaire l'action.
	    </p>
	  </footnote>.
	</p>
      </sect>
<sect>
        <heading>Les terminaux de contrôle et les scripts du responsable</heading>

<p>
Les scripts du responsable sont assurés de s'exécuter avec un terminal de 
contrôle et de pouvoir interagir avec l'utilisateur. Quand ils ont besoin de
demander un mot de passe, d'intervenir en plein écran... c'est à partir de et
vers <tt>/dev/tty</tt> qu'ils le feront, puisque <prgn>dpkg</prgn> redirige
à un moment ou un autre les sorties et entrées standards des scripts de 
manière à enregistrer le processus d'installation. De même les scripts Perl, 
ces scripts pouvant rediriger leur sortie standard dans un tube à des fins 
d'enregistrement, utiliseront un mode de sortie sans buffer
en déclarant <tt>$|=1</tt> de manière à ce que la sortie soit affichée
immédiatement plutôt que d'être mise dans un buffer.
	</p>
<p>
Chaque script retournera un code de sortie égal à zéro en cas de succès et
un code différent de zéro en cas d'échec.
	</p>
      </sect>

<sect id="mscriptsinstact"><heading>Résumé des façons d'appeler les scripts du 
responsable</heading>
<p>

<list compact="compact">
<item> 
<p><var>preinst-du-nouveau-paquet</var> <tt>install</tt></p>
	    </item>
<item> 
<p><var>preinst-du-nouveau-paquet</var> <tt>install</tt> <var>vieille-version</var>
	      </p>
	    </item>
<item> 
<var>preinst-du-nouveau-paquet</var> <tt>upgrade</tt> <var>vieille-version</var></p>
	    </item>
<item> <var>preinst-de-l'ancien-paquet</var> <tt>abort-upgrade</tt> 
<var>nouvelle-version</var></p>
	    </item>
</list>

<list compact="compact">
<item> 
<p><var>postinst</var> <tt>configure</tt> <var>version-la-plus-récemment-configurée</var></p>
	    </item>
<item> <var>postinst-de-l'ancien-paquet</var> <tt>abort-upgrade</tt> 
<var>nouvelle-version</var></p>
	    </item>
<item> <var>postinst-du-paquet-conflictuel</var> <tt>abort-remove in-favour</tt>
<var>paquet nouvelle-version</var></p>
	    </item>
<item> <var>postinst-du-paquet-déconfiguré</var> <tt>abort-deconfigure in-favour</tt>
<var>paquet-dont-installation-a-échoué version</var> <tt>removing</tt> 
<var>paquet-conflictuel</var> <var>version</var></p>
	    </item>
	  </list>
<p>
<list compact="compact">
<item>
<p> <var>prerm</var> <tt>remove</tt></p>
	    </item>
<item>
<p> <var>prerm-de-l'ancien-paquet</var> <tt>upgrade</tt> <var>nouvelle-version</var></p>
	    </item>
<item>
<var>prerm-du-nouveau-paquet</var> <tt>failed-upgrade</tt> <var>nouvelle-version</var>
</p>
	    </item>
<item> 
<p><var>prerm-du-paquet-conflictuel</var> <tt>remove</tt><tt>in-favour</tt> 
<var>paquet</var> <var>nouvelle-version</var></p>
	    </item>
<item>
<p><var>postrm-du-paquet-déconfiguré</> <tt>deconfigure in-favour</tt>
<var>paquet-installé version</var> <tt>removing</tt> 
<var>paquet-conflictuel version</var></p>
	    </item>
</list>

<list compact="compact">
<item>
<p><var>postrm</var> <tt>remove</tt></p>
	    </item>
<item>
<p><var>postrm</var> <tt>purge</tt></p>
	    </item>

<item>
<p><var>postrm-de-l'ancien-paquet</var> <tt>upgrade</tt> <var>nouvelle-version</var></p>
	    </item>
<item>
<p><var>postrm-du-nouveau-paquet</var> <tt>failed-upgrade</tt> <var>vieille-version</var>
	      </p>
	    </item>
<item>
<p> <var>postrm-du-nouveau-paquet</var> <tt>abort-install</tt></p>
	    </item>
<item>
<p><var>postrm-du-nouveau-paquet</var> <tt>abort-install</tt> <var>vieille-version</var>
	      </p>
	    </item>
<item>
<p><var>postrm-du-nouveau-paquet</var> <tt>abort-upgrade</tt> <var>vieille-version</var>
	      </p>
	    </item>
<item>
<p><var>postrm-du-paquet-disparu</var> <tt>disappear</tt> <var>remplaçant</var> 
<var>version-du-remplaçant</var></p>
	    </item>
</list>
	</p>

<sect id="unpackphase">Précisions sur la phase de dépaquetage lors d'une
installation ou d'une mise à jour
<p>

La procédure d'installation ou de mise à jour -- remplacement, 
effacement --  (c'est à dire quand on exécute <tt>dpkg --unpack</tt>, ou bien 
l'étape <em>unpack</em> de <tt>dpkg --install</tt>) est la suivante. Dans 
chaque cas, si une erreur majeure se produit (à moins d'être listée 
ci-dessous), les actions sont généralement «&nbsp;rembobinées&nbsp;» -- ce 
qui signifie que les scripts du responsable sont 
exécutés dans l'ordre inverse avec des arguments différents. Ce sont les 
appels «&nbsp;correction d'erreur&nbsp;» listés ci-dessous.

<enumlist>
<item>
<p>
     <enumlist>
     <item>
<p>
Si une version du paquet est déjà installée, appel
	   <example>
		<var>prerm-de-l'ancien-paquet</var> upgrade <var>nouvelle-version</var>
	   </example>

     <item>Quand le script se termine avec un code de sortie
différent de zéro, <prgn>dpkg</prgn> essaye :
	   <example>
	<var>prerm-du-nouveau-paquet</var> failed-upgrade <var>vieille-version</var>
	   </example>
	  Correction d'erreur, dans les deux cas ci-dessus :
	   <example>
<var>postinst-de l'ancien-paquet</var> abort-upgrade <var>nouvelle-version</var>
	   </example>
</p>
		  </item>
     </enumlist>
</p>
	    </item>

<item>
<p>
Si un paquet conflictuel est enlevé en même temps :
     <enumlist>
   
     <item>
<p>
Quand un paquet dépend de ce paquet conflictuel et si l'option
 <tt>--auto-deconfigure</> est spécifiée, appel pour chaque paquet :
	<example>
	<var>prerm-du-paquet-déconfiguré</var> deconfigure in-favour
	<var>paquet-à-installer</var> <var>version</var>
	removing <var>paquet-conflictuel</var> <var>version</var>
        </example>

	Correction d'erreurs :
	<example>
	<var>postinst-du- paquet-déconfiguré</var> abort-deconfigure in-favour
	<var>paquet-dont-l'installation-a-échouée</var> <var>version</var>
	removing <var>paquet-conflictuel</var> <var>version</var>
        </example>
	Les paquets déconfigurés sont indiqués comme nécessitant une
configuration, afin que si l'option <tt>--install</> est utilisée, ils 
soient, si possible, de nouveau configurés.
		    </p>

		  </item>
<item>
<p>
Pour préparer l'effacement du paquet conflictuel, appel :
	<example>
	<var>prerm-du-paquet-conflictuel</var> remove in-favour
	 <var>paquet</var> <var>nouvelle-version</var>
	</example>
	Correction d'erreurs :
	<example>
	<var>postinst-du-paquet-conflictuel</var> abort-remove in-favour
	 <var>paquet</var> <var>nouvelle-version</var>
        </example>
		    </p>
		  </item>
		</enumlist>
	      </p>
	    </item>

<item>
     <p>
<enumlist>
     <item>
<p>
Si le paquet est mis à jour, appel :
	<example>
	<var>preinst-du-nouveau-paquet</var> upgrade <var>vieille-version</var>
        </example>
		    </p>
		  </item>
<item>
Autrement si le paquet a des fichiers de configuration d'une
          version précédemment installée (c'est à dire, il ne reste
	  plus du paquet que les fichiers de configuration) :
	<example>
	<var>preinst-du-nouveau-paquet</var> install <var>vieille-version</var>
	</example>
		    </p>
     <item>
<p>
Autrement (c'est à dire, le paquet a été complètement
effacé) :
	<example>
	<var>preinst-du-nouveau-paquet</var> install
	</example>

	Les corrections d'erreurs, respectivement :
	<example>
<var>postrm-du-nouveau-paquet</var> abort-upgrade <var>vieille-version</var>
<var>postrm-du-nouveau-paquet</var> abort-install <var>vieille-version</var>
<var>postrm-du-nouveau-paquet</var> abort-install
	</example>
		    </p>
		  </item>
		</enumlist>
	      </p>
	    </item>
<item>
Les fichiers du nouveau paquet sont dépaquetés, remplacant ceux qui
peuvent déjà être sur le système, par exemple, les fichiers appartenant à la
vieille version du même paquet ou ceux d'un autre paquet. Les sauvegardes des
vieux fichiers sont laissées, et si quelque chose se passe mal, le système de 
gestion des paquets, dans sa partie «&nbsp;correction d'erreurs&nbsp;» 
essayera de les remettre en place.
	      </p>
<p>
C'est une erreur pour un paquet de contenir des fichiers qui sont sur le
système dans un autre paquet, à moins que <tt>Replaces</> soit utilisé
(voir <ref id="replaces">). </p>
<!-- Pour l'instant l'option <tt>force-overwrite</tt> -->
<!--est disponible, la dégradant en un avertissement, mais cela ne sera 
peut-être pas toujours le cas.-->
<p>
C'est une erreur plus grave pour un paquet de contenir un simple
fichier ou autre chose qu'un répertoire quand un autre paquet veut un
répertoire (à moins que <tt>Replaces</tt> ne soit utilisé).
Cette erreur peut être évitée si c'est l'effet recherché, en utilisant
<tt>--force-overwrite-dir</>, mais ce n'est pas à conseiller.
	      </p>
<p>
Les paquets qui remplacent mutuellement leurs fichiers ont une démarche qui,
bien que déterministe, est difficile à comprendre pour
un administrateur système. Cela peut aisément conduire à des programmes 
annoncés comme «&nbsp;absent&nbsp;» quand, par exemple, un paquet remplacant 
tel fichier d'un autre paquet est installé puis effacé<footnote>Une 
partie du problème vient certainement d'une erreur de <tt>dpkg</>.</footnote>.
	      </p>
<p>
Un répertoire ne sera jamais remplacé par un lien symbolique vers un
répertoire et vice versa ; à la place, l'état existant (lien symbolique
ou non) est conservé et <tt>dpkg</tt> suivra les liens s'il y en a.
	      </p>
	    </item>

<item>
<p>   <enumlist>
   <item>
Si le paquet est mis à jour, appel :
	<example>
<var>postrm-de l'ancien-paquet</var> upgrade <var>nouvelle-version</var>
	</example></p>
		  </item>

   <item>
<p>Si cela échoue, <prgn>dpkg</prgn> essaye :
	<example>
<var>postrm-du-nouveau-paquet</var> failed-upgrade <var>vieille-version</var>
	</example>
	Les corrections d'erreur, dans les deux cas :
	<example>
<var>preinst-de-l'ancien-paquet</var> abort-upgrade <var>nouvelle-version</var>
	</example>
		    </p>
		  </item>
		</enumlist>
<p>
	C'est le point de non-retour - Quand <prgn>dpkg</prgn> atteint ce 
point, il ne revient pas en arrière si une erreur se produit. Le paquet
reste dans un très mauvais état et demande une réinstallation réussie 
pour remettre tout en place ; cela arrive quand <prgn>dpkg</prgn> 
commence à faire des choses irréversibles.
	      </p>
	    </item>
	
<item>
Tous les fichiers de la version précédente du paquet qui ne sont pas dans la
nouvelle sont effacés.
	      </p>
	    </item>
<item>
La nouvelle liste de fichiers remplace la précédente.
	      </p>
	    </item>

<item>
Les nouveaux scripts du responsable remplacent les anciens.
	      </p>
	    </item>

<item>
Les paquets dont tous les fichiers ont été remplacés pendant
l'installation, et qui ne sont pas nécessaires pour les dépendances,
sont considérés comme effacés. Pour ces paquets :
	<enumlist>
	<item>
<p>
<prgn>dpkg</prgn> appelle:
	      <example>
             <var>postrm-du-paquet-effacé</var> disappear 
<var>remplaçant</var> <var>version-du-remplaçant</var>
	      </example>
		    </p>
		  </item>

	<item>
<p>Les scripts du responsable de paquet sont effacés.
		    </p>
		  </item>

	<item>
Le paquet est inscrit dans la base de données des statuts
comme étant dans un état correct, à savoir non installé (ses 
<em>conffiles</em> sont ignorés et non pas supprimés par <prgn>dpkg</prgn>).
Il faut remarquer que <prgn>dpkg</prgn> n'appelle pas le script prerm du paquet
effacé, car il ne sait pas à l'avance que le paquet va disparaître.
		    </p>
		  </item>
	</enumlist>
	      </p>
	    </item>
<item>
<p>
Les fichiers du paquet à installer qui sont aussi répertoriés par d'autres 
paquets sont enlevés des listes de ces paquets (ce qui
lobotomisera la liste de fichiers du paquet «&nbsp;conflictuel&nbsp;», s'il y en a
un).
	      </p>
	    </item>

<item>
<p>
Les fichiers de sauvegarde faits pendant la phase précédente d'installation
sont effacés.
	      </p>
	    </item>

<item>
Le statut du nouveau paquet est correct et enregistré comme
«&nbsp;dépaqueté&nbsp;».</p> 
<p>
C'est un autre point de non-retour - si l'effacement d'un
paquet conflictuel échoue, on ne «&nbsp;rembobine&nbsp;» pas le reste de
l'installation ; le paquet conflictuel est laissé dans un état 
«&nbsp;enlevé à moitié&nbsp;».
	      </p>
	    </item>

<item>
Au cas où existe un paquet conflictuel, on procède aux actions
d'effacement (décrites ci-dessus), en commençant par l'effacement des
fichiers du paquet conflictuel (les fichiers qui sont aussi dans le
paquet installé ont déjà été effacés de la liste des fichiers du paquet
conflictuel et ne sont pas enlevés maintenant).
	      </p>
	    </item>
          </enumlist>
	</p>
      </sect>
<sect><heading>Précisions sur la configuration</heading>

<p>
Quand on configure un paquet ( avec <tt>dpkg --install</tt>, ou avec 
<tt>--configure</tt>), on met à jour d'abord les <tt>conffiles</tt> et
ensuite on appelle :
<example>
<var>postinst</var> configure <var>version-la-plus-récemment-configurée</var>
</example>
	</p>
<p>
On n'essaye pas de «&nbsp;rembobiner&nbsp;» après une erreur pendant la
configuration.
	</p>
<p>
S'il n'existe pas de «&nbsp;version-la-plus-récemment-configurée&nbsp;», <tt>dpkg</tt> 
passe un argument nul ; les vieilles versions de <tt>dpkg</tt> peuvent passer
dans ce cas <tt>&lt;unknow&gt;</tt> (avec les signes supérieur et inférieur). 
Et les plus vieilles versions ne passent pas de second argument du tout, 
quelques soient les circonstances.
	</p>
      </sect>

<sect><heading>Précisions sur la phase de suppression sans et/ou avec 
suppression des fichiers de configuration</heading>

<p>
<enumlist>

<item>
<p>
<example>
<var>prerm</var> remove
		</example>
	      </p>
	    </item>
<item> 
Les fichiers du paquet sont effacés (sauf les <tt>conffiles</tt>).
	      </p>
	    </item>

<item>
<p>
<example>
<var>postrm</var> remove
		</example>
	      </p>
	    </item>

<item> 
<p>Tous les scripts du responsable sont effacés sauf <tt>postrm</tt>.
	      </p>
<p>
Si on n'efface pas le paquet, la procédure s'arrête là. Il faut remarquer que
les paquets qui n'ont pas de <tt>postrm</tt> ni de <tt>conffiles</tt> sont 
automatiquement purgés pendant l'effacement, comme il n'y pas de différence, 
sauf pour le statut de <prgn>dpkg</prgn>.
	      </p>
	    </item>


<item>
Les <em>conffiles</em> et les fichiers de sauvegarde (<tt>~</tt>-fichier,
<tt>#*#</tt>fichiers, <tt>%</tt>-fichiers, <tt>.dpkg-{old, new, tmp}</tt>, 
etc.) sont effacés.
	      </p>
	    </item>

<item>
<example>
<var>postrm</var> purge
		</example>
	      </p>
	    </item>

<item>
La liste des fichiers du paquet est effacée.
	      </p>
	    </item>
</enumlist>

Aucune tentative n'est faite pour «&nbsp;rembobiner&nbsp;» après une erreur durant la
phase de suppression.</p>
      </sect>
    </chapt>

<chapt id="7"><heading>Comment déclarer des relations entre les paquets ?</heading>

<p>
Les paquets peuvent déclarer dans leur fichier <em>control</em> qu'ils ont
certaines relations avec d'autres paquets - par exemple, qu'ils ne
peuvent pas être installés en même temps que tel paquet,
et/ou qu'ils dépendent de la présence de tel autre, ou bien qu'ils doivent
remplacer les fichiers de certains s'ils sont présents.
      </p>
<p>
On se sert pour cela des champs du fichier <em>control</em> :
<tt>Depends</tt>, <tt>Pre-Depends</tt>,<tt>Recommends</tt>, <tt>Sugggests</tt>
, <tt>Enhances</tt>, <tt>Conflicts</tt>, <tt>Provides</tt> et 
<tt>Replaces</tt>.
      </p>
    
<p>
Les paquets sources peuvent déclarer des relations avec des paquets
binaires : par exemple, ils ont besoin que tel paquet soit présent ou
absent au moment de leur construction.
      </p>
<p>
On se sert pour cela des champs du fichier <em>control</em> :
<tt>Build-Depends</tt>, <tt>Build-Depends-Indep</tt>, 
<tt>Build-Conflicts</tt> et <tt>Build-Conflicts-Indep</tt>.
      </p>

<sect id="depsyntax">La syntaxe des champs de relation</heading>

<p>
Ces champs ont tous la même syntaxe. Ce sont des listes de
noms de paquets séparés par des virgules.
	</p>

<p>
Dans les champs <tt>Depends</tt>, <tt>Recommends</tt>, <tt>Suggests</tt>, 
<tt>Pre-Depends</tt>, <tt>Build-Depends</tt> et <tt>Build-Depends-Indep</tt> 
(les champs qui déclarent les dépendances d'un paquet envers d'autres 
paquets), ces noms peuvent aussi être des listes de noms de paquets 
alternatifs, séparés par des symboles barre verticale «&nbsp;|&nbsp;» 
(symbole du tube de communication). Si c'est le cas, quand l'un des paquets
alternatifs est installé, on considère que cette partie de la dépendance
est satisfaite.
	</p>

<p>
Tous les champs sauf le champ <tt>Provides</tt> peuvent restreindre leur
application à des versions particulières de chaque paquet nommé. Ces versions
sont indiquées entre parenthèses après chaque nom de paquet ; les
parenthèses contiendront une des relations de la liste ci-dessous,
suivie par un numéro de version, dans le format décrit dans
<ref id="4">.
	</p>

<p>
Les relations autorisées sont : <tt>&lt;&lt;</tt>, <tt>&lt;=</tt>,
<tt>=</tt>, <tt>&gt;=</tt> et <tt>&gt;&gt;</tt>pour
strictement avant, avant ou égal, égal, après ou égal, strictement
après, respectivement. Les formes déconseillées <tt>&lt;</tt> et 
<tt>&gt;</tt> ont été utilisées pour signifier avant/après ou égal, plutôt 
que strictement avant/après, ainsi elles ne doivent pas apparaître dans les 
nouveaux paquets (bien que <prgn>dpkg</prgn> les accepte encore).
	</p>

<p>
Les espaces peuvent apparaître n'importe où dans la spécification de
version sujette aux règles énoncées dans <ref id="controlsyntax">, et doivent 
apparaître là où c'est nécessaire pour supprimer toute ambiguïté ; autrement 
ils ne sont pas significatifs. Pour la cohérence et dans le cas de futures 
modifications de <prgn>dpkg</prgn>, il est recommandé de mettre un seul 
espace après une relation de version et avant un numéro de version ; il est 
aussi convenu de mettre un espace après chaque virgule, de chaque côté d'une 
barre verticale, et avant chaque parenthèse ouvrante.
	</p>

<p>
Par exemple, une liste de dépendances peut apparaître ainsi :
<example>
Package: mutt
Version: 1.3.17-1
Depends: libc6 (>= 2.2.1), exim | mail-transport-agent
</example>
	</p>

<p>
On peut limiter à un ensemble d'architectures tous les champs qui précisent 
des relations pour la compilation 
(<tt>Build-Depends</tt>, <tt>Build-Depends-Indep</tt>, <tt>Build-Conflicts</tt>
et<tt>Build-Conflicts-Indep</tt>). On se sert de crochets après chaque nom
de paquet et l'indication facultative de la version. Les crochets enferment
une liste d'architectures acceptées par Debian, séparées par un espace. Un
point d'exclamation peut être ajouté à chaque nom. (On ne peut pas ajouter un
point d'exclamation à certains noms et pas à d'autres.) Quand l'architecture de
la machine hôte n'est pas présente dans la liste et qu'il n'y a pas de
point d'exclamation, ou bien quand elle est dans la liste et préfixée par un 
point d'exclamation, le paquet et l'indication de la version associée sont
complètement ignorés pour ce qui concerne la définition du système de
relation.
	</p>
<p>
Par exemple :
<example>
            Source: glibc
            Build-Depends-Indep: texinfo
            Build-Depends: kernel-headers-2.2.10 [!hurd-i386],
            hurd-dev [hurd-i386], gnumach-dev [hurd-i386]
          </example>
        </p>
      </sect>

<sect>
        <heading>Les dépendances pour les paquets binaires - <tt>Depends</tt>,
          <tt>Recommends</tt>, <tt>Suggests</tt>, <tt>Enhances</tt>,
 <tt>Pre-Depends</tt>
        </heading>

<p>
Ces cinq champs sont utilisés pour déclarer une relation de dépendance d'un
paquet envers un autre paquet. Ils apparaissent dans le fichier 
<em>control</em> du paquet dépendant.
	</p>

<p>
Tous ces champs, sauf <tt>Pre-Depends</tt> et <tt>Conflicts</tt> 
(voir ci-dessous) prennent effet <em>seulement</em> lors de la configuration 
du paquet. Ils n'empêchent pas qu'un paquet soit sur le système dans un état 
«&nbsp;non configuré&nbsp;» et ses dépendances non satisfaites ; il est aussi 
possible de remplacer un paquet correctement installé et dont les dépendances 
sont satisfaites par une version différente dont les dépendances ne sont pas 
et ne peuvent pas être satisfaites ; quand c'est le cas, le paquet dépendant 
est laissé «&nbsp;non configuré&nbsp;» (étant donnée que les tentatives pour 
le configurer donnent des erreurs) et il ne fonctionne pas correctement.
	</p>

<p>
Pour cette raison, lors d'une installation, les paquets sont généralement
tous installés d'abord et tous configurés ensuite ; cela permet que les
dernières versions des paquets ayant des dépendances sur les dernières
versions d'autres paquets voient leurs dépendances satisfaites.
	</p>

<p>
Ainsi le champ <tt>Depends</tt> autorise les responsables de paquet à imposer 
un ordre sur la manière de configurer les paquets.
	</p>


<p>
<taglist>
<tag><tt>Depends</tt></tag>
<item>
<p>
Ce champ déclare une dépendance absolue.
	    </p>
<p>
Le champ <tt>Depends</> sera utilisé quand le paquet dépendant a besoin,
pour fonctionner d'une manière intéressante, de tel paquet.
	    </p>
	  </item>

<tag><tt>Recommends</tt></tag>
<item>
ce champ déclare une dépendance forte, mais pas absolue.
<p>
Le champ <tt>Recommends</tt> listera les paquets qu'on trouve habituellement 
avec ce paquet dans toute installation standard.
	    </p>
	  </item>

<tag><tt>Suggests</tt></tag>
<item>
<p>
On se sert de ce champ pour déclarer qu'un paquet serait plus utile avec
un ou plusieurs autres paquets. On indique au système de gestion de
paquet et à l'utilisateur que les paquets listés sont liés au paquet et
qu'ils peuvent peut-être augmenter son utilité, mais qu'une installation 
sans ces paquets est parfaitement concevable.
	    </p>
	  </item>

<tag><tt>Enhances</tt></tag>
<item>
<p>
Ce champ ressemble au champ <tt>Suggests</tt> mais il marche en sens inverse. 
On s'en sert pour déclarer qu'un paquet améliore l'efficacité de tel
autre paquet.
	      </p>
	    </item>
<tag><tt>Pre-Depends</tt></tag>
<item>
Ce champ ressemble au champ <tt>Depends</tt>, sauf qu'il force aussi
<prgn>dpkg</prgn> à terminer l'installation des paquets qu'il liste avant 
même de démarrer l'installation du paquet qui déclare ces pré-dépendances.
	    </p>

<p>
Le champ <tt>Pre-Depends</tt> sera utilisé parcimonieusement, et de
préférence seulement pour les paquets dont une mise à jour ou une installation
prématurée entraverait la capacité du système à continuer
les mises à jour en cours.
	    </p>

<p>
Quand le paquet déclarant une relation de <tt>Pre-Dépendance</tt> est 
configuré, cette relation sera considérée comme satisfaite seulement si le 
paquet dépendant a bien été configuré, comme si une relation 
<tt>Depends</tt> ordinaire avait seulement été utilisée.
	    </p>

<p>
Cependant, quand on installe un paquet déclarant une relation de 
pré-dépendance, cette relation peut être satisfaite même si le paquet 
demandé est seulement dépaqueté ou reste «&nbsp;à moitié configuré&nbsp;», 
pourvu qu'il ait été déjà correctement configuré au moins une fois (et pas 
effacé ou partiellement effacé depuis). Dans ce cas, les deux versions,
celle précédemment configurée et celle actuellement dépaqueté ou dans un état
«&nbsp;à moitié configuré&nbsp;», doivent satisfaire toute clause de version 
contenue dans le champ <tt>Pre-Depends</tt>.
	    </p>
	  </item>
	</taglist>
	</p>

<p>
Pour choisir un niveau de dépendance, on mesurera l'importance du paquet
demandé pour les fonctionnalités du paquet qui déclare la dépendance. Certains
paquets sont composés d'éléments plus ou moins importants. Un tel paquet
listera dans le champ <tt>Depends</tt> le ou les paquets qui sont nécessaires 
aux éléments les plus importants. Les autres éléments peuvent
être mentionnés comme des Suggestions ou des Recommandations, selon
l'importance relative de ces éléments.
	</p>

<sect id="conflicts"><heading>Les paquets binaires alternatifs --
          les champs <tt>Conflicts</tt> et <tt>Replaces</tt>
        </heading>
<p>
Quand un paquet déclare un conflit avec un autre, <prgn>dpkg</prgn> refuse
de les installer en même temps sur le système.
	</p>
<p>
Si l'on veut installer l'un de ces paquets, l'autre doit d'abord être supprimé 
-- si le paquet en cours d'installation est marqué comme remplaçant
(voir <ref id="replaces">) le paquet sur le système, ou si celui-ci est 
marqué comme «&nbsp;désélectionné&nbsp;», ou bien si les deux paquets sont 
marqués <tt>Essential</tt>, alors <prgn>dpkg</prgn> enlève automatiquement le 
paquet qui crée le conflit, ou bien arrête l'installation du nouveau paquet 
par une erreur. Ce mécanisme ne fonctionne pas quand le paquet installé est 
marqué <tt>Essential</tt> et que le nouveau paquet ne l'est pas.
	</p>

<p>
Un paquet ne provoque pas de conflit simplement parce que ses fichiers de
configuration sont toujours installés ; il doit être au moins dans l'état 
«&nbsp;à moitié installé&nbsp;».
	</p>

<p>
Une exception spéciale est faite pour les paquets qui déclarent un conflit
avec leur propre nom de paquet, ou avec le paquet virtuel qu'ils
fournissent (voir ci-dessous) : cela n'empêche pas leur installation,
et cela autorise un paquet à déclarer un conflit avec les paquets qui 
peuvent le remplacer. On utilise ce dispositif quand on veut 
que le paquet en question soit le seul paquet à fournir un paquet virtuel.
	</p>

<p>
Une entrée <tt>Conflicts</> ne devrait presque jamais avoir une clause de
version indiquant une relation «&nbsp;avant&nbsp;». Cela empêcherait <prgn>dpkg</prgn> 
de mettre à jour ou d'installer le paquet qui déclare un tel conflit jusqu'à 
ce que la mise à jour ou l'effacement du paquet en conflit ait été terminé.
	</p>
      </sect>

<sect id="virtual"><heading>Les paquets virtuels -- le champ <tt>Provides</tt></heading>

<p>
Aussi bien que des noms de paquets réels (concrets), les champs de
relation <tt>Depends</tt>, <tt>Build-Depends</tt>, 
<tt>Build-Depends-Indep</tt>, <tt>Recommends</tt>, <tt>Suggests</tt>, 
<tt>Conflicts</tt>, <tt>Build-Conflicts</tt> et <tt>Build-Conflicts-Indep</tt> 
peuvent mentionner des noms de paquets virtuels.
	</p>

<p>
Un paquet virtuel est un paquet qui apparaît dans le champ
<tt>Provides</tt> du fichier «&nbsp;control&nbsp;» d'un autre paquet. L'effet est
le même que si le ou les paquets qui fournissent un paquet virtuel particulier 
avaient été listés par leur nom partout où le nom du paquet virtuel
apparaît.
	</p>

<p>
Quand un paquet réel et un paquet virtuel ont le même nom, la
dépendance peut être satisfaite (ou le conflit provoqué) soit par le
paquet réel soit par n'importe quel paquet fournissant le paquet virtuel et 
qui indique cette dépendance.
Par exemple, en supposant que nous ayons :
<example>
Package: vm
Depends: emacs
</example>
Et que quelqu'un d'autre sorte un paquet xemacs, il peut dire :
<example>
Package: xemacs
Provides: emacs
</example>

Et tout fonctionnera entre temps (jusqu'à ce qu'un nom de paquet
purement virtuel soit décidé et que les paquets <tt>emacs</tt> et <tt>vm</tt>
soient modifiés pour l'utiliser).
	</p>

<p>
Quand un numéro de version est attaché à une dépendance ou à un conflit,
seuls les paquets réels seront examinés pour savoir si la relation est
satisfaite (ou, pour un conflit, l'interdiction violée) - on supposera
qu'un paquet réel qui fournit un paquet virtuel n'a pas la «&nbsp;bonne&nbsp;»
version. Ainsi, un champ <tt>Provides</tt> ne peut pas contenir de numéros
de version, et le numéro de version du paquet concret qui fournit un
paquet virtuel particulier n'est pas examiné quand on considère une
dépendance envers ou un conflit avec le nom du paquet virtuel.
	</p>

<p>
Il est probable que la possibilité d'indiquer un numéro de version pour 
chaque paquet virtuel sera ajoutée dans une version prochaine de 
<prgn>dpkg</prgn>. Cette caractéristique n'est pas encore présente et il vaut
mieux s'en servir très peu souvent.
	</p>

<p>
Quand on  veut spécifier quel paquet d'un ensemble de paquets réels
sera celui qui satisfait par défaut une dépendance particulière envers
un paquet virtuel, on listera le paquet réel alternatif
avant le paquet virtuel.
	</p>

<p>

<sect id="replaces"><heading>le champ <tt>Replaces</tt> -- remplacer les fichiers et les paquets</heading>

<p>
 Le champ <tt>Replaces</tt> du fichier «&nbsp;control&nbsp;» a deux buts qui entrent en
jeu dans des situations différentes.
	</p>

<p>
Les paquets virtuels (voir <ref id="virtual">) ne sont
pas pris en compte quand on examine le champ <tt>Replaces</tt> - les paquets
déclarés comme étant remplacés doivent être mentionnés par leurs noms
réels.
	</p>


<sect1><heading>Remplacer les fichiers appartenant à d'autres paquets</heading>

<p>
Tout d'abord, comme mentionné auparavant, qu'un paquet possède des fichiers 
qui sont sur le système mais dans un autre paquet est généralement une erreur,
bien qu'actuellement l'option <tt>--force-overwrite</tt> soit mise
par défaut, déclassant l'erreur en avertissement.
	  </p>

<p>
Si le paquet qui veut faire un remplacement déclare qu'il remplace le paquet
qui contient le fichier à remplacer, <prgn>dpkg</prgn> procède au
remplacement du fichier de l'ancien paquet par le nouveau. Ce fichier ne
sera plus listé comme faisant partie de l'ancien paquet.
	  </p>

<p>
Quand un paquet est ainsi complètement remplacé, de sorte que
<prgn>dpkg</prgn> ne sait pas quels fichiers il contient encore, on 
considère qu'il a disparu. Sur le système, il est marqué comme 
«&nbsp;non sélectionné&nbsp;» (sélectionné pour l'effacement) et «&nbsp;non installé&nbsp;». 
Tous les renseignements contenus dans les <em>conffiles</em> sont ignorés, vu
que le paquet remplaçant les aura repris. Le script <tt>postrm</tt> du paquet 
est exécuté pour permettre au paquet de faire le nettoyage final nécessaire.
Voir <ref id="mscriptsinstact">.
	  </p>

<p>
À l'avenir, <prgn>dpkg</prgn> laissera de côté les fichiers qui remplacent les 
fichiers d'un autre paquet (ce paquet déclarant qu'il remplace celui qui est 
en cours d'installation) de telle sorte qu'on puisse installer sans problème
une version plus ancienne d'un paquet.
	  </p>

<p>
Cet usage de <tt>Replaces</> prend seulement effet quand deux paquets sont
-- au moins partiellement -- en même temps sur le système, et cela peut 
seulement se produire s'ils ne sont pas en conflit, ou si le conflit a été 
annulé.
	  </p>
	</sect1>

<sect1><heading>Le remplacement total d'un paquet ; forcer sa suppression</heading>

<p>
Et deuxièmement, le champ <tt>Replaces</tt> permet au système de gestion des
paquets de savoir quel paquet enlever quand il y a un conflit - voir
<ref id="conflicts">. Cet usage prend seulement effet quand deux paquets sont 
réellement en conflit, afin que les deux effets n'interfèrent pas l'un avec 
l'autre.
	  </p>
	</sect1>
      </sect>

<sect><heading>Les relations entre les paquets binaires et les paquets sources
-- les champs <tt>Build-Depends</tt>, <tt>Build-Depends-Indep</tt>,
          <tt>Build-Conflicts</tt>, <tt>Build-Conflicts-Indep</tt>
        </heading>

<p>
Un paquet source peut déclarer une dépendance (ou un conflit) envers un 
paquet binaire en se servant des champs <tt>Build-Depends</tt>,
<tt>Build-Depends-Indep</tt>, <tt>Build-Conflicts</tt> et 
<tt>Build-Conflicts-Indep</tt> du fichier <em>control</em>. Le sens de ces
déclarations est que les dépendances ou les conflits qu'elles définissent
doivent être résolus (comme ça a été défini plus haut pour les paquets
binaires) quand l'une des cibles de <tt>debian/rules</tt> à laquelle tel
champ s'applique est appelée.

<taglist>
            <tag><tt>Build-Depends</tt>, <tt>Build-Conflicts</tt></tag>
            <item>
              <p>
Les champs <tt>Build-Depends</tt> et <tt>Build-Conflicts</tt> s'appliquent aux
cibles <tt>build</tt>, <tt>binary</tt>, <tt>binary-arch</tt>
                et <tt>binary-indep</tt>.
              </p>
            </item>
 <tag><tt>Build-Depends-Indep</tt>, <tt>Build-Conflicts-Indep</tt></\tag>
            <item>
              <p>
Les champs <tt>Build-Depends-Indep</tt> et <tt>Build-Conflicts-Indep</tt> 
s'appliquent aux cibles <tt>binary</tt> et <tt>binary-indep</tt>.
              </p>
            </item>
          </taglist>
	</p>
      </sect>
    </chapt>

<chapt id="8"><heading>L'utilisation des fichiers de configuration
      </heading>


<p>
<prgn>dpkg</prgn> peut faire de la manipulation automatique sur les fichiers 
de configuration des paquets.
      </p>

<p>
Que cet automatisme soit correct dépend d'un certain nombre de facteurs,
mais fondamentalement, il y a deux approches pour tout type de fichier de
configuration.
      </p>

<p>
Une méthode simple consiste à embarquer la meilleure configuration possible 
dans un fichier et à utiliser le mécanisme des <em>conffiles</em> pour gérer 
les mises à jour. C'est une bonne approche quand il est peu probable que 
l'utilisateur veuille modifier le fichier (mais il faut que cela soit 
possible sans perdre les modifications déjà faites), et quand la fréquence
de mise à jour du paquet contenant une version modifiée du fichier est 
peu élevée.
      </p>

<p>
L'autre méthode consiste à construire entièrement le fichier de configuration 
à partir du script <tt>postinst</tt>, et à prendre la responsabilité de 
résoudre automatiquement les erreurs des versions précédentes du paquet. 
C'est justifié quand le fichier est nécessairement différent sur chaque 
système.
      </p>
    </chapt>

<chapt id="9"><heading>Les bibliothèques partagées</heading>

<p>
On doit construire les paquets qui contiennent des bibliothèques partagées 
avec un peu de soin pour s'assurer que ces bibliothèques seront
toujours disponibles. Et particulièrement, les paquets qui demandent des
bibliothèques vitales, telle que la bibliothèque <em>libc</em>.
      </p>

<p>
Tout d'abord, le paquet installera les bibliothèques partagés sous
leurs vrais noms. Par exemple, le paquet <prgn>libgdbm1</prgn> installera 
<tt>libgdbm.so.1.7.3</tt> en tant que <tt>/usr/lib/libgdbm.so.1.7.3</tt>. 
Aucun script <em>prerm</em> ou <em>postrm</em> ne changera le nom de ces 
fichiers ni ne créera de lien pour ces fichiers ; <prgn>dpkg</prgn> s'occupe
des changements de nom et cela, sans troubler les programmes en fonctionnement.
Essayer d'interférer avec ce système crée des problèmes.
      </p>

<p>
Ensuite, le paquet comportera le lien symbolique que <prgn>ldconfig</prgn>
doit créer pour les bibliothèques partagées. Par exemple, le paquet
<prgn>libgdbm1</prgn> inclura un lien symbolique de
<tt>/usr/lib/libgdbm.so.1.7.3</tt> vers <tt>libgdbm.so.1.7.3</tt>. C'est
nécessaire pour que <prgn>ld.so</prgn> puisse trouver la bibliothèque entre le
moment où <prgn>dpkg</prgn> l'installe et celui où <prgn>ldconfig</prgn> est 
exécuté par le script <prgn>postinst</prgn>. De plus, de vieilles versions du
système de gestion des paquets demande que la bibliothèque soit
placée avant le lien qui pointe sur elle dans le fichier <tt>.deb</tt>. Ainsi,
avant que <prgn>dpkg</prgn> n'installe le lien symbolique (en remplaçant le 
lien précédent qui pointe sur une version plus ancienne de la bibliothèque), 
la nouvelle bibliothèque est déjà en place. Malheureusement, ce ne fût pas 
toujours possible puisque cela dépendait grandement du système de fichier. 
Certains systèmes de fichiers (comme reiserfs) réordonne les fichiers de 
sorte que l'ordre dans lequel on les crée n'importe pas. Avec la version 
<tt>1.7.0</tt>, <prgn>dpkg</prgn> réordonne lui-même les fichiers lors de la 
construction d'un paquet.
      </p>

<p>
Troisièmement, le paquet de développement comportera un lien
symbolique pour la bibliothèque partagée sans numéro de version. Par
exemple, le paquet <prgn>libgdbm1-dev</prgn> inclura un lien
symbolique de <tt>/usr/lib/libgdbm.so</tt> vers <tt>libgdbm.so.1.7.3</tt>.
Ce lien symbolique est nécessaire à <prgn>ld</prgn> quand il compile les
paquets ; il cherche en effet seulement <tt>libgdbm.so</tt> et 
<tt>libgdbm.a</tt> pour, respectivement, une compilation dynamique ou une
compilation statique.
      </p>

<p>
Tout paquet qui installe des bibliothèques partagées dans un répertoire
listé par <tt>/etc/ld.so.conf</tt> ou dans un répertoire des répertoires
par défaut de <prgn>ld.so</prgn> (actuellement, il y a <tt>/usr/lib</tt>
et <tt>/lib</tt>) doit appeler <prgn>ldconfig</prgn> dans son script 
<prgn>postinst</prgn> si et seulement si le premier argument est «&nbsp;configure&nbsp;».
Cependant, c'est important de ne pas appeler <prgn>ldconfig</prgn> dans les 
scripts postrm ou preinst dans le cas où le paquet est mis à jour 
(voir <ref id="unpackphase">) ; en effet <prgn>ldconfig</prgn> voit les
noms temporaires que <prgn>dpkg</prgn> donne à ces fichiers lors de l'
installation ; et il fait pointer les liens des bibliothèques partagées sur 
ces noms, juste avant que <prgn>dpkg</prgn>, continuant l'installation, ne
supprime les liens !
      </p>

    

<sect id="shlibs"><heading>Le format du fichier <tt>shlibs</tt></heading>

<p>
Ce fichier est utilisé par <tt>dpkg-shlibdeps</> ; il est nécessaire quand
un paquet fournit des bibliothèques partagées.
<p>

Chaque ligne est de la forme :
<example>
nom-bibliothèque version-ou-nomso dépendances ...
</example>

<em>nom-bibliothèque</em> est le nom de la bibliothèque partagée, par exemple
<tt>libc5</tt>.
<p>

<em>version-ou-nomso</> est le <em>nom-so</em> de la bibliothèque -- c'est 
à dire le nom qui doit coller exactement pour que la bibliothèque soit reconnue
par <tt>ld.so</tt>. Généralement, c'est le numéro majeur de version de
la bibliothèque.
<p>

<em>dépendances</> a la même syntaxe que le champ dépendance dans le
fichier <em>control</em> d'un paquet binaire. Il donnera des renseignements
sur les paquets nécessaires pour construire un paquet binaire à partir de
la version de bibliothèque contenue dans le paquet.
Voir <ref id="depsyntax">.
	</p>

<p>
Par exemple, si le paquet <tt>foo</tt> contient <tt>libfoo.so.1.2.3</tt> où
le nom-so de la bibliothèque est <tt>libfoo.so.1</tt>, et si la première 
version du paquet contenant un numéro mineur valant au moins <tt>2.3</tt> 
est égal à <em>1.2.3-1</em>, alors le <em>shlibs</> du paquet pourrait dire :
<example>
libfoo 1	foo (>= 1.2.3-1)
</example>

La dépendance envers une version spécifique est faite dans le but d'éviter 
les avertissements de <tt>ld.so</> concernant l'utilisation de bibliothèques 
partagées plus anciennes avec des binaires plus récents.
	</p>


<sect><heading>Quelques informations techniques sur <tt>shlibs</tt></heading>

<p>
<sect1><heading><em>Qui</em> sont les fichiers <tt>shlibs</tt> ? </heading>

<p>
Le fichier <tt>debian/shlibs</tt> fournit une façon de vérifier les
dépendances des bibliothèques partagées des paquets binaires.
Ces fichiers sont faits pour rendre la vie des responsables de paquet 
plus facile.
	  </p>

<p>
Les autres fichiers <tt>shlibs</> qui existent sur un système Debian
sont :
<list>
<item><tt>/etc/dpkg/shlibs.default</tt></p>
	      </item>
<item><tt>/etc/dpkg/shlibs.override</tt></p>
	      </item>
<item><tt>/var/lib/dpkg/info/*.shlibs</tt></p>
	      </item>
<item><tt>debian/shlibs.local</tt></p>
	      </item>
</list>

Ces fichiers sont utilisés par <tt>dpkg-shlibdeps</> lors de la création d'un
paquet binaire.
	  </p>
	</sect1>


<sect1><heading>Comment <em>fonctionne</em> <tt>dpkg-shlibdeps</> ?</heading>

<p>
<prgn>dpkg-shlibdeps</prgn> détermine directement<footnote>
<p>
Il le faisait en appelant <prgn>ldd</prgn>, mais maintenant il appelle
<prgn>objdump</prgn>. Cependant cela implique quelques changements dans la 
manière de construire un paquet.
	      </p>
<p>
Un binaire <tt>foo</tt> utilise directement la bibliothèque
<tt>libbar</tt> quand il est lié à cette bibliothèque. Les bibliothèques
dont <tt>libbar</tt> a besoin sont liées indirectement à <tt>foo</tt>, et
l'éditeur de liens dynamiques les charge automatiquement quand il charge
<tt>libbar</tt>. Avec <prgn>ldd</prgn> on a une liste de toutes les
bibliothèques, qu'elles soient utilisées directement ou indirectement ;
avec <prgn>objdump</prgn> on a seulement les bibliothèques liées directement.
Un paquet ne doit dépendre que des bibliothèques qui lui sont directement
attachées, puisque les dépendances de ces bibliothèques amèneront
automatiquement les autres bibliothèques.
	      </p>
<p>
Cependant, ce changement signifie réellement un changement dans la façon de
construire les paquets : actuellement,<prgn>dpkg-shlibdeps</prgn> fonctionne
uniquement avec des binaires. mais puisque on va dépendre du fait que les
bibliothèques déclarent les bibliothèques dont elles ont besoin, les paquets
qui contiennent ces bibliothèques devront lancer <prgn>dpkg-shlibdeps</prgn>
sur les bibliothèques.
	      </p>
<p>
Cela nous aiderait beaucoup, par exemple, dans l'actuel gâchis lié aux
multiples versions de la bibliothèque <em>mesa</em>. Avec le système
<prgn>ldd</prgn> chaque paquet qui utilise mesa doit ajouter une dépendance
envers <tt>svgalib|svgalib-dummy</tt> pour gérer la variante <tt>mesa</tt> de 
glide. Avec le système <prgn>objdump</prgn> ce n'est plus nécessaire et cela 
aurait éviter beaucoup de travail à tout le monde.
	      </p>
<p>
Un autre exemple : on pourrait mettre à jour <tt>libimlib</tt> avec une version
qui accepte le nouveau format graphique <em>dgf</em>. En utilisant
l'ancienne méthode <prgn>ldd</prgn>, chaque paquet qui se sert de 
<tt>libimlib</tt> devrait être recompilé pour qu'il dépende aussi de 
<tt>libdgf</tt>, sinon il ne marcherait pas à cause de symboles manquants. 
Mais, avec le nouveau système, les paquets qui se servent de 
<tt>libimlib</tt>  peuvent dépendre simplement de <tt>libimlib</tt> qui 
possède elle-même la dépendance envers <tt>libgdh</tt> et ils n'auront pas 
besoin d'être mis à jour.
	      </p>
	    </footnote>
les bibliothèques partagées qu'utilisent les binaires compilés et les 
bibliothèques passés en paramètre sur sa ligne de commande.
	      </p>

<p>
Pour chaque bibliothèque partagée nécessaire, <tt>dpkg-shlibdeps</tt> a 
besoin de connaître :
<list compact="compact">
<item>le paquet contenant la bibliothèque, et
<item>le numéro de version de la bibliothèque.
</list>

et il scrute les fichiers suivants dans cet ordre :
<enumlist compact="compact">
<item><p><tt>debian/shlibs.local</tt></p>
	      </item>
<item><p><tt>/etc/dpkg/shlibs.override</tt></p>
	      </item>
<item><p><tt>/var/lib/dpkg/info/*.shlibs</tt></p>
	      </item>
<item><p><tt>/etc/dpkg/shlibs.default</tt></p>
	      </item>
</enumlist>


<sect1><heading><em>Qui</em> s'occupe des différents fichiers
            <tt>shlibs</tt> ?
          </heading>

<p>
<list compact="compact">
<item>
<p><tt>/etc/dpkg/shlibs.default</tt> - le responsable de dpkg</p>
	      </item>
<item>
<p><tt>/var/lib/dpkg/info/<var>paquet</var>.shlibs</tt> - le
responsable de chaque paquet</p>
	      </item>
<item>
<p><tt>/etc/dpkg/shlibs.override</tt> - l'administrateur système local</p>
	      </item>
<item>
<p><tt>debian/shlibs.local</tt> - le responsable du paquet</p>
	      </item>
</list>

Le fichier <tt>shlibs.default</tt> est géré par <prgn>dpkg</prgn>. Les
entrées dans <tt>shlibs.default</tt> qui sont fournies par <prgn>dpkg</prgn>,
ne servent que provisoirement, le temps que les paquets de
bibliothèque partagée aient tous leurs fichiers <tt>shlibs</>.
	  </p>


<sect1><heading><em>Comment</em> utiliser <prgn>dpkg-shlibdeps</prgn> et les fichiers <tt>shlibs</tt> ? </heading>

<sect2><heading>Si le paquet ne fournit pas de bibliothèque partagée</heading>

<p>
Placer un appel à <prgn>dpkg-shlibs</prgn> dans le fichier
<tt>debian/rules</tt>. Si le paquet contient seulement des binaires
(aucun script) utiliser :
<example>
dpkg-shlibdeps debian/tmp/usr/bin/* debian/tmp/usr/sbin/*
</example>

Si <prgn>dpkg-shlibdeps</prgn> ne se plaint pas, c'est bon. Sinon, il faudra
peut-être créer son propre fichier <tt>debian/shlibs.local</tt>.
	    </p>
	  </sect2>

<sect2><heading>Si le paquet fournit une bibliothèque partagée</heading>

<p>
Créer un fichier <tt>debian/shlibs</tt> et laisser <tt>debian/rules</tt>
l'installer dans la zone de contrôle :
<example>
install -m644 debian/shlibs debian/tmp/DEBIAN
</example>

Si le paquet contient des binaires supplémentaires, voir ci-dessus.
	    </p>
	  </sect2>
	</sect1>

<sect1><heading><em>Comment</em> écrire le fichier
            <tt>debian/shlibs.local</tt> ?
          </heading>

<p>
Ce fichier sert seulement <em>temporairement</>, quand les binaires 
dépendent d'une bibliothèque qui ne fournit pas déjà son propre fichier
<tt>/var/lib/dpkg/*.shlibs</tt>.
	  </p>

<p>
Supposons qu'on crée un paquet binaire <tt>foo</>. Pendant la construction du 
paquet, la sortie peut ressembler à cela : 
<example>
$ ldd foo
libbar.so.1 => /usr/X11R6/lib/libbar.so.1.0 (0x4001e000)
libX11.so.6 => /usr/X11R6/lib/libX11.so.6 (0x4002c000)
libc.so.6 => /lib/libc.so.6 (0x40114000)
/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
</example>

Et quand on exécute <prgn>dpkg-shlibdeps</prgn> :
<example>
$ dpkg-shlibdeps -O foo
dpkg-shlibdeps: warning: unable to find dependency information
for shared library libbar
(soname 1, path /usr/X11R6/lib/libbar.so.1.0, dependency field Depends)
shlibs:Depends=libc6 (>= 2.2.1), xlibs (>= 4.0.1-11)
</example>

Le binaire <prgn>foo</prgn> dépend de la bibliothèque partagée 
<tt>libbar</tt>, mais aucun paquet ne semble fournir un fichier 
<tt>*.shlibs</tt> dans <tt>/var/lib/dpkg/info/</tt>. Déterminons le paquet 
responsable :
	  </p>
<p>
<example>
$ dpkg -S /usr/X11R6/lib/libbar.so.1.0
bar1: /usr/X11R6/lib/libbar.so.1.0
$ dpkg -s bar1 | grep Version
Version: 1.0-1
</example>
Ce qui nous indique que le paquet <tt>bar1</>, version 1.0-1, est celui
qu'on utilise. Maintenant nous pouvons créer notre propre
<tt>debian/shlibs.local</tt> pour corriger temporairement le problème 
évoqué. Incluons la ligne suivante dans le fichier
<tt>debian/shlibs.local</tt> :

<example>
libbar1 bar1 (>= 1.0-1)
</example>

Maintenant le paquet doit fonctionner. Dès que le responsable
de <tt>libbar1</tt> fournit un fichier <tt>shlibs</tt>, on peut enlever le
fichier <tt>debian/shlibs.local</tt>.
	</sect1>
      </sect>
    </chapt>



<chapt id="10"><heading>Le système d'exploitation</heading>
	
      
      <sect>
	<heading>La hiérarchie du système de fichiers</heading>
	  
	
	<sect1>
	  <heading>La structure du système de fichiers Linux</heading>
	    
	  <p>
L'emplacement de tous les répertoires et fichiers installés
doit être conforme au standard Linux sur la hiérarchie du système de fichier 
(FHS). On peut trouver la plus récente version de ce document avec ce manuel 
ou sur <url id="http://www.pathname.com/fhs/">.
Toute question relative à la manière de suivre ce standard
peut-être posée dans la liste de diffusion
<prgn>debian-devel</prgn> ou à Daniel Quinlan, le coordinateur
FHS à l'adresse <email>quinlan@pathname.com</email>.
</p>
</sect1>
	    
	<sect1>
	  <heading>Les programmes spécifiques à un site</heading>
	    
	  <p>
Conformément au «&nbsp;FHS&nbsp;», aucun paquet ne doit placer de fichiers
dans<tt>/usr/local</tt>, que ce soit en les mettant dans l'archive 
qui doit être dépaquetée par <prgn>dpkg</prgn> ou que ce
soit en les manipulant dans les scripts d'installation.
</p>
	  <p>
Cependant, un paquet peut créer des répertoires vides sous <tt>/usr/local</tt>
de manière que l'administrateur système ait un endroit où placer
des fichiers locaux. S'ils sont vides, ces répertoires
seront supprimés quand on supprime le paquet.
</p>
	    
	  <p>
On notera que cela ne s'applique qu'aux répertoires <em>sous</em>
<tt>/usr/local</tt> et non pas <em>dans</em> <tt>/usr/local</tt>. 
Le répertoire <tt>/usr/local</tt> ne doit
contenir lui-même que les répertoires listés dans le FHS,
section 4.5. Cependant vous pouvez créer autant de répertoires que vous voulez
sous ces répertoires. Vous ne devez pas supprimer
les répertoires listés à la section 4.5, même si vous les avez créés.
</p>
	  <p>
Comme <tt>/usr/local</tt> peut être monté en lecture seule depuis
un serveur distant, on doit créer ces répertoires avec
les scripts de post-installation, <tt>postinst</tt> et on doit les
supprimer avec les scripts de pré-désinstallation, <tt>prerm</tt>.
Ces scripts ne doivent pas échouer si l'une de ces opérations échoue.
(À l'avenir, il sera possible d'indiquer à <prgn>dpkg</prgn> de
ne pas extraire tel fichier correspondant à tels critères ;
ce qui permettra d'inclure ces répertoires dans le paquet
<tt>.deb</tt>. Les administrateurs système qui le désirent,
pourront alors empêcher l'installation de ces répertoires
dans <tt>/usr/local</tt>.)
</p>
	    
	  <p>
Par exemple, le paquet <prgn>emacs</prgn> contiendra
<example>
   mkdir -p /usr/local/lib/emacs/site-lisp || true
</example>
dans le script <tt>postinst</tt>, et
<example>
    rmdir /usr/local/lib/emacs/site-lisp || true
    rmdir /usr/local/lib/emacs || true

</example>
dans le script <tt>prerm</tt>.
</p>
	    
	  <p>
Si vous créez un répertoire dans <tt>/usr/local</tt> pour 
«&nbsp;localiser&nbsp;» un paquet, vous vous assurerez que le paramétrage 
dans <tt>/usr/local</tt> sera prioritaire par rapport à celui dans 
<tt>/usr</tt>.
</p>

	  <p>
Cependant, puisque «&nbsp;/usr/local&nbsp;» et son contenu sont réservés à 
l'administrateur local, un paquet ne doit pas compter sur la présence ou 
l'absence de fichiers ou répertoires dans «&nbsp;/usr/local&nbsp;»  
pour toute opération normale.
</p>
<p>Le répertoire <tt>/usr/local</tt> lui-même et tous les sous-répertoires
créés par un paquet, auront (par défaut) les droits 2775 (modifiable et 
exécutable par le groupe (bit «&nbsp;set-group-id&nbsp;» positionné)). Ils 
doivent appartenir à <tt>root.staff</tt>.
</p>
</sect1>
<sect1>
<heading>Le répertoire commun pour le courrier</heading>
<p>
Le répertoire commun pour le courrier est <tt>/var/mail</tt>. Ce répertoire
fait partie du système de base et il n'appartiendra à aucun opérateur de
courrier particulier. L'utilisation de l'ancien répertoire 
<tt>/var/spool/mail</tt> est déconseillée, même si le courrier se trouve
toujours physiquement là. Pour garder, lors d'une mise à jour, une 
compatibilité avec les systèmes qui utilisent <tt>/var/spool/mail</tt> comme
répertoire de courrier, les paquets qui se servent de <tt>/var/mail</tt>
doivent dépendre de <package>libc6</package> (&gt;= 2.1.3-13), ou bien de
<package>base-files</package> (&gt;= 2.2.0), et des versions plus récentes
de ces paquets.</p>
	</sect1>
</sect>
	
      <sect>
	<heading>Les utilisateurs et les groupes</heading>
	  
	<p>
Le système Debian est configuré pour utiliser soit les mots de passe
ordinaires soit les mots de passe masqués («&nbsp;shadow password&nbsp;»).
</p>
	  
	<p>
L'utilisation de quelques identifiants d'utilisateur (UIDs) et de groupe 
(GIDs) est réservée à certains paquets. Ces paquets ont besoin
d'inclure des fichiers appartenant à ces utilisateurs ou à ces groupes,
ou bien ont besoin de compiler des binaires avec ces identifiants ; c'est 
pourquoi, sur tout système Debian, ces identifiants ne pourront être utilisés 
que dans ce cadre prédéfini.
C'est une restriction importante, et on évitera d'interférer avec des 
politiques particulières d'administration système. De nombreux sites 
notamment attribuent des utilisateurs et/ou des groupes systèmes spécifiques 
à partir de 100.
</p>
	  
	<p>
En dehors de cet aspect, les identifiants seront attribués dynamiquement et
seront rangés selon un ordre raisonnable mais qui peut être redéfini.
</p>
	<p>
Seul le paquet <tt>base-passwd</tt> a le droit de modifier
	  <tt>/etc/passwd</tt>, <tt>/etc/shadow</tt>, ou
	  <tt>/etc/group</tt>.</p>
	  
	<p>
L'ordre des «&nbsp;UID&nbsp;» et des «&nbsp;GID&nbsp;» est le suivant :
	  <taglist>
	    <tag>0-99 :</tag>
	    <item>
	      <p>
Attribués en bloc par le projet Debian, ils doivent être identiques sur tout 
système Debian. Ces identifiants apparaîtront dans les fichiers 
<tt>passwd</tt> et <tt>group</tt> de tout système Debian, tout nouvel
identifiant dans cet intervalle étant automatiquement ajouté quand le paquet 
<tt>base-passwd</tt> est mis à jour.
 </p>
		
	      <p>
Un paquet qui a besoin d'un identifiant UID ou GID unique et attribué de
manière fixe utilisera cet intervalle ; le responsable demandera
son obtention au responsable de <tt>base-passwd</tt>.
 </p>
	    </item>
		
	    <tag>100-999 :</tag>
	    <item>
	      <p>
Utilisateurs et groupes-système attribués dynamiquement. Les paquets qui 
ont besoin d'un utilisateur ou d'un groupe et qui
tolèrent que cet identifiant soit attribué dynamiquement et différemment
sur chaque système, utiliseront <tt>adduser --system</tt>
pour la création d'un tel groupe et/ou utilisateur.
Le programme <prgn>adduser</prgn> vérifie qu'un tel groupe ou utilisateur
n'existe pas déjà et utilise si nécessaire un autre identifiant dans l'
intervalle spécifié par <tt>adduser.conf</tt>.
 </p>
</item>

	    <tag>1000-29999 :</tag>
	    <item>
	      <p>
Comptes utilisateurs attribués dynamiquement. Par défaut, <prgn>adduser</prgn> 
choisit  les «&nbsp;UIDs&nbsp;» et les «&nbsp;GIDs&nbsp;» pour les comptes 
utilisateurs dans cet intervalle, bien que <tt>adduser.conf</tt> puisse 
modifier ce comportement.
 </p>
</item>

	    <tag>30000-59999 :</tag>
	    <item>
	      <p>Usage réservé.</p></item>
		
		
	    <tag>60000-64999 :</tag>
	    <item>
	      <p>
Attribués en bloc par le projet Debian, mais ils ne sont créés
qu'à la demande. Les identifiants sont attribués de manière fixe et centralisée
mais les comptes ne sont effectivement créés sur le système qu'à la demande.
 </p>
		
	      <p>
Ces identifiants sont réservés à des paquets obscurs ou à des paquets qui 
demandent de nombreux identifiants attribués de manière fixe. Ces paquets 
doivent s'assurer de l'inexistence de ces comptes dans <tt>/etc/passwd</tt> 
ou dans <tt>/etc/group</tt> et les créer eux-mêmes si nécessaire (en utilisant
si possible <prgn>adduser</prgn>).
Les paquets qui risquent d'avoir besoin de davantage d'identifiants, 
se réserveront un intervalle d'attribution plus large que de besoin, laissant
ainsi des possibilités de développement.
</p></item>
		
		
	    <tag>65000-65533 :</tag>
	    <item>
	      <p>Usage réservé.</p></item>
		
		
	    <tag>65534 :</tag>
	    <item>
	      <p>Utilisateur «&nbsp;<tt>nobody</tt>&nbsp;».Le «&nbsp;gid>&nbsp;» correspondant renvoie au groupe «&nbsp;<tt>nogroup</tt>&nbsp;».</p></item>
		
		
	    <tag>65535 :</tag>
	    <item>
	      <p>
		<tt>(uid_t)(-1) == (gid_t)(-1)</tt>. NE DOIT PAS ÊTRE UTILISÉ,
car il s'agit de la valeur sentinelle pour retourner une erreur.
 </p>
	    </item>
	  </taglist>
	</p>
      </sect>
      <sect id="sysvinit">
	<heading>Les niveaux de fonctionnement du système</heading>
	  
	
	<sect1 id="/etc/init.d">
	  <heading>Introduction</heading>
	    
	  <p>
Le répertoire <tt>/etc/init.d</tt> contient les scripts exécutés
par <prgn>init</prgn> quand le système démarre et quand l'état
de <prgn>init</prgn> (son «&nbsp;niveau de fonctionnement&nbsp;») est modifié 
(voir <manref name="init" section="8">).
</p>

          <p>
Il y a au moins deux façons, différentes mais fonctionnellement équivalentes,
de se servir de ces scripts. Pour rester simple, on décrit ici la méthode des
liens symboliques. Les scripts du responsable ne doivent cependant pas 
présumer que cette méthode est utilisée, et toute manipulation automatisée 
sur le comportement des différents niveaux de fonctionnement doit être faite 
avec le programme <prgn>update-rc.d</prgn> comme décrit plus bas, et non pas 
en créant ou en supprimant soi-même les liens symboliques.
Voyez la documentation du paquet <tt>file-rc</tt> pour des renseignements sur 
la mise en oeuvre de l'autre méthode.
</p>

          <p>
Ces scripts sont référencés par des liens symboliques dans les
répertoires <tt>/etc/rc<var>n</var>.d</tt>. Lorsque le niveau
de fonctionnement change, <prgn>init</prgn> recherche les scripts qu'il doit 
exécuter dans le répertoire <tt>/etc/rc<var>n</var>.d</tt>, où <var>n</var> 
est soit le niveau de fonctionnement demandé soit «&nbsp;S&nbsp;» pour le démarrage. 
</p>
          <p>
Les noms de ces liens sont tous de la forme 
<tt>S<var>mm</var><var>script</var></tt> ou de la forme
<tt>K<var>mm</var><var>script</var></tt> ;
<var>mm</var> est un nombre à deux chiffres et <var>script</var>
est le nom du script (qui sera le même que le
véritable script dans <tt>/etc/init.d</tt>).
</p>
	    
          <p>
Lorsque <prgn>init</prgn> change de niveau de fonctionnement, il exécute
d'abord les scripts référencés par les liens dont le nom commence
par <tt>K</tt>, chacun avec un seul argument : <tt>stop</tt>. Puis
<prgn>init</prgn> exécute les scripts préfixés par <tt>S</tt>, avec pour 
chacun un seul argument : <tt>start</tt>.
Les liens <tt>K</tt> sont chargés d'arrêter les services et les
liens <tt>S</tt> de démarrer les services au démarrage du
niveau de fonctionnement.
</p>
	  <p>
Par exemple, pour passer du niveau 2 au niveau 3, <prgn>init</prgn>
exécutera d'abord tous les scripts préfixés par <tt>K</tt> qu'il trouve dans
<tt>/etc/rc3.d</tt>, puis tous les scripts préfixés par <tt>S</tt>.
Les liens qui commencent par <tt>K</tt> entraîneront l'exécution
des scripts qu'ils référencent avec l'argument <tt>stop</tt> alors que les
liens <tt>S</tt> entraîneront l'exécution des scripts avec
l'argument <tt>start</tt>.
</p>
	    
	  <p>
Le nombre à deux chiffres <var>mm</var> est utilisé pour
décider de l'ordre d'exécution des scripts de démarrage
et d'arrêt. Les scripts de numéros les plus faibles sont
exécutés en priorité. Par exemple les scripts <tt>K20</tt>
seront exécutés avant les scripts <tt>K30</tt>.
Cela sert quand un service doit être démarré avant
un autre. Par exemple, il peut être nécessaire de démarrer le serveur de 
noms <prgn>bind</prgn> avant le serveur de news
<prgn>inn</prgn> afin que <prgn>inn</prgn> puisse
positionner ses listes d'accès.
Dans ce cas, le script de démarrage de <prgn>bind</prgn> doit
avoir un numéro plus faible que le script qui démarre <prgn>inn</prgn>:
<example>
    /etc/rc2.d/S17bind
    /etc/rc2.d/S70inn
</example>
</p>

	</sect1>
	  
	<sect1>
	  <heading>L'écriture des scripts</heading>
	    
	  <p>
Les paquets qui mettent en service des «&nbsp;démons&nbsp;» mettront des 
scripts dans <tt>/etc/init.d</tt> pour démarrer ou arrêter des services au 
moment de l'amorçage ou pour un changement du niveau de fonctionnement.
Ces scripts seront nommés <tt>/etc/init.d/<var>package</var></tt> et ne 
doivent prendre qu'un seul argument, lequel indique ce qu'il faut faire :
	    
	    <taglist>
	      <tag><tt>start</tt></tag>
	      <item><p>démarrer le service,</p></item>
		  
	      <tag><tt>stop</tt></tag>
	      <item><p>arrêter le service,</p></item>
		  
	      <tag><tt>restart</tt></tag>
	      <item><p>arrêter et redémarrer le service,</p></item>
		  
	      <tag><tt>reload</tt></tag>
	      <item><p>chargement d'une nouvelle configuration 
du service sans réellement arrêter et redémarrer le service,
 </p>
</item>
		  
	      <tag><tt>force-reload</tt></tag> <item><p> 
chargement d'une nouvelle configuration si le service le permet,
sinon redémarrer le service.
 </p>
</item>
	    </taglist>
	    
	    Les options <tt>start</tt>, <tt>stop</tt>, <tt>restart</tt>, et
<tt>force-reload</tt> seront acceptées par tous les scripts
de <tt>/etc/init.d</tt> ; l'option <tt>reload</tt> est facultative.
</p>
	    
	  <p>
Les scripts de <tt>/etc/init.d</tt> auront un comportement raisonnable quand 
ils sont appelés avec l'option <tt>start</tt> alors que le service tourne 
déjà. Il en est de même pour l'option <tt>stop</tt> quand le service
ne tourne pas. Ils ne doivent pas tuer des processus utilisateurs
appelés par mégarde.
Le meilleur moyen est généralement d'utiliser <prgn>start-stop-daemon</prgn>.
</p>
<p>
Quand un service recharge automatiquement sa configuration (comme
c'est le cas de <prgn>cron</prgn> par exemple),
l'option <tt>reload</tt> du script dans <tt>/etc/init.d</tt> 
se comportera comme si la configuration avait été rechargée avec succès.
</p>	    
	    
	  <p>
Ces scripts ne doivent pas échouer de façon obscure quand ils trouvent dans
le système les fichiers de configuration d'un paquet supprimé ; en effet par
défaut, <prgn>dpkg</prgn> conserve ces fichiers de configuration et ne les 
supprime qu'avec l'option <tt>--purge</tt>. En particulier, le script 
«&nbsp;init&nbsp;» lui-même est un fichier de configuration (voir 
<ref id="init.d notes">) et reste sur le système quand le paquet est supprimé 
avec l'option «&nbsp;remove&nbsp;» et non pas avec l'option 
«&nbsp;purge&nbsp;». C'est pourquoi vous inclurez une instruction 
<tt>test</tt> au début du script, comme par exemple :
	    <example>
  test -f <var>program-executed-later-in-script</var> || exit 0
	    </example></p>
<p>
 Dans les scripts «&nbsp;<tt>init.d</tt>&nbsp;», il y a souvent des valeurs
que l'administrateur voudra changer fréquemment. Modifier ces scripts qui
sont souvent des <em>conffiles</em> demande que l'administrateur rajoute
ses modifications à chaque mise à jour du paquet et à chaque modification
des <em>conffiles</em>. Pour rendre la vie des administrateurs système moins
dure, on ne placera pas de telles valeurs configurables directement dans le
script mais plutôt dans un fichier <tt>/etc/default</tt> qui aura, de façon
classique, le même préfixe que le script «&nbsp;<tt>init.d</tt>&nbsp;». Ce 
fichier supplémentaire peut être lu quand le script démarre. Il doit contenir
seulement les définitions des variables et des commentaires.
	  </p>
<p>
Pour s'assurer que des valeurs vitales sont toujours définies et disponibles,
le script «&nbsp;<tt>init.d</tt>&nbsp;», indiquera, avant de lire le fichier 
<tt>/etc/default/</tt>, une valeur par défaut pour chaque variable du shell 
dont il se sert. Et, puisque <tt>/etc/default/</tt> est souvent un
<em>conffiles</em>, le script «&nbsp;<tt>init.d</tt>&nbsp;», doit se comporter
raisonnablement et sans échec quand ce fichier est détruit.
	  </p>
	</sect1>

	  
	<sect1>
	  <heading>La gestion des liens</heading>
	    
	  <p>
Le programme <prgn>update-rc.d</prgn> facilite la création et la suppression 
des liens symboliques dans <tt>/etc/rc<var>n</var>.d</tt>, ou de leurs
équivalents fonctionnels quand on utilise une autre méthode.
Les responsables de paquet peuvent s'en servir dans leurs scripts 
<tt>postinst</tt> et <tt>postrm</tt>.</p>

	  <p>
On doit utiliser ce programme pour faire des modifications dans le
répertoire <tt>/etc/rc<var>n</var>.d</tt> et ne <em>jamais</em> inclure
des liens symboliques  dans le <tt>/etc/rc<var>n</var>.d</tt>
du système réel, ni en créer ou en supprimer directement dans les scripts
du responsable de paquet. (Dans ce dernier cas, cela échouera si le système
d'information sur les niveaux de fonctionnement utilise une autre méthode.)
</p>
	  <p>
Par défaut, <prgn>update-rc.d</prgn> démarrera les serveurs
dans chacun des niveaux de fonctionnement du système (2, 3, 4 et 5) pour le
mode multi-utilisateurs et les arrêtera dans le niveau (0) mode halt,
le niveau (1) mode mono-utilisateur  et le niveau (6) mode reboot.
L'administrateur système pourra paramétrer les
niveaux de fonctionnement soit en ajoutant, supprimant ou déplaçant
les liens symboliques contenus dans <tt>/etc/rc<var>n</var>.d</tt> si la 
méthode des liens symboliques est utilisée, soit en modifiant 
<tt>/etc/runlevel.conf</tt> quand on utilise la méthode <tt>file-rc</tt>.</p>

	  <p>
Pour obtenir le comportement par défaut pour votre paquet,
mettez dans le script <tt>postinst</tt> :
	   
	    <example>
	      update-rc.d <var>package</var> defaults &gt;/dev/null
	    </example>
	    et dans votre <tt>postrm</tt>
	    <example>
	      if [ purge = "$1" ]; then
	      update-rc.d <var>package</var> remove &gt;/dev/null
	      fi
	    </example></p>
	    
	  <p>
Le numéro d'ordre d'exécution par défaut sera égal à 20. Si l'ordre ou
le moment d'exécution du script sont indifférents, utilisez
cette valeur par défaut. S'ils sont importants, vous devez en discuter avec le
responsable du paquet <prgn>sysvinit</prgn> ou envoyer
un message à <tt>debian-devel</tt>. Ceci devrait vous
aider à déterminer le numéro d'ordre d'exécution.
</p>
	    
	  <p>
Pour plus d'informations sur l'utilisation d'<tt>update-rc.d</tt>,
veuillez consulter sa page de manuel
<manref name="update-rc.d" section="8">.
</p>

</sect1>
	    
	    
	<sect1>
	  <heading>L'initialisation au moment de l'amorçage</heading>
	    
          <p>
Classiquement, un autre répertoire, <tt>/etc/rc.boot</tt>, contenait les
scripts exécutés seulement au démarrage. Mais on préfère maintenant
se servir de liens de <tt>/etc/rcS.d</tt> vers les fichiers dans
<tt>/etc/init.d</tt>, comme décrit dans <ref id="/etc/init.d">.
Aucun paquet ne doit placer de fichiers dans <tt>/etc/rc.boot</tt>.</p>
</sect1>

	<sect1 id="init.d notes">
	  <heading>Notes</heading>
	    
	  <p>
<em>N'incluez pas</em> les liens symboliques de
<tt>/etc/rc<var>n</var>.d/*</tt> dans l'archivage produisant un fichier 
<tt>.deb</tt> ! <em>C'est une source de problèmes !</em> Vous devez les créer 
avec <prgn>update-rc.d</prgn>, comme il est dit plus haut.</p>
	
	  <p>
<em>N'incluez pas</em> les liens symboliques de
<tt>/etc/rc<var>n</var>.d/*</tt> dans la liste de fichiers de configuration
de <prgn>dpkg</prgn> ! <em>C'est une source de problèmes !</em> Mais
vous considérerez les scripts de <tt>/etc/init.d</tt> comme des fichiers de
configuration, soit en les marquant comme fichiers de configuration soit
en les traitant correctement dans les scripts du responsable de paquet 
(voir <ref id="config files">).
(C'est important car nous voulons laisser à l'administrateur
système la possibilité d'adapter ces scripts à son système local
-- par exemple, désactiver un service sans désinstaller le paquet,
ou  bien spécifier des options particulières sur la ligne de commande au
démarrage d'un service -- tout en assurant que ses modifications ne seront
pas perdues lors de la prochaine mise à jour du paquet.)
</p>
</sect1>
	    
	<sect1>
	  <heading>Exemple</heading>
	    
	  <p>
Le paquet <prgn>bind</prgn>, un serveur de noms de domaine (DNS),
veut s'assurer que le serveur de noms s'exécute
à un niveau de fonctionnement multi-utilisateurs et qu'il est
correctement fermé à l'arrêt du système.
Il place un script dans <tt>/etc/init.d</tt> et le nomme
judicieusement <tt>bind</tt>.  Comme vous pouvez le constater,
le script interprète l'argument <tt>reload</tt> pour envoyer
le signal <tt>HUP</tt> au serveur de nom (ce qui provoque
le rechargement de sa configuration) ;
de cette manière, l'utilisateur peut utiliser la commande
<tt>/etc/init.d/bind reload</tt> pour recharger la configuration
du serveur de noms. Ce script possède une valeur configurable qu'on
peut utiliser pour passer des paramètres au programme <prgn>named</prgn>
lors du lancement.
</p>
	    
	  <p>
	    <example>
	      #!/bin/sh
	      #
	      # Original version by Robert Leslie
	      # &lt;rob@mars.org&gt;, edited by iwj and cs
	      
	      test -x /usr/sbin/named || exit 0

	      # Source defaults file.
              PARAMS=''
              if [ -f /etc/default/bind ]; then
                . /etc/default/bind
              fi

	      case "$1" in
	      start)
	      echo -n "Starting domain name service: named"
	      start-stop-daemon --start --quiet --exec /usr/sbin/named \
	                        -- $PARAMS
	      echo "."
	      ;;
	      stop)
	      echo -n "Stopping domain name service: named"
	      start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named
	      echo "."
	      ;;
	      restart)
	      echo -n "Restarting domain name service: named"
	      start-stop-daemon --stop --quiet  \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named
	      start-stop-daemon --start --verbose --exec /usr/sbin/named \
	                        -- $PARAMS
	      echo "."
	      ;;
	      force-reload|reload)
	      echo -n "Reloading configuration of domain name service: named"
	      start-stop-daemon --stop --signal 1 --quiet  \
	      --pidfile /var/run/named.pid --exec /usr/sbin/named
	      echo "."
	      ;;
	      *)
	      echo "Usage: /etc/init.d/bind {start|stop|restart|reload|force-reload}" >&2
	      exit 1
	      ;;
	      esac
	      
	      exit 0
	    </example>
</p>
	    
	  <p>
Le fichier <tt>/etc/default/bind</tt> est un complément pour
le script init ci-dessus ; il contient des paramètres configurables 
qu'utilise ce script.
	  </p>
<p>
           <example>
             # Specified parameters to pass to named. See named(8).
              # You may uncomment the following line, and edit to taste.
              #PARAMS="-u nobody"
           </example>
         </p>
<p>
Un autre exemple sur lequel baser
les scripts de <tt>/etc/init.d</tt> se trouve dans
<tt>/etc/init.d/skeleton</tt>.
</p>
	    
	  <p>
Si ce paquet se satisfait des valeurs par défaut
de <prgn>update-rc.d</prgn>, en l'occurrence un numéro
d'ordre d'exécution égal à 20 et l'exécution dans tous les niveaux
de fonctionnement, il peut indiquer dans son script
<tt>postinst</tt>:
	    <example>
	      update-rc.d bind defaults >/dev/null
	    </example>
et dans son script <tt>postrm</tt>, pour supprimer les liens
quand le paquet est <em>purgé</em> :
	    <example>
	      if [ purge = "$1" ]; then
	      update-rc.d bind remove >/dev/null
	      fi
	    </example></p>
	</sect1></sect>
	
      <sect>
	<heading>Les travaux de «&nbsp;Cron&nbsp;»</heading>
	  
	<p>
Les paquets ne doivent pas modifier le fichier de configuration
<tt>/etc/crontab</tt>, ni les fichiers contenus dans
<tt>/var/spool/cron/crontabs</tt>.
</p>
	  
	<p>
Quand un paquet veut confier une tâche au programme <prgn>cron</prgn>,
il doit placer un fichier de même nom que lui dans l'un des répertoires
suivants :
	  <example>
	    /etc/cron.daily
	    /etc/cron.weekly
	    /etc/cron.monthly
	  </example>
Comme l'indique le nom de ces répertoires,
les fichiers  sont exécutés une fois par jour, une fois par semaine ou 
une fois par mois.
Le rythme exact est contenu dans <tt>/etc/crontab</tt>.</p>
	<p>
Tous les fichiers installés dans l'un de ces répertoires
doivent être des scripts (scripts shell, perl, etc.)
pour que l'administrateur du système local puisse facilement les modifier.
De plus ils seront traités comme des fichiers de configuration.
</p>
<p>
Quand une tâche doit s'exécuter plus souvent
que quotidiennement, le paquet installera un fichier 
<tt>/etc/cron.d/<var>nom-du-paquet</var></tt>. Ce fichier a la même 
syntaxe que le fichier <tt>/etc/crontab</tt> et est traité automatiquement
par <prgn>cron</prgn>. Il doit aussi être considéré comme un fichier de 
configuration. (On remarquera que le programme <prgn>anacron</prgn> ne se sert
pas des scripts dans le répertoire <tt>/etc/cron.d</tt>. Vous ne 
l'utiliserez donc que pour des tâches qui peuvent être omises si le système
ne tourne pas.)
</p>
	<p>

Les scripts ou les entrées de la «&nbsp;crontab&nbsp;» dans ces répertoires 
doivent vérifier d'abord la présence de tous les fichiers nécessaires à
leur exécution. Sinon, il y aura des problèmes avec les paquets 
qui ont été supprimés sans l'option «&nbsp;purge&nbsp;»,
car, dans ce cas, les fichiers de configuration sont conservés.
</p>
</sect>

      <sect>
	<heading>Les messages de la console</heading>
	  
	<p>
Cette section décrit les formats des différents messages que les scripts du
répertoire <tt>/etc/init.d</tt> écrivent sur la sortie standard.
L'objectif est d'améliorer la cohérence du style Debian
en matière de séquences de démarrage et d'arrêt d'un système.
</p>
	<p>
Veuillez faire très attention aux détails. Nous voulons que les messages
fassent une utilisation identique des espaces, de la ponctuation et de
la casse des lettres.
</p>	  
	<p>
Voici une liste des règles générales à respecter pour la création
de messages en sortie. Elles peuvent être utiles si vous avez des messages non
standards qui ne sont pas abordés par les sections suivantes.
</p>
	<p>
	  <list>
	    <item>
	      <p>
 Tous les messages tiendront sur une ligne. Ils commenceront par une
 capitale et se termineront par un point «&nbsp;.&nbsp;».
 </p>
</item>		

		
<item>
	      <p>
Quand vous voulez signaler que l'ordinateur est occupé (exécution d'une
tâche particulière et non pas le démarrage ou la fermeture d'un programme),
utilisez une «&nbsp;ellipse&nbsp;», à savoir trois points «&nbsp;...&nbsp;». 
Vous remarquerez que nous n'insérons pas d'espace avant ou après les points. 
Quand la tâche est terminée nous écrivons «&nbsp;done.&nbsp;» et un retour à 
la ligne.
 </p>
</item>
		
	    <item>
	      <p>
Concevez vos messages comme si l'ordinateur vous disait ce qu'il fait
(rendez-le poli :-), mais n'en faites pas un personnage.
Par exemple, si vous voulez dire :
		<example>
		  I'm starting network daemons: nfsd mountd.
		</example>
		dites simplement :
		<example>
		  Starting network daemons: nfsd mountd.
		</example></p></item>
	  </list></p>
	  
	<p>
Les formats suivants seront utilisés :
</p>
	  
	<p>
	  <list>
	    <item>
	      <p>au lancement d'un démon.</p>
		
	      <p>
Utilisez ce format si votre script démarre un ou plusieurs démons.
Le message en sortie (une seule ligne, sans espaces en fin de ligne)
doit ressembler à ceci :
		<example>
		  Starting &lt;description&gt;: &lt;daemon-1&gt; &lt;daemon-2&gt; &lt;...&gt; &lt;daemon-n&gt;.
		</example>
	L'élément &lt;description&gt; décrira le sous-système dont fait partie le ou les démons alors que les éléments de &lt;daemon-1&gt; jusqu'à &lt;daemon-n&gt;
indiqueront chacun le nom du démon (typiquement le nom du fichier programme).
</p>			
	      <p>
Par exemple, la sortie de <prgn>/etc/init.d/lpd</prgn> ressemble à :
		<example>
		  Starting printer spooler: lpd.
		</example></p>
		
	      <p>
Ce qui peut être obtenu en écrivant dans le script :
		<example>
		  echo -n "Starting printer spooler: lpd"
		  start-stop-daemon --start --quiet lpd
		  echo "."
		</example>
Si vous avez plusieurs démons à démarrer, vous pouvez écrire le code
suivant :
		<example>
		  echo -n "Starting remote file system services:"
		  echo -n " nfsd"; start-stop-daemon --start --quiet nfsd
		  echo -n " mountd"; start-stop-daemon --start --quiet mountd
		  echo -n " ugidd"; start-stop-daemon --start --quiet ugidd
		  echo "."
		</example>
L'utilisateur peut savoir ainsi ce qui prend tant de temps et quand
le dernier démon a été démarré. Vous serez précis avec les espaces : dans 
l'exemple précédent un administrateur système
peut facilement commenter une ligne s'il ne veut pas lancer un démon
particulier; le message affiché reste correct.
 </p>
</item>
		
	    <item>
	      <p>quand quelque chose doit être configuré.</p>
		
	      <p>
Si vous devez positionner différents paramètres au démarrage du système,
vous utiliserez ce format :
		<example>
		  Setting &lt;parameter&gt; to `&lt;value&gt;'.
		</example></p>
		
	      <p>
vous pouvez utiliser le message suivant qui place correctement les
guillemets :
		<example>
		  echo "Setting DNS domainname to \`"value"'."
		</example></p>
		
	      <p>

Il faut noter que l'apostrophe à gauche (`) est différente de l'apostrophe à 
droite (').
		</p></item> 
	      
	    <item>
	      <p>quand on arrête un démon.</p>
		
	      <p>
Quand vous arrêtez un démon, vous devez afficher un message similaire
à celui du démarrage en remplaçant «&nbsp;Starting&nbsp;» par 
«&nbsp;Stopping&nbsp;».
 </p>
		
	      <p>
Le message à l'arrêt du démon printer sera :
		<example>
		  Stopping printer spooler: lpd.
		</example></p></item>
	      
	    <item>
	      <p>quand on exécute un programme.</p>
		
	      <p>
Il y a plusieurs cas où vous devez lancer un programme soit au démarrage
soit à l'arrêt du système pour exécuter des tâches spécifiques. Par
exemple, initialiser l'heure système à l'aide de «&nbsp;netdate&nbsp;» ou 
bien tuer tous les processus à l'arrêt du système. Vos messages suivront
cet exemple :
		<example>
		  Doing something very useful...done.
		</example>
Vous afficherez le «&nbsp;done.&nbsp;» immédiatement après la fin de la tâche
de manière que l'utilisateur soit renseigné sur le pourquoi de son attente.
Pour cela, mettez dans votre script :
		<example>
		  echo -n "Doing something very useful..."
		  do_something
		  echo "done."
		</example>
</p></item>
	      
	    <item>
	      <p>quand la configuration est rechargée.</p>
		
	      <p>
Quand un démon est forcé de recharger ses fichiers de configuration,
vous utiliserez des messages qui suivent le format suivant :
		<example>
		  Reloading &lt;daemon's-name&gt; configuration...done.
		</example></p></item>
	      
	    <item>
	      <p>quand aucune des règles précédentes ne s'applique.</p>
		
	      <p>
Si vous devez imprimer un message qui n'entre dans aucune des catégories
précédentes, vous pouvez l'écrire comme vous l'entendez, mais veuillez
prendre en compte les règles générales énoncées plus haut.
</p></item>
	  </list></p></sect>
	  
	  
      <sect>
	<heading>Les menus</heading>

	<p>
Sur <ftpsite>ftp.debian.org</ftpsite> ou sur un miroir local, on peut trouver
le fichier <ftppath>/debian/doc/package-developer/menu-policy.txt.gz</ftppath>
qui expose la politique actuelle concernant les rubriques d'un menu.
Il est aussi dans le paquet <tt>debian-policy</tt>.
	</p>

	<p>
Le paquet Debian <tt>menu</tt> propose une interface remarquable entre les
paquets qui fournissent des applications ou des documents et
<em>les programmes offrant des menus</em> (aussi bien des gestionnaires de
fenêtres sous X  que des programmes qui fournissent des menus en mode
texte, comme par exemple <prgn>pdmenu</prgn>).
</p>
	  
	<p>
Les paquets renseigneront une rubrique de menu pour toutes les 
applications qui, pour leur usage normal, n'ont pas besoin 
de recevoir d'argument particulier depuis la ligne de commande.
Ainsi les utilisateurs du paquet <em>menu</em> auront automatiquement des 
rubriques de menu pour ces applications dans leurs 
gestionnaires de fenêtres et dans des shells comme <tt>pdmenu</tt>.
</p>
	  
	<p>
Veuillez-vous référer au document <em>Debian Menu System</em>
livré avec le paquet <tt>menu</tt> pour plus d'information
sur la manière de déclarer vos applications et vos documents web.
</p>
</sect>
	
      <sect>
	<heading>Outils pour le multimédia </heading>
	
	<p>
Les paquets qui proposent des solutions pour lire, afficher,jouer, composer,
modifier ou imprimer les types «&nbsp;MIME&nbsp;» déclareront cette 
capacité, et se conformeront ainsi à l'actuelle politique concernant
«&nbsp;MIME&nbsp;», telle qu'elle est définie dans le fichier 
<ftppath>/debian/doc/package-developer/mime-policy.txt.gz</ftppath> ; fichier 
qu'on peut trouver sur <ftpsite>ftp.debian.org</ftpsite>
ou sur un miroir local. Ce fichier est aussi dans le paquet <tt>debian-policy</tt>.	</p>

	<p>
	  MIME (Multipurpose Internet Mail Extensions, RFC 1521) est une
manière de coder les fichiers et les flux de données et de donner des
informations supplémentaires, telles que, par exemple, leur type (c.-à-d. 
audio ou vidéo) et leur format (c.-à-d. PNG, HTML, MP3).

	</p>
	
	<p>
La déclaration de cette capacité à traiter les types «&nbsp;MIME&nbsp;» 
permet à des programmes comme les logiciels de courrier (mua) ou les butineurs
web de faire appel à ces outils pour lire, éditer ou afficher les types 
«&nbsp;MIME&nbsp;» qu'ils ne supportent pas directement.
	</p>
      </sect>

      <sect>
	<heading>La configuration du clavier</heading>
	  
	<p>
Pour obtenir une configuration cohérente du clavier (c.-à-d. que tous
les programmes interprètent les événements clavier de la même manière), 
tous les programmes de la distribution
Debian doivent suivre les directives suivantes :
</p>
	  
	<p>
Voici une liste de quelques touches avec leur interprétation :
	  
	  <taglist>
	    <tag><tt>&lt;--</tt></tag>
	    <item><p>supprime le caractère à gauche du curseur</p></item>
		
	    <tag><tt>Delete</tt></tag>
	    <item><p>supprime le caractère à droite du curseur</p></item>
		
	    <tag><tt>Control+H</tt></tag>
	    <item><p>emacs : le préfixe d'aide</p></item>
	  </taglist>
	  
L'interprétation des événements clavier sera indépendante du terminal utilisé 
(la console, X Window, une session rlogin ou telnet, etc.).
</p>
	  
	<p>
La liste suivante explique comment les différents programmes
seront configurés pour y arriver :
</p>
	  
	<p>
	  <list compact="compact">
	    <item><p>`<tt>&lt;--</tt>' génère KB_Backspace sous X.</p></item> 
		
	    <item><p>`<tt>Delete</tt>' génère KB_Backspace sous X.</p></item>
		
	    <item>
	      <p>
Le mécanisme «&nbsp;X translations&nbsp;» est configuré pour que KB_Backspace
déclenche ASCII DEL et que KB_Delete déclenche <tt>ESC [ 3 ~</tt> (c'est 
la séquence d'échappement du vt220 pour la touche  «&nbsp;delete character&nbsp;»).
Il faut charger les ressources sur tous les serveurs
locaux «&nbsp;X&nbsp;» à l'aide de <prgn>xrdb</prgn> et ne pas utiliser les «&nbsp;défauts&nbsp;» 
des applications pour que les ressources de
translation correspondent aux choix de <prgn>xmodmap</prgn>.
</p>
</item>
		
	    <item>
	      <p>
	La console Linux est configurée pour que la touche <tt>&lt;--</tt>
déclenche DEL et «&nbsp;Delete&nbsp;» déclenche <tt>ESC [ 3 ~</tt> 
(c'est actuellement le cas).
</p></item>
		
	    <item><p>
Les applications X sont configurées pour que «&nbsp;Backspace&nbsp;» efface 
à gauche et «&nbsp;Delete&nbsp;» efface à droite. Les applications Motif 
fonctionnent déjà de cette manière.
 </p>
</item>
		
	    <item><p>stty erase <tt>^?</tt> .</p></item>
		
	    <item><p>
L'entrée «&nbsp;xterm&nbsp;» dans terminfo doit avoir <tt>ESC [ 3~</tt> 
pour kdch1, tout comme TERM=linux et TERM=vt220.
 </p>
</item>	
		
	    <item><p>
Emacs est programmé pour associer «&nbsp;KB_ckspace&nbsp;» ou le caractère
«&nbsp;stty erase&nbsp;» à «&nbsp;delete-backward-char&nbsp;». Il associe 
«&nbsp;KB_Delete&nbsp;» ou «&nbsp;kdch1&nbsp;»
à «&nbsp;delete-forward-char&nbsp;» et associe <tt>^H</tt> à help comme toujours.
 </p>
</item>
		
	    <item><p>
D'autres applications utilisent le caractère «&nbsp;stty erase&nbsp;» et kdch1
comme deux touches d'effacement. ASCII DEL est la «&nbsp;suppression du
caractère précédent&nbsp;». kdch1 est la «&nbsp;suppression du caractère sous
le curseur&nbsp;».
 </p>
</item>
	  </list></p>
	  
	<p>
Tout ceci résout le problème sauf dans les cas suivants :
	</p>
	  
	<p>
	  <list compact="compact">
	    <item><p>
Certains terminaux ont une touche <tt>&lt;--</tt> qui ne peut pas
produire autre chose que <tt>^H</tt>. Sur ces terminaux l'aide
d'Emacs ne sera pas accessible à partir de <tt>^H</tt> (en supposant
que le caractère «&nbsp;stty erase&nbsp;» est prioritaire dans Emacs et qu'il 
ait été bien configuré). Les touches «&nbsp;M-x help&nbsp;» ou 
«&nbsp;F1&nbsp;» (si elles sont disponibles) peuvent être utilisées en 
remplacement.
 </p>
</item>
			
	    <item><p>
Certains systèmes utilisent <tt>^H</tt> pour «&nbsp;stty erase&nbsp;». 
Cependant les versions modernes de <prgn>telnet</prgn> et toutes les versions
de <prgn>rlogin</prgn> diffusent les configurations «&nbsp;stty&nbsp;». Presque
toutes les versions d'UNIX acceptent «&nbsp;stty erase&nbsp;». Quand la 
configuration «&nbsp;stty&nbsp;»
n'est pas reproduite correctement, on peut résoudre le problème
en utilisant «&nbsp;stty&nbsp;» manuellement.
</p></item>
		
	    <item><p>
Certains systèmes (notamment des versions antérieures de Debian) utilisent
<prgn>xmodmap</prgn> pour que <tt>&lt;--</tt> et «&nbsp;Delete&nbsp;» 
déclenchent «&nbsp;KB_Delete&nbsp;». Nous pouvons changer le comportement de 
leurs clients X à 
l'aide des mêmes ressources que nous avons utilisées ou bien 
configurer nos propres clients avec les ressources de ces systèmes dans le cas
inverse. Sur des serveurs configurés de cette manière, <tt>&lt;--</tt>
fonctionnera mais pas «&nbsp;Delete&nbsp;».
 </p>
</item>
		
	    <item><p>
Certains systèmes d'exploitation ont d'autres configurations pour 
«&nbsp;kdch1&nbsp;» dans leur terminfo pour xterm et consort. Sur ces 
systèmes, la touche «&nbsp;Delete&nbsp;» ne fonctionnera pas quand vous vous 
connecterez depuis un système qui suit notre politique. 
<tt>&lt;--</tt> fonctionnera.
 </p>
</item>
</list>
</p>
</sect>
	  
      <sect>
	<heading>Les variables d'environnement</heading>
	  
	<p>
Un programme ne doit pas dépendre des variables d'environnement
pour déterminer des valeurs par défaut
(cela impliquerait de définir ces variables globalement au niveau
du système par exemple dans <tt>/etc/profile</tt>, ce que tous les shells 
ne permettent pas).
</p>
	<p>
Quand un programme dépend de variables d'environnement
pour sa configuration, il doit prévoir, en leur absence, une configuration
raisonnable par défaut.
Si c'est difficile à faire (p.ex. quand le code source d'un programme non 
libre n'est pas disponible), le programme doit être remplacé par un petit 
shell script enveloppant («&nbsp;wrapper&nbsp;») qui positionne les variables 
d'environnement et appelle le programme initial.
</p>
	<p>
Voici un exemple de script enveloppant écrit dans ce but :
	  
	  <example>
	    #!/bin/sh
	    BAR=${BAR:-/var/lib/fubar}
	    export BAR
	    exec /usr/lib/foo/foo "$@"
	  </example></p>
	  
	<p>
De plus, comme <tt>/etc/profile</tt> est un fichier de configuration
du paquet <prgn>bash</prgn>, aucun autre paquet ne peut y ajouter
des variables d'environnement ou des commandes.
</p>
</sect>
</chapt>

    <chapt id="11">
	<heading>Les fichiers</heading>
	  
	
	<sect>
	  <heading>Les fichiers binaires</heading>
	    
	  <p>
Deux paquets ne doivent pas installer des programmes qui ont des
fonctions différentes tout en ayant le même nom.
(Le cas de deux programmes avec les mêmes fonctionnalités
mais des implémentations différentes est traité via 
«&nbsp;alternatives&nbsp;».)
Si ce cas se produit, un des deux programmes doit changer de nom.
Les responsables rapporteront ce problème sur la liste de distribution
<tt>debian-devel</tt> pour essayer de trouver un consensus. Si aucun 
consensus n'est trouvé, le nom des deux programmes doit être changé.
</p>
	    
	  <p>
Généralement on utilisera les paramètres de compilation suivants :
<example>
	      CC = gcc 
	      CFLAGS = -O2 -g -Wall # sane warning options vary between programs 
	      LDFLAGS = # none 
	      install -s # (or use strip on the files in debian/tmp)
	    </example></p>
	    
	  <p>
On remarquera que tous les binaires installés sont épurés de tout
symbole, soit en utilisant l'option <tt>-s</tt> de <prgn>install</prgn>,
soit en appliquant le programme <prgn>strip</prgn> sur les binaires
après qu'ils ont été copiés dans <tt>debian/tmp</tt> mais avant
qu'une arborescence ne soit faite pour le paquet.
</p>

	  <p>
L'option <tt>-N</tt> ne sera pas utilisée. Dans les
systèmes «&nbsp;a.out&nbsp;» cela pouvait être utile pour de tout
petits binaires, mais cela n'a pas d'intérêt dans les systèmes «&nbsp;ELF&nbsp;».
</p>
<p>
Les symboles de débogage sont utiles pour la détection des erreurs, la 
recherche dans un «&nbsp;core dump&nbsp;» (envoyé par un utilisateur pour un 
rapport de bogue), ou bien dans la phase de développement d'un logiciel. C'est
pourquoi on construira un paquet avec des instructions pour le débogage de la
manière suivante : si la variable d'environnement <em>DEB_BUILD_OPTIONS</em>
contient la chaîne <em>debug</em>, on compile le logiciel avec les 
informations de débogage (habituellement on ajoute le drapeau <em>-g</em> à
<em>CFLAGS</em>). Cela permet la construction d'une arborescence avec les
informations de débogage. Si la variable d'environnement 
<em>DEB_BUILD_OPTIONS</em> contient <em>nostrip</em>, on n'épure pas les
fichiers durant la phase d'installation. Cela permet de produire un paquet
avec des informations de débogage. Le bout de makefile suivant est une des 
façons de tester l'une et l'autre condition <footnote><p> Argument : compiler
par défaut avec l'option -g gaspille davantage de cycles CPU puisque les
informations sont de toute manière enlevées. Le paquet peut être compilé
sans l'option -g s'il fournit un mécanisme qui facilite sa recompilation
avec les informations de débogage. Il faut pour cela fournir une cible de
«&nbsp;make&nbsp;» appelée «&nbsp;build-debug&nbsp;», ou bien permettre à
l'utilisateur de spécifier «&nbsp;DEB_BUILD_OPTIONS=debug&nbsp;» pour
l'environnement de compilation du paquet. Et cela offre quelques
avantages supplémentaires :
<list>
                <item>
                  <p>
C'est réellement plus facile de construire des binaires ou des bibliothèques
avec des informations de débogage de cette manière (plus besoin de modifier
debian/rules et autres) car cela donne une façon documentée d'obtenir ce 
genre de compilation.
</p>
                </item>
<item>
                  <p>
Beaucoup moins de temps CPU sera gaspillé par les «&nbsp;autobuilders&nbsp;»
puisque ne pas avoir les informations de débogage (et donc ne pas avoir à
les enlever) accélérera la vitesse de compilation. Cela saute une passe
entière du compilateur.</p>
                </item></list>
</footnote>:

<example>
             CFLAGS = -O2 -Wall
             INSTALL = install
	      INSTALL_FILE    = $(INSTALL) -p    -o root -g root  -m  644
	      INSTALL_PROGRAM = $(INSTALL) -p    -o root -g root  -m  755
             INSTALL_SCRIPT  = $(INSTALL) -p    -o root -g root  -m  755
              INSTALL_DIR     = $(INSTALL) -p -d -o root -g root  -m  755


             ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
               CFLAGS += -g
             endif
             ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
             INSTALL_PROGRAM += -s
             endif
           </example>
	  
Veuillez remarquer que l'exemple ci-dessus est simplement instructif ; ce
n'est pas une règle de la charte. il se peut que vous ayez à modifier cet
exemple pour le faire fonctionner avec votre paquet.
	</p>

<p>
C'est au responsable du paquet de décider des meilleures options
de compilation. Certains binaires (comme ceux qui font des 
calculs intensifs) fonctionnent mieux avec certaines options 
(p.ex. <tt>-O3</tt>) ; faites comme vous voulez. Utilisez ces options avec 
discernement ; pour de bonnes raisons, pas seulement pour elles-mêmes.
Ne craignez pas de remplacer les options qu'avait choisies l'auteur du 
programme original : elles sont souvent inappropriées dans votre environnement.
</p>
</sect>
	    
	<sect>
	  <heading>Les bibliothèques</heading>
	    
	  <p>
Toutes les bibliothèques doivent avoir une version partagée dans le paquet 
«&nbsp;lib&nbsp;» et une version statique dans le paquet «&nbsp;lib-dev&nbsp;».
La version partagée doit être compilée avec les options <tt>-fPIC</tt>
mais pas la version statique. En d'autres termes, tous les fichiers
<tt>*.c</tt> doivent être compilés deux fois.
</p>
		    
	  <p>
Vous devez indiquer l'option <tt>-D_REENTRANT</tt> de <prgn>gcc</prgn>
quand vous compilez une bibliothèque (statique ou dynamique) pour qu'elle
soit compatible avec les «&nbsp;threads&nbsp;» Linux.
</p>
	    
	  <p>
On remarquera que toutes les bibliothèques partagées qu'on installe doivent 
être épurées de tout symbole par :
	    <example>
	      strip --strip-unneeded &lt;your-lib&gt;
	    </example> 
(L'option «&nbsp;--strip-unneeded&nbsp;» fait que <tt>strip</tt> enlève 
uniquement les symboles qui ne sont pas utiles au mécanisme de réallocation.)
Les bibliothèques partagées fonctionnent parfaitement bien quand elles
sont épurées, car les symboles de liens dynamiques
sont dans une autre partie du fichier objet «&nbsp;ELF&nbsp;».
</p>

	  <p>
Il faut noter que dans certaines circonstances, il peut être utile d'installer
une bibliothèque non épurée, p.ex. pour la construction d'un paquet d'aide au 
débogage.
</p>
	
	<p>
Un nombre toujours croissant de paquets utilisent «&nbsp;libtool&nbsp;» pour 
l'édition de liens. La plus récente version de «&nbsp;GNU libtools 
(>= 1.3a)&nbsp;» peut se servir avantageusement des meta-données contenues 
dans les fichiers («&nbsp;*.la&nbsp;») de «&nbsp;libtool&nbsp;». Le principal
avantage de ces fichiers est que «&nbsp;libtool&nbsp;» peut conserver ces 
meta-données et donc y accéder en fonction des bibliothèques qu'il construit. 
«&nbsp;Libtool&nbsp;» cherche ces fichiers et les renseignements
utiles qu'ils contiennent à propos des bibliothèques (p.ex. les bibliothèques 
nécessaires pour une édition de liens statiques). Ils sont aussi 
<em>indispensables</em> aux programmes utilisant «&nbsp;libltdl&nbsp;».
	</p>

	<p>
Sans doute, «&nbsp;libtool&nbsp;» peut faire de l'édition de liens avec des 
bibliothèques qui n'ont pas de fichier «&nbsp;.la&nbsp;» ; mais, n'étant qu'un 
simple script shell, il peut augmenter considérablement le temps de 
compilation d'un paquet s'il doit, pour chaque bibliothèque et chaque 
fois qu'elle est liée, déduire tous ces renseignements des premiers principes.
Avec l'apparition de «&nbsp;libtool-1.4&nbsp;» (et dans une moindre mesure de 
«&nbsp;libtool-1.3&nbsp;»), les fichiers «&nbsp;.la&nbsp;» garderont des 
renseignements sur les dépendances entre bibliothèques qui ne peuvent pas 
être nécessairement déduits une fois détruit le fichier «&nbsp;.la&nbsp;».
	</p>

	<p>
Les paquets qui se servent de «&nbsp;libtool&nbsp;» pour créer des 
bibliothèques partagées mettront les fichiers <em>.la</em> dans les 
paquets <em>-dev</em> ; dans le cas où un paquet compte sur la bibliothèque
<em>libltdl</em> de «&nbsp;libtool&nbsp;», les fichiers <em>.la</em> iront dans
le paquet de la bibliothèque. En général c'est une bonne idée, et 
particulièrement pour les questions d'édition de liens statiques.
	</p>
	
	<p>
Vous devez vous assurer que vous n'utilisez que les versions diffusées des 
bibliothèques partagées pour construire vos paquets ; dans le cas contraire, 
les autres utilisateurs ne pourront pas exécuter vos binaires correctement.
Produire des paquets sources qui dépendent de compilateurs
non autorisés est habituellement une mauvaise idée.
</p>
</sect>
	<sect>
	  <heading>Les bibliothèques partagées</heading>
	    
	  <p>
Un paquet qui contient des bibliothèques partagées sera séparé
en plusieurs paquets binaires.
</p>
	  <p>
Pour une bibliothèque classique constituée d'un environnement de développement
 et d'un kit fonctionnel comprenant simplement des bibliothèques partagées, 
vous devez créer deux paquets : 
<tt><var>nom-de-bibliothèque</var><var>so-nom</var></tt> et
<tt><var>nom-de-bibliothèque</var><var>so-nom</var>-dev</tt>
(où <var>so-nom</var> est le nom du fichier objet partagé de la
bibliothèque partagée -- c'est ce qui, entre le moment de la construction de
l'exécutable et celui de son fonctionnement, doit être exactement le même
pour que l'éditeur de liens dynamiques soit capable de faire
marcher le programme ; habituellement <var>so-nom</var> est le numéro majeur 
de la bibliothèque).
</p>
	  <p>
Si vous préférez ne gérer qu'une version de développement à la fois, vous 
pouvez nommer le paquet de développement 
<tt><var>nom-de-bibliothèque</var>-dev</tt> ; sinon, vous pouvez utiliser les 
mécanismes de gestion de conflit de <prgn>dpkg</prgn> pour vous assurer que 
l'utilisateur ne peut installer qu'une seule version de développement à la 
fois. (Après tout ! plusieurs versions de développement auront sans doute les 
mêmes fichiers d'en-tête, ce qui créera un conflit de nom.) En général, la 
version de développement aura une dépendance vers la bonne version de la 
bibliothèque fonctionnelle, afin que la compilation et l'édition de liens 
s'effectuent correctement.
</p>
	  <p>
Un paquet qui utilise une bibliothèque partagée aura une dépendance 
vers le nom du paquet de la bibliothèque partagée,
<tt><var>nom-de-bibliothèque</var><var>so-nom</var></tt>. 
Quand <var>so-nom</var> est modifié, les deux versions de la bibliothèque
peuvent cohabiter pendant le passage de l'ancienne à la nouvelle.
</p>
	  <p>
Si votre paquet contient des programmes d'aide au fonctionnement
qui utilisent la bibliothèque partagée, vous <em>ne devez
pas</em> les mettre dans le paquet de la bibliothèque
partagée. Si vous le faites, vous ne pourrez pas installer
plusieurs versions de la bibliothèque sans créer des conflits
de noms de fichiers. À la place, vous pouvez soit créer un
troisième paquet pour ces binaires fonctionnels (le paquet doit
typiquement s'appeler <tt><var>nom-de-bibliothèque</var>-runtime</tt>
-- notez l'absence de <var>so-nom</var> dans le nom du paquet), soit inclure 
ces binaires dans le paquet de développement si celui-ci est petit.
</p>
	  <p>
Si vous construisez plusieurs bibliothèques partagées à partir d'un même 
arbre de sources, vous pouvez les regrouper dans le même paquet de 
bibliothèques, sachant que vous devrez changer tous leurs <var>so-nom</var> 
simultanément (pour éviter des conflits de noms de fichiers lors de
l'installation de différentes versions de ce paquet).
</p>
	  <p>
Vous suivrez les recommandations du <em>manuel des paquets
Debian</em> (où d'autres documents Debian sur la manière de faire un paquet) 
pour faire le paquet d'une bibliothèque partagée ; 
vous devez inclure le fichier de contrôle <tt>shlibs</tt> avec le détail des 
dépendances pour les paquets qui utilisent la bibliothèque.
</p>
<p>
Les bibliothèques partagées ne doivent pas être
installées comme exécutables, puisque <prgn>ld.so</prgn> ne
le demande pas et que tenter d'exécuter une bibliothèque
partagée se traduit pas un «&nbsp;core dump&nbsp;».
</p>
</sect>
	    
	<sect id="scripts">
	  <heading>Les scripts</heading>
	    
	  <p>
Tous les scripts de commandes, y compris les scripts inclus dans un paquet 
par le responsable et utilisés par <prgn>dpkg</prgn>, commenceront 
par «&nbsp;<tt>#!</tt>&nbsp;» et le nom du shell interpréteur.
</p>
	    
	  <p>
	Pour les scripts Perl, c'est «&nbsp;<tt>#!/usr/bin/perl</tt>&nbsp;».</p>
	    
	  <p>
Les scripts shell (<prgn>sh</prgn> et <prgn>bash</prgn>) commenceront presque 
systématiquement par <tt>set -e</tt> pour que les erreurs soient 
détectées. Tous les scripts utiliseront <tt>set -e</tt> ou 
vérifieront l'état de sortie de <em>toutes</em> les commandes.
</p>
	    
	  <p>
L'interpréteur shell de base «&nbsp;<tt>/bin/sh</tt>&nbsp;» peut être
un lien symbolique vers n'importe quel shell compatible POSIX, si 
<tt>echo -n</tt> ne produit pas une nouvelle ligne <footnote><p>
La politique de Debian indique que /bin/sh suit la norme POSIX, mais
echo -n est largement utilisé dans la communauté Linux (tout particulièrement
la politique Debian, les sources du noyau Linux, beaucoup de scripts
Debian, etc.). Ce mécanisme est valable mais n'est pas demandé par POSIX,
d'où cet ajout explicite. D'autre part, la rumeur dit que ce mécanisme
doit devenir de toute façon obligatoire sous LSB.</footnote>. 
Les scripts shell indiquant «&nbsp;<tt>/bin/sh</tt>&nbsp;»
comme interpréteur n'utiliseront donc que des caractéristiques
POSIX. Si un script a besoin des caractéristiques non-POSIX
d'un interpréteur, celui-ci doit être spécifié dans la première
ligne du script (par exemple «&nbsp;<tt>#!/bin/bash</tt>&nbsp;»). Son paquet
doit dépendre du paquet qui fournit le shell (à moins que le
paquet ne soit marqué «&nbsp;Essential&nbsp;», comme par exemple pour
<prgn>bash</prgn>).
</p>
	  <p>
Quand c'est possible, on peut vouloir limiter les scripts aux 
caractéristiques POSIX de manière à utiliser l'interpréteur <tt>/bin/sh</tt>. 
Si votre script fonctionne avec <prgn>ash</prgn>, il est probablement 
conforme à POSIX, mais en cas de doute, utilisez <tt>/bin/bash</tt>.
</p>
	  <p>
Les scripts Perl détecteront les erreurs survenant lors de tous les 
appels système, comme <tt>open</tt>, <tt>print</tt>, <tt>close</tt>, 
<tt>rename</tt> et <tt>system</tt>.
</p>
<p>
Les shells <prgn>csh</prgn> et <prgn>tcsh</prgn> devraient
être évités comme langage de script. Référez-vous au
document <em>Csh Programming Considered Harmful</em> (NdT: Pourquoi
programmer en Csh est risqué), l'une des FAQs du groupe
usenet <tt>comp.unix.*</tt>.  Il peut être trouvé sur
<url id="http://language.perl.com/versus/csh.whynot">, ou
          <url id="http://www.cpan.org/doc/FMTEYEWTK/versus/csh.whynot">
          ou même sur <ftpsite>ftp.cpan.org</ftpsite> dans
          <ftppath>/pub/perl/CPAN/doc/FMTEYEWTK/versus/csh.whynot</ftppath>.
Si un paquet original utilise des scripts <prgn>csh</prgn>
vous devez vous assurer qu'ils commencent par
«&nbsp;<tt>#!/bin/csh</tt>&nbsp;» et vous devez rendre votre paquet
dépendant du paquet virtuel <prgn>c-shell</prgn>
</p>
	  <p>
Tout script qui crée des fichiers dans des répertoires où tout le monde peut 
écrire, (p.ex. dans <tt>/tmp</tt>) doit utiliser un mécanisme qui 
provoquera une erreur si un fichier de même nom existe déjà.
</p>
	    
	  <p>
À cet usage, la distribution Debian de base fournit
les utilitaires <prgn>tempfile</prgn> et <prgn>mktemp</prgn>.
</p></sect>
	    
	<sect>
	  <heading>Les liens symboliques</heading>
	    
	  <p>
En général, les liens symboliques à l'intérieur d'un répertoire de premier 
niveau seront relatifs alors que les liens symboliques qui pointent 
d'un répertoire de premier niveau vers un autre répertoire de premier niveau 
seront absolus. (Un répertoire de premier niveau est un sous-répertoire
du répertoire racine «&nbsp;/&nbsp;».)
</p>

	  <p>
De plus, les liens symboliques doivent utiliser un nom de chemin le plus 
court possible; on évitera par exemple le chemin «&nbsp;foo/../bar&nbsp;».
</p>
	  <p>
On remarquera que pour créer un lien relatif avec <prgn>ln</prgn>
il n'est pas nécessaire que le fichier cible soit relatif au répertoire où est 
exécuté <prgn>ln</prgn> ; de même il n'est pas nécessaire de se déplacer dans 
le répertoire où vous désirez créer le lien.
Donnez simplement à <prgn>ln</prgn> comme premier argument
la chaîne de caractères qui représentera la cible du lien (cette
chaîne doit être un chemin relatif au répertoire contenant le lien).
</p>
	  <p>
Par exemple, dans votre <prgn>Makefile</prgn> ou
dans <tt>debian/rules</tt>, écrivez :
	    <example>
	      ln -fs gcc $(prefix)/bin/cc 
	      ln -fs gcc debian/tmp/usr/bin/cc 
	      ln -fs ../sbin/sendmail $(prefix)/bin/runq 
	      ln -fs ../sbin/sendmail debian/tmp/usr/bin/runq
	    </example></p>
	    
	  <p>
Un lien symbolique vers un fichier comprimé aura toujours
le même suffixe que le fichier référencé.
(Par exemple, si le fichier «&nbsp;<tt>foo.gz</tt>&nbsp;» est
référencé par un lien symbolique, le nom du lien doit
aussi se terminer par «&nbsp;<tt>.gz</tt>&nbsp;», comme par exemple
«&nbsp;bar.gz&nbsp;».)
</p></sect>
	    
	<sect>
	  <heading>Les fichiers de périphérique</heading>
	    
	  <p>
Un paquet ne doit pas contenir de fichiers de périphérique
dans son arborescence.
</p>
	  <p>
Si un paquet a besoin d'un fichier de périphérique particulier
qui n'est pas inclus dans le système de base, il doit
appeler <prgn>MAKEDEV</prgn> dans le script <tt>postinst</tt>,
après en avoir demandé l'autorisation à l'utilisateur.
</p>
	  <p>
Un paquet ne doit pas supprimer de fichier de périphérique
dans le script <tt>postrm</tt> ou dans un autre script.
Ceci doit être laissé à l'initiative de l'administrateur système.
</p>
	  <p>
Debian utilise les périphériques série <tt>/dev/ttyS*</tt>. Les programmes qui 
utilisent les anciens périphériques <tt>/dev/cu*</tt> seront
modifiés pour utiliser <tt>/dev/ttyS*</tt>.
</p></sect>
	    
      <sect id="config files">
	  <heading>Les fichiers de configuration </heading>
	<sect1>
	  <heading>Définitions</heading>
	  <p>
	    <taglist>
	      <tag>fichier de configuration </tag>
	      <item><p>
C'est un fichier qui influe sur le fonctionnement d'un programme,
ou bien qui donne des renseignements particuliers à un site ou à un
hôte, autrement dit un fichier qui singularise le comportement d'un programme.
Classiquement, les fichiers de configuration sont faits pour être modifiés
par l'administrateur système (s'il en a besoin ou s'il le souhaite) de
manière à se conformer à la politique locale ou bien à obtenir un
fonctionnement plus utile au site.
</p>
              </item>


	      <tag><tt>conffile</tt></tag>
	      <item><p>
C'est un fichier répertorié dans le fichier <tt>conffiles</tt>
d'un paquet ; et <prgn>dpkg</prgn> en fait un usage particulier
(voir le <em>Debian Packaging Manual</em>).</p>
              </item>
            </taglist>
	  </p>

	  <p>
Cette distinction est importante ; ce ne sont pas des concepts
interchangeables. Presque tous les <tt>conffiles</tt> sont des fichiers de
configuration, mais beaucoup de fichiers de configuration ne sont pas des
<tt>conffiles</tt>.

	  <p>
Il faut noter que les scripts qui renferment des informations de configuration
(ainsi la plupart des fichiers de <tt>/etc/init.d</tt> et de
<tt>/etc/cron.{daily,weekly,monthly}</tt>) sont <em>de facto</em> des 
fichiers de configuration et seront traités comme tels.</p>
	</sect1>

	<sect1>
	  <heading>Emplacement</heading>
	  <p>
Tous les fichiers de configuration créés ou utilisés par votre paquet se 
trouveront dans <tt>/etc</tt>. S'il y en a plusieurs, vous envisagerez de 
créer un sous-répertoire de <tt>/etc</tt> portant le même nom que votre paquet.
</p>
	  <p>
Quand votre paquet se sert de fichiers de configuration qui ne sont pas dans
<tt>/etc</tt>, et qu'on ne peut pas le modifier pour qu'il utilise
<tt>/etc</tt>, vous placerez quand même les fichiers de configuration dans
<tt>/etc</tt> et vous créerez des liens symboliques vers l'endroit réclamé par
le paquet.
</p>
	</sect1>

	<sect1>
	  <heading>Fonctionnement</heading>
	  <p>
Le traitement des fichiers de configuration doit se faire selon les règles
suivantes :
	    <list>
	      <item>
		<p>les changements locaux doivent être préservés pendant
la mise à jour d'un paquet ;</p>
	      </item>
	      <item>
		<p>les  fichiers de configuration doivent être préservés
quand le paquet est supprimé ; ils ne sont détruits que si le paquet est
supprimé avec «&nbsp;purge&nbsp;».
</p>	      </item>
	    </list></p>

	  <p>
La façon simple d'obtenir cela, c'est que le fichier de configuration soit
un <tt>conffile</tt>. C'est parfait quand on peut distribuer une version par
défaut qui marche pour la plupart des installations, bien que quelques
administrateurs puissent vouloir la modifier. Cela suppose que la version par
défaut fasse partie du paquet et que les scripts du responsable du paquet
ne la modifient pas pendant l'installation (ou à quelque autre moment).
</p>
<p>
Pour faire que les changements locaux soient préservés correctement, nul
paquet ne peut contenir des liens «&nbsp;en dur&nbsp;», ou en créer, vers des 
«&nbsp;conffiles&nbsp;»<footnote><p>
Argument : Il y a deux problèmes avec les liens «&nbsp;en dur&nbsp;». Le premier, c'est
que certains «&nbsp;éditeurs&nbsp;» casse le lien quand ils modifient l'un des fichiers,
et les deux fichiers peuvent devenir involontairement différents. Le second,
c'est qu'il arrive que <prgn>dpkg</prgn> casse le lien pendant une mise à
jour de <tt>conffile</tt>s.</p>
          </footnote>.
	  <p>
L'autre façon, c'est d'utiliser les scripts du responsable de paquet.
Dans ce cas, le fichier de configuration ne doit pas être un <tt>conffile</tt>
et ne doit pas faire partie du paquet. Si la configuration correcte d'un paquet
demande un fichier, c'est au responsable du paquet,
via ses scripts, de créer, mettre à jour, maintenir et supprimer un tel
fichier. Ces scripts doivent être idempotents (c.-à-d. ils doivent fonctionner
correctement si <prgn>dpkg</prgn> a besoin de les relancer à cause d'erreurs
survenues pendant l'installation ou la suppression) ; ils doivent 
comprendre toutes les manières de <prgn>dpkg</prgn> en ce qui 
concerne l'appel des scripts ; ils ne doivent pas remplacer, autrement dit
massacrer, la configuration de l'utilisateur sans lui demander ; ils ne 
doivent pas poser des questions sans intérêt (surtout pendant les mises à
jour) ; bref, ils doivent être de bons citoyens.
</p>
	  <p>
Ces scripts n'ont pas à configurer toutes les options possibles d'un paquet,
mais seulement celles qui sont nécessaires à son bon fonctionnement sur un
système donné. Idéalement, un sysadmin ne devrait faire aucune autre
configuration que celle faite presque automatiquement par le script
<tt>postinst</tt>.</p>
	  <p>
Une manière commune de faire est de créer un script 
<tt><var>package</var>-configure</tt> qu'appellera le script <tt>postinst</tt>
du paquet si et seulement si le fichier de configuration n'existe pas déjà.
Parfois, il est bon d'avoir un fichier d'exemple ou un fichier modèle 
utilisable par les scripts du responsable. On mettra ces fichiers
dans <tt>/usr/share/&lt;package&gt;</tt> avec un lien symbolique 
pour <tt>/usr/share/doc/&lt;package&gt;/examples</tt> si ce sont des fichiers
d'exemples ; ces fichiers sont des fichiers parfaitement ordinaires pour
<prgn>dpkg</prgn> (ce <em>ne sont pas </em> des <tt>conffiles</tt>).</p>

	  <p>
On ne doit pas mélanger ces deux manières de gérer les fichiers de
configuration car alors la folie guette : <prgn>dpkg</prgn> voudra
remplacer le fichier à chaque mise à jour du paquet.
</p>
	</sect1>

	<sect1>
	  <heading>Le partage des fichiers de configuration </heading>
	  <p>
On doit indiquer un <em>conflit</em> entre des paquets qui ont le même 
fichier <tt>conffile</tt>.
</p>

	  <p>
Les scripts d'un responsable de paquet ne doivent modifier le 
<tt>conffile</tt> d'<em>aucun</em> paquet, même celui du paquet auquel ils
appartiennent.</p>

	  <p>
Quand deux paquets ou plus ont le même fichier de configuration et qu'il est
raisonnable d'installer les deux paquets, on doit définir l'un des
paquets comme le <em>propriétaire</em> du fichier de configuration, et
ce sera le paquet qui distribue ce fichier et le répertorie comme un 
<tt>conffile</tt>. Les autres paquets qui utilisent le fichier de
configuration doivent déclarer une dépendance envers ce paquet s'ils ont
besoin de ce fichier de configuration pour leur fonctionnement. Quand
ils ne l'utilisent que s'il est présent et qu'ils sont capables de
fonctionner sans lui, ces paquets n'ont pas besoin de déclarer de
dépendance.</p>

	  <p>
Si l'on veut que deux ou plusieurs paquets apparentés partagent un fichier de
configuration <em>et</em> que chacun d'eux soit capable de le modifier, il
faut faire ce qui suit :

	    <enumlist>
	      <item>
		<p>
l'un des paquets apparentés (le «&nbsp;coeur&nbsp;») doit gérer le fichier de
configuration avec les scripts du responsable de paquet comme c'est décrit
dans les sections précédentes :</p>
	      </item>
	      <item><p>
le «&nbsp;coeur&nbsp;» fournira aussi un programme que les autres paquets 
utiliseront pour modifier le fichier de configuration ;</p>
	      </item>
	      <item>
		<p>
les paquets apparentés doivent se servir de ce programme pour faire
des modifications sur le fichier de configuration. Ils dépendront alors
de la garantie donnée quant à la disponibilité de ce programme, 
ou bien ils accepteront avec élégance de ne pouvoir modifier 
le fichier de configuration si ce programme n'est pas disponible.</p>
	      </item>
	    </enumlist></p>

	  <p>
Quelques fois, il convient de créer un nouveau paquet qui fournit
l'infrastructure de base pour les autres paquets et qui gère les fichiers
de configuration partagés (on peut consulter le paquet <tt>sgml-base</tt>
comme exemple).</p>
	</sect1>

	<sect1>
	  <heading>Les fichiers de configuration de l'utilisateur («&nbsp;dotfiles&nbsp;»)</heading>

	  <p>
Les fichiers dans <tt>/etc/skel</tt> sont copiés automatiquement dans les 
comptes des nouveaux utilisateurs par <prgn>adduser</prgn>. Aucun programme
ne renverra à la présence de ces fichiers dans ces comptes.
</p>

	  <p>
Ainsi, quand un programme, pour fonctionner correctement, a besoin
qu'un fichier «&nbsp;.fichier&nbsp;» existe par avance dans <tt>$HOME</tt>, 
le paquet installera ce fichier dans <tt>/etc/skel</tt> (et le 
déclarera dans le fichier «&nbsp;conffiles&nbsp;» s'il n'est pas créé et 
modifié automatiquement par les scripts d'installation).
</p>

	  <p>
Cependant, avoir un programme qui, pour fonctionner correctement, a besoin 
de fichiers «&nbsp;.fichier&nbsp;» (des fichiers qu'il ne crée pas lui même, 
j'entends), est une mauvaise idée. Et l'installation par défaut de Debian
devrait configurer les programmes d'une manière aussi raisonnable que possible.
</p>
	  <p>
Ainsi, le programme d'un paquet Debian, qui a besoin d'une quelconque
configuration pour fonctionner correctement, sera configuré globalement pour 
le système à l'aide d'un fichier placé dans <tt>/etc</tt>. C'est uniquement 
dans le cas où le programme n'accepte pas de configuration globale au site, 
et si le responsable du paquet n'a pas le temps d'ajouter un fichier de 
configuration par défaut qu'un tel fichier pourra être placé dans 
<tt>/etc/skel</tt>.
</p>
	  <p>
<tt>/etc/skel</tt> sera aussi vide que possible. C'est d'autant plus 
nécessaire qu'il n'existe pas de mécanisme simple pour s'assurer que les 
fichiers «&nbsp;.fichier&nbsp;» nécessaires sont copiés dans les comptes des 
utilisateurs existants à l'installation du paquet.
</p>

	</sect1>
      </sect>
      
      <sect>
	<heading>Les fichiers d'écoute («&nbsp;log file&nbsp;»)</heading>
	<p>
L'approche traditionnelle pour les fichiers d'écoute était d'utiliser 
«&nbsp;cron&nbsp;» et de simples shell scripts pour monter des combines 
<em>ad hoc</em> pour la rotation des fichiers d'écoute. Cette 
approche, grandement paramétrable, demandait beaucoup de travail au 
«&nbsp;sysadmin&nbsp;». Bien que le premier système Debian ait apporté une 
aide en installant automatiquement un système qui pouvait être pris 
comme modèle, cela ne fut pas considéré comme suffisant.</p>  

	<p>
Une meilleure idée est d'utiliser «&nbsp;logrotate&nbsp;», un programme 
«&nbsp;GPL&nbsp;», développé par Red Hat, qui centralise la gestion de 
l'écoute. Il possède à la fois un fichier de configuration 
(<tt>/etc/logrotate.conf</tt>) et un répertoire où les paquets peuvent 
déposer les résultats de leur écoute, (<tt>/etc/logrotate.d</tt>).
        </p>
	<p>
Les fichiers d'écoute se nomment habituellement
<tt>/var/log/<var>package</var>.log</tt>. Si vous avez de nombreux fichiers 
d'écoute ou si vous avez besoin d'un répertoire pour des raisons de droits 
(<tt>/var/log</tt> ne peut être modifié que par <tt>root</tt>), vous créerez 
habituellement un répertoire nommé <tt>/var/log/<var>package</var></tt>.
</p>
	<p>
Une rotation des fichiers d'écoute doit être assurée de manière qu'ils
ne grandissent pas indéfiniment ;
la meilleure façon de procéder est de mettre un script dans le répertoire
<tt>/etc/logrotate.d</tt> et d'utiliser les facilités apportées par
«&nbsp;logrotate&nbsp;».
Voici un bon exemple de fichier de configuration de «&nbsp;logrotate&nbsp;» 
(pour plus de renseignements voir <manref name="logrotate " section="8">) :
	  <example>
        /var/log/foo/* {
                rotate 12
                weekly
                compress
                postrotate
                        /etc/init.d/foo force-reload
                endscript
        }
	  </example> 	  
	  qui fait tourner tous les fichiers sous «&nbsp;/var/log/foo&nbsp;», sauve 12
	  compressions, et envoie un signal HUP à la fin de la rotation.

	</p>
	
	<p>
Les fichiers d'écoute seront supprimés quand le paquet est 
«&nbsp;purgé&nbsp;» (mais pas quand le paquet est simplement supprimé) en 
testant le paramètre du script <tt>postrm</tt> 
(voir le <em>Debian Packaging Manual</em> pour plus de détails).</p>
      </sect>
     	    
	    
	<sect>
	  <heading>Permissions et propriétaires</heading>
	    
	  <p>
Les règles de cette section sont des directives pour une utilisation commune.
Quand c'est nécessaire, vous pouvez vous écarter de certains détails ci-après.
Cependant, dans ce cas, sécurisez ce que vous
faites et restez aussi cohérent que possible avec le système. Vous devriez
probablement en discuter aussi dans <prgn>debian-devel</prgn>.
</p>
	  <p>
Les fichiers appartiendront à <tt>root.root</tt>. Ils seront
modifiables uniquement par le propriétaire et seront lisibles 
par tous (exécutables si nécessaire).
</p>
	  <p>
Les répertoires auront le mode 755 ou, pour ceux qui doivent être 
modifiables par un groupe, le mode 2775. La propriété du répertoire sera 
cohérente avec le mode -- si le répertoire a comme mode 2775, il 
appartiendra au groupe qui a besoin d'y accéder.</p>
	    
	  <p>
Les exécutables qui sont «&nbsp;setuid&nbsp;» et «&nbsp;setgid&nbsp;» auront 
respectivement les modes 4755 et 2755, et ils appartiendront à l'utilisateur 
ou au groupe approprié. On n'interdira pas leur lecture (par des modes 
comme 4711 ou 2711 ou même 4111) ; en effet cela n'apporte aucun gain de 
sécurité puisque n'importe qui peut obtenir les binaires dans les paquets 
Debian qui sont librement disponibles -- c'est simplement gênant. Pour la même 
raison vous ne restreindrez pas les droits en lecture ou en exécution 
des exécutables «&nbsp;non-set-id&nbsp;».
</p>
	  <p> 
Certains programmes «&nbsp;setuid&nbsp;» doivent être restreints à certains 
groupes d'utilisateurs en se servant des permissions sur les fichiers. Dans 
ce cas, ils appartiendront à «&nbsp;l'uid&nbsp;» pour lesquels ils sont 
«&nbsp;set-id&nbsp;» et au groupe qui aura des droits d'exécution. Ils auront
le mode 4754 ; cela ne sert à rien de les rendre
illisibles aux utilisateurs qui n'ont pas les droits d'exécution.
</p>
	  <p>
Vous devez évitez que, pour suivre sa politique locale de sécurité, un 
administrateur système ne puisse reconfigurer un paquet qu'en changeant
les permissions des fichiers binaires. Les fichiers ordinaires installés par 
<prgn>dpkg</prgn> (à l'exception des conffiles et d'autres fichiers 
similaires) auront leurs droits réinitialisés avec les droits de la 
distribution lors de la réinstallation d'un paquet. Vous penserez plutôt 
à créer un groupe d'utilisateurs autorisés à utiliser les
programmes et à rendre les exécutables «&nbsp;setuid&nbsp;» exécutables
uniquement par ce groupe.
</p>
	  <p>
Si vous avez besoin d'un nouvel utilisateur ou groupe pour votre paquet, vous 
avez deux possibilités. La première est de rendre cet utilisateur ou ce 
groupe propriétaire d'un ou plusieurs fichiers de votre paquet. La deuxième
est de compiler l'identifiant (plutôt que le nom) d'utilisateur ou de groupe 
dans le binaire. Dans ce cas vous avez besoin d'un identifiant attribué de 
façon fixe.
</p>
	  <p>
Si vous avez besoin d'un identifiant attribué de façon fixe, vous devez alors 
demander un identifiant d'utilisateur ou de groupe au 
responsable du système de base. Vous ne devez pas livrer votre paquet avant 
d'avoir reçu un tel identifiant. Quand vous l'avez reçu, vous devez faire 
dépendre votre paquet d'une version du système de base dans laquelle 
l'identifiant est présent dans <tt>/etc/passwd</tt> ou dans 
<tt>/etc/group</tt>. Alternativement, vous pouvez modifier votre paquet pour 
qu'il crée lui-même l'utilisateur ou le groupe avec le bon identifiant 
(en utilisant <tt>adduser</tt>) dans les scripts de pré ou post-installation 
(ces derniers seront choisis quand c'est possible).
</p>
	    
	  <p>
D'un autre coté, un programme peut être capable, en fonctionnement, de 
déterminer l'«&nbsp;uid&nbsp;» ou le «&nbsp;gid&nbsp;» à partir du nom d'un 
groupe de façon à utiliser un identifiant attribué de façon dynamique. Dans 
ce cas vous choisirez un nom d'utilisateur ou de groupe approprié, vous en 
discuterez dans <prgn>debian-devel</prgn>, vous vérifierez avec le responsable
du système de base que ce nom est unique et vous vous assurerez qu'ils 
(la liste <prgn>debian-devel</prgn>) ne préfèrent pas un identifiant attribué 
de manière fixe. Quand tout cela a été vérifié, vous devez modifier votre 
paquet pour qu'il crée, si nécessaire, l'utilisateur ou le groupe avec 
<prgn>adduser</prgn> dans les scripts de pré ou post-installation (à nouveau, 
ces derniers sont préférables si c'est possible).
</p>	   
	  <p>
Il faut noter que changer la valeur numérique d'un identifiant associé
à un nom est une opération très difficile. Elle implique de rechercher
dans le système de fichier tous les fichiers concernés. Réfléchissez
sérieusement au meilleur choix entre «&nbsp;id&nbsp;» statique ou dynamique,
car modifier votre choix ultérieurement posera des problèmes.
</p>
	</sect>
    </chapt>

    <chapt id="12">
       <heading>Programmes personnalisés</heading>
	
      <sect id="arch-spec">
	<heading>Les chaînes de spécification d'architecture</heading>
	  
	<p>
Quand un programme doit fournir une <em>chaîne de spécification
d'architecture</em>, le format suivant sera utilisé :
	  <example>
	    &lt;arch&gt;-&lt;os&gt;
	  </example>
où «&nbsp;&lt;arch&gt;&nbsp;» est l'une des valeurs suivantes : i386, alpha, 
arm, m68k, powerpc, sparc et où «&nbsp;&lt;os&gt;&nbsp;» est linux ou gnu.
L'emploi de <em>gnu</em> dans cette chaîne est
réservé pour le système d'exploitation «&nbsp;GNU-Hurd&nbsp;».
</p>
	<p>
On remarquera que nous n'utilisons pas «&nbsp;&lt;arch&gt;-debian-linux&nbsp;»
dans la chaîne «&nbsp;architecture-vendor-os&nbsp;» car cela rendrait nos 
programmes incompatibles avec les autres distributions Linux. Notez aussi que
nous n'utilisons pas «&nbsp;&lt;arch&gt;-unknown-linux&nbsp;», car 
«&nbsp;unknown&nbsp;» ne sonne pas très bien.
</p></sect>
	  
	  
      <sect>
	<heading>Les «&nbsp;démons&nbsp;»</heading>
	  
	<p>
Les fichiers de configuration <tt>/etc/services</tt>,
<tt>/etc/protocols</tt> et <tt>/etc/rpc</tt> sont gérés par le paquet
<prgn>netbase</prgn> et ne doivent pas être modifiés par d'autres paquets.
</p>
	  
	<p>
Quand un paquet a besoin d'une nouvelle entrée dans l'un de ces fichiers,
son responsable contactera le responsable du paquet <prgn>netbase</prgn>,
qui ajoutera cette entrée et produira une nouvelle version du paquet
<prgn>netbase</prgn>.
</p>
	  
	<p>
Le fichier de configuration <tt>/etc/inetd.conf</tt> ne doit pas être modifié 
par les scripts d'un paquet sauf si c'est via le script 
<prgn>update-inetd</prgn> ou le module Perl <prgn>DebianNet.pm</prgn>.
</p>
	<p>
Quand un paquet veut ajouter un exemple d'entrée dans
<tt>/etc/inetd.conf</tt>, cette entrée doit être précédée par un seul
caractère «&nbsp;#&nbsp;». De telles lignes sont traitées comme des
commentaires de l'utilisateur  par le script <prgn>update-inetd</prgn> et
ne seront pas modifiées ou activées lors des mises à jour des paquets.
</p>
</sect>
	  
      <sect>
<heading>L'utilisation des pseudo-ttys et la modification de «&nbsp;wtmp&nbsp;», 
«&nbsp;utmp&nbsp;» et «&nbsp;lastlog&nbsp;»</heading>
	  
	<p>
Certains programmes ont besoin de créer des pseudo-ttys.
On doit le faire avec les «&nbsp;Unix98&nbsp;» ptys si la bibliothèque 
«&nbsp;C&nbsp;» le permet. Le programme résultant ne doit pas être installé 
«&nbsp;setuid root&nbsp;», à moins que d'autres fonctions ne le demandent.</p>
	
	<p>
Les fichiers <tt>/var/run/utmp</tt>, <tt>/var/log/wtmp</tt> et
<tt>/var/log/lastlog</tt> doivent être modifiables par le groupe utmp. Les 
programmes qui ont besoin de modifier ces fichiers 
doivent appartenir au groupe utmp.
	</p>
      </sect>

      <sect>
	<heading>Les éditeurs de texte et les pagineurs</heading>
	  
	<p>
Certains programmes appellent un éditeur ou un pagineur pour modifier
ou afficher un document texte. Comme de nombreux éditeurs et pagineurs sont
disponibles dans la distribution Debian, l'administrateur système et les
utilisateurs pourront choisir leur éditeur ou leur pagineur préféré.
</p>
	<p>
De plus, chaque programme choisira un éditeur et/ou un pagineur 
par défaut si l'utilisateur ou l'administrateur système n'en a pas choisi un.
</p>
	  
	<p>
Ainsi chaque programme qui appelle un éditeur ou un pagineur doit
utiliser les variables d'environnement EDITOR ou PAGER pour déterminer
l'éditeur et/ou le pagineur que l'utilisateur souhaite employer. Si ces
variables ne sont pas définies, les programmes <tt>/usr/bin/editor</tt>
et <tt>/usr/bin/pager</tt> seront, respectivement, utilisés.
</p>
	<p>
Ces deux fichiers sont gérés par «&nbsp;alternatives&nbsp;». Tout paquet,
fournissant un éditeur ou un pagineur, doit employer le script
«&nbsp;update-alternatives&nbsp;» pour déclarer ces programmes.
</p>
	  
	<p>
Lorsqu'il est très difficile d'adapter un programme pour qu'il utilise
les variables EDITOR et PAGER, ce programme peut être configuré
pour utiliser respectivement <tt>/usr/bin/sensible-editor</tt> et
<tt>/usr/bin/sensible-pager</tt> comme éditeur ou pagineur. Ce sont
deux scripts fournis par le système Debian de base qui testent les
variables EDITOR ou PAGER et lancent les programmes appropriés ou bien
exécutent par défaut <tt>/usr/bin/editor</tt> ou <tt>/usr/bin/pager</tt>
automatiquement.
</p>
	<p>
Un programme peut aussi se servir de la variable d'environnement VISUAL
pour connaître l'éditeur choisi par l'utilisateur. Si elle existe, elle
prend le pas sur la variable EDITOR. Et c'est ce que fait
<tt>/usr/bin/sensible-editor</tt>.</p>


	<p>
Un paquet n'a pas besoin de dépendre d'un éditeur
ou d'un pagineur, et il n'y a pas besoin de paquets virtuels pour cela
<footnote>
<p>
Le système Debian de base fournit déjà un éditeur et
un pagineur</p>
	  </footnote>.
</p>

      <sect id="web-appl">
	<heading>Serveurs et applications Web</heading>
	  
	<p>
Cette section décrit les emplacements et les «&nbsp;URL&nbsp;» qui seront
employés par tous les serveurs et applications Web dans le système Debian.
</p>
	  
	<p>
	  <enumlist>
	    <item>
<p>Les fichiers exécutables cgi-bin sont installés dans le répertoire
		<example>
		  /usr/lib/cgi-bin/&lt;cgi-bin-name&gt;
		</example>
et seront référencés par
		<example>
		  http://localhost/cgi-bin/&lt;cgi-bin-name&gt;
		</example></p></item>
		
		
	    <item><p>L'accès aux documents HTML</p>
		
	      <p>
Les documents HTML d'un paquet sont conservés dans 
<tt>/usr/share/doc/<var>package</var></tt> et doivent être accessibles dans
<tt>/usr/doc/<var>package</var></tt><footnote> Pour des raisons de 
compatibilité descendante, voir<ref id="usrdoc">.</footnote> et
peuvent être référencés par
		<example>
		  http://localhost/doc/&lt;package&gt;/&lt;filename&gt;
		</example></p></item>
		
		
	    <item><p>La racine des documents Web</p>
		
	      <p>
Les applications Web éviteront de conserver des fichiers dans la racine
des documents Web. Il faut utiliser, à la place, le répertoire
/usr/share/doc/&lt;package&gt; pour les documents et déclarer
l'application Web via le paquet menu. Si l'accès à la racine des
documents Web est indispensable alors il faut utiliser
		<example>
		  /var/www
		</example> 
comme racine des documents. Cela peut être juste un lien symbolique
vers l'emplacement où l'administrateur a mis la véritable racine
des documents.
 </p>
</item>
</enumlist>
</p>
</sect>
	  
	  
      <sect id="mail-transport-agents">
	<heading>Le courrier : transport, distribution et lecture des messages.</heading>
	  
	<p>
Les paquets Debian qui traitent le courrier électronique, que ce soient les 
agents utilisateurs (MUA: Mail User Agents) ou les agents de transport 
(MTA: Mail Transport Agent), doivent respecter les directives de 
configuration qui suivent. Le non respect de celles-ci peut entraîner la 
perte de messages, la présence de lignes <tt>From :</tt> incorrectes et 
d'autres dommages sérieux !
</p>
	  
	<p>
Le répertoire pour le courrier est <tt>/var/mail</tt> et l'interface 
pour envoyer des courriers est <tt>/usr/sbin/sendmail</tt> (conformément au 
FHS). Sur des systèmes plus anciens, le répertoire du courrier peut être
physiquement situé dans /var/spool/mail mais les accès à ce répertoire
se feront par le lien symbolique /var/mail. Le répertoire pour le courrier
fait partie du système de base et n'appartient pas au paquet MTA.
</p>
	  
<p>
Dans le système Debian, tous les MUAs, MTAs, MDAs et autres programmes de 
gestions des boites aux lettres (comme les démons IMAP) doivent verrouiller
les boites aux lettres de façon à permettre l'usage de NFS. Cela signifie
que le verrouillage de type <tt>fcntl()</tt> doit être associé avec celui
de type point («&nbsp;dot locking&nbsp;»). Pour éviter les situations inextricables, un programme utilisera d'abord <tt>fcntl()</tt> et ensuite le
verrouillage «&nbsp;point&nbsp;» ou bien implantera si possible les deux 
méthodes à la fois<footnote><p>Quand il n'est pas possible d'établir les deux 
modes de verrouillage, le système ne doit pas attendre que le second mode soit
mis en place, mais doit enlever le premier mode, attendre un certain temps
et recommencer le verrouillage.</footnote>. Pour faire cela, il est
conseillé d'employer les fonctions <tt>maillock</tt> et <tt>mailunlock</tt> 
données dans le paquet <tt>liblockfile*</tt><footnote>
            <p>
              <tt>liblockfile</tt> version &gt;&gt;1.01</p>
          </footnote>.
        </p>


	<p>
Les boîtes aux lettres ont généralement le mode 660
<tt><var>utilisateur</var>.mail</tt> à moins que l'utilisateur n'en
ait décidé autrement. Un MUA peut supprimer une boîte aux lettres (sauf
si elle n'a pas les permissions standards). Dans ce cas, le MTA ou
un autre MUA doit la recréer au besoin. Le groupe «&nbsp;mail&nbsp;» doit 
pouvoir modifier les boîtes aux lettres.
</p>
	<p>
La file d'attente du courrier a le mode 2775
<tt>root.mail</tt> et les MUAs doivent appartenir au groupe mail pour effectuer
le verrouillage mentionné précédemment (et doivent évidemment
s'interdire l'accès aux boîtes aux lettres des autres utilisateurs
en employant ce privilège).
</p>
	<p>
<tt>/etc/aliases</tt> est le fichier contenant les alias du système
de messagerie (par exemple postmaster, usenet, etc.) -- c'est l'un des
fichiers que l'administrateur système et les scripts <tt>postinst</tt>
peuvent modifier. Après avoir modifié <tt>/etc/aliases</tt>, le programme
ou l'administrateur doit exécuter <prgn>newaliases</prgn>. Tous les
paquets MTAs doivent contenir un programme <prgn>newaliases</prgn>,
même s'il ne fait rien. Cependant les anciens paquets MTA ne le
faisant pas, les programmes ne doivent pas échouer si
<prgn>newaliases</prgn> ne peut être trouvé.
</p>
	  
	<p>
La convention consistant à écrire <tt>forward to <var>adresse</var></tt>
dans la boîte aux lettres elle-même n'est pas supportée. Utilisez
un fichier <tt>.forward</tt> à la place.
</p>
	<p>
L'emplacement du programme <prgn>rmail</prgn> utilisé par UUCP pour
les messages entrants sera <tt>/usr/sbin/rmail</tt>.
De même le programme <prgn>rsmtp</prgn>, qui reçoit des lots SMTP via UUCP,
sera placé dans <tt>/usr/sbin/rsmtp</tt> s'il est supporté.
</p>
	<p>
Quand un programme veut savoir quel nom  employer, par exemple, pour les
messages sortants (mail et news) qui sont créés localement,
il utilisera le fichier <tt>/etc/mailname</tt>. Il contient
la partie située après le nom d'utilisateur et le signe <tt>@</tt> (at)
des adresses électroniques des utilisateurs de la machine (suivi
par un retour à la ligne).
</p>
	  
	<p>
Tout paquet s'assurera de l'existence de ce fichier. S'il existe,
il sera employé sans commentaire (le script de configuration
d'un MTA peut vouloir interroger l'utilisateur même s'il trouve
ce fichier). S'il n'existe pas, il demandera une valeur à
l'utilisateur et la stockera dans <tt>/etc/mailname</tt> puis
l'emploiera pour la configuration du paquet. Le message d'invite
sera explicite afin d'indiquer que ce nom ne sera pas utilisé
seulement par ce paquet. Par exemple dans cette situation, le paquet INN dit&nbsp;:
	  <example>
	    Please enter the `mail name' of your system.  This is the
	    hostname portion of the address to be shown on outgoing
	    news and mail messages.  The default is
	    <var>syshostname</var>, your system's host name.  Mail
	    name [`<var>syshostname</var>']:
	  </example>
	  où <var>syshostname</var> est la sortie de  <tt>hostname
	    --fqdn</tt>.</p></sect> 
	  
	  
      <sect>
	<heading>La configuration du système de «&nbsp;News&nbsp;»</heading>
	  
	<p>
Tous les fichiers de configuration relatifs aux serveurs et aux
clients NNTP (news) seront placés dans le répertoire <tt>/etc/news</tt>.
</p>
	  
	<p>
Quelques points de configuration s'appliquent à de nombreux paquets
concernant les news (clients et serveurs) sur la machine :

	  <taglist>
	    <tag>/etc/news/organization</tag>
	    <item><p>c'est une chaîne qui apparaîtra dans le champ 
organisation de l'en-tête de chaque
message posté par les clients NNTP de la machine.
 </p>
</item>
		
	    <tag>/etc/news/server</tag>
	    <item><p>Contient soit le FQDN du serveur NNTP principal soit
localhost si la machine locale est un serveur NNTP.
 </p>
</item>
	  </taglist>
	  
D'autres fichiers de portée générale peuvent être ajoutés s'ils sont requis 
pour la configuration commune à plusieurs paquets concernant les news.
</p>
</sect>
	  
      <sect>
	<heading>Les programmes pour le système X Window</heading>
	  
	<p>
On doit configurer pour le système X Window les programmes qui peuvent l'être,
et on doit déclarer toutes les dépendances nécessaires à leur fonctionnement
sous «&nbsp;X&nbsp;», à moins que ces dépendances ne soient pour un paquet
dont la priorité est «&nbsp;standard&nbsp;» ou une priorité supérieure ; dans
ce cas les binaires spécifiques à «&nbsp;X&nbsp;» peuvent être mis dans un
paquet distinct, ou bien des versions alternatives du paquet avec support de
«&nbsp;X&nbsp;» peuvent être fournies.
</p>
<p>
<em>Les paquets qui fournissent un serveur «&nbsp;X&nbsp;» </em> et qui,
directement ou indirectement, communiquent avec le matériel d'entrée et
d'affichage, déclareront dans leurs données de contrôle qu'ils fournissent
le paquet virtuel <tt>xserver</tt>
          <footnote>
            <p>
Argument : cela met en oeuvre la pratique actuelle, et cela offre une
vraie politique pour l'utilisation du paquet virtuel <tt>xserver</tt>,
lequel apparaît dans la liste des paquets virtuels. En résumé, les serveurs
«&nbsp;X&nbsp;» qui communiquent directement avec le matériel d'entrée et 
d'affichage ou via un autre sous-système (p.ex. GGI) fourniront
<tt>xserver</tt>. Des choses comme «&nbsp;Xvfb&nbsp;», «&nbsp;Xnest&nbsp;»
et «&nbsp;Xprt&nbsp;» ne doivent pas le faire.
	    </p>
	  </footnote>.

<p>

<em>Les paquets qui fournissent un émulateur de terminal</em> pour le
système X Window, émulateur qui offre un type de terminal avec une
description «&nbsp;terminfo&nbsp;» fourni avec le paquet <tt>ncurses-base</tt>,
déclareront dans leurs données de contrôle qu'ils fournissent le paquet
virtuel <tt>x-terminal-emulator</tt>. Ils se déclareront comme une
alternative pour <tt>/usr/bin/x-terminal-emulator</tt>, avec une priorité
égale à 20.
</p>
<p>
<em>Les paquets qui fournissent des gestionnaires de fenêtres</em>
déclareront dans leurs données de contrôle qu'ils fournissent le paquet
virtuel <tt>x-window-manager</tt>. Ils se déclareront comme une
alternative pour <tt>/usr/bin/x-window-manager</tt>, avec une priorité
qu'on calculera ainsi :
<list>
            <item>Commencez avec une priorité égale à 20.</item>
            <item>
 Si le gestionnaire de fenêtres permet le système des menus de Debian, on
ajoutera 20 points si cela se fait avec la configuration par défaut du
paquet (c.-à-d. qu'il n'y a pas besoin, pour obtenir cette fonctionnalité,
de modifier des fichiers de configuration appartenant au système ou à l'
utilisateur) ; si l'on doit modifier des fichiers de configuration , on
ajoutera seulement 10 points.</item>
<item>
Si le gestionnaire de fenêtres autorise, dans sa configuration par défaut, le 
redémarrage d'une session X avec un <em>nouveau</em> gestionnaire de fenêtres 
(sans tuer le serveur X), on ajoutera 10 points ; sinon, rien.</item>
</list>
<p>
<em>Les paquets qui fournissent des fontes pour le système X Window</em>
doivent faire un certain nombre de choses pour s'assurer à la fois qu'ils 
sont disponibles sans avoir à modifier la configuration du serveur 
X ou du serveur de fontes, et qu'ils n'abîment pas les fichiers qu'utilisent
d'autres paquets pour déclarer les renseignements qui les concernent.
<enumlist>
           <item>
Les fontes de tout type offertes par le système X Window seront dans des
paquets distincts des binaires, bibliothèques ou de la documentation (sauf
celle liée à la fonte fournie). Quand un programme ou une bibliothèque
est <em>inutilisable</em> en l'absence d'une ou plusieurs fontes, le paquet 
qui contient ce programme ou cette bibliothèque déclarera une dépendance
envers le(s) paquet(s) contenant la(les) fonte(s) qu'il demande.</item>
           <item>
Les fontes BDF seront converties en fontes PCF avec le programme
<tt>bdftopcf</tt> (disponible dans le paquet <tt>xutils</tt>),
<tt>gzip</tt>ées, et placées dans un répertoire qui correspond à leur
définition : 
<list>
                  <item>
                      Les fontes à 100 dpi seront mises dans
<tt>/usr/X11R6/lib/X11/fonts/100dpi/</tt> ;
</item>
                  <item>
                      Les fontes à 75 dpi seront mises dans
                      <tt>/usr/X11R6/lib/X11/fonts/75dpi/</tt> ;
                  </item>
                  <item>
 les fontes à chasse fixe, les fontes pour le curseur, ainsi que
d'autres fontes de faible définition seront mises dans
                      <tt>/usr/X11R6/lib/X11/fonts/misc/</tt>.
</item>
                </list>
            </item>
            <item>
les fontes «&nbsp;Speedo&nbsp;» seront mises dans
<tt>/usr/X11R6/lib/X11/fonts/Speedo/</tt>.
            </item>
<item>
les fontes «&nbsp;Type 1&nbsp;» seront mises dans
                <tt>/usr/X11R6/lib/X11/fonts/Type1/</tt>.
Si des fichiers de métrique sont disponibles, ils peuvent aussi être placés 
là.
            </item>
            <item>
On ne doit pas créer ni utiliser d'autres répertoires dans 
<tt>/usr/X11R6/lib/X11/fonts/</tt> que ceux répertoriés dans la liste qui 
précède. (Les répertoires <tt>PEX</tt> et <tt>cyrillic</tt> font exceptions 
pour des raisons historiques, mais l'installation de fichiers dans ces 
répertoires reste déconseillée.) </item>
            <item>
Au lieu de mettre directement des fichiers dans les répertoires cités dans
la liste qui précède, les paquets peuvent fournir des liens symboliques 
dans le répertoire des fontes pointant vers l'emplacement réels des fichiers 
dans l'arborescence. Un tel emplacement se conformera au «&nbsp;FHS&nbsp;».
</item>
            <item>
Les paquets ne contiendront pas à la fois les versions à 75dpi et les versions
à 100dpi d'une fonte. Si les deux sont disponibles, elles seront fournies
dans des paquets distincts dont les noms seront étiquetés «&nbsp;-75dpi&nbsp;»
ou «&nbsp;-100dpi&nbsp;».</item>
            <item>
Les fontes destinées au répertoire <tt>misc</tt> ne doivent pas être mises
dans les mêmes paquets que ceux des fontes à 75dpi ou 100dpi mais elles 
seront fournies dans un paquet distinct étiqueté «&nbsp;-misc&nbsp;».</item>
            <item>
Les paquets <em>ne doivent pas</em> fournir les fichiers <tt>fonts.dir</tt>,
<tt>fonts.alias</tt>  ou <tt>fonts.scale</tt> dans un répertoire de fontes.
<list>
                  <item>
les fichiers <tt>fonts.dir</tt> ne doivent en aucun cas être fournis ;
                  </item>
                  <item>
si besoin est, les fichiers <tt>fonts.alias</tt> et <tt>fonts.scale</tt>
seront fournis dans le répertoire
<tt>/etc/X11/fonts/<em>fontdir</em>/<em>package</em>.<em>extension</em></tt>
où <em>fontdir</em> est le nom du répertoire de
<tt>/usr/X11R6/lib/X11/fonts/</tt> dans lequel sont conservées les fontes
du paquet correspondant (p.ex.<tt>75dpi</tt> ou <tt>misc</tt>), où
<em>package</em> est le nom du paquet qui fournit ces fontes, et où
<em>extension</em> correspond au contenu du fichier, soit <tt>scale</tt>
soit <tt>alias</tt>.</item>
                </list>
            </item>
            <item>
Les paquets doivent déclarer une dépendance envers le paquet 
<tt>xutils</tt> et lancer, dans les scripts de post-installation et 
de post-désinstallation du paquet, la commande <tt>mkfontdir</tt> pour
chaque répertoire où est installée une fonte.</item>
            <item>
Les paquets qui fournissent un ou plusieurs de ces fichiers 
<tt>fonts.scale</tt> dont on vient de parler, doivent déclarer une dépendance
de version pour <tt>xutils (&gt;=4.0.2)</tt> et doivent
appeler <tt>update-fonts-scale</tt> pour chaque répertoire où est installée 
une fonte <em>avant</em> d'appeler <tt>mkfontdir</tt> pour ce répertoire.
On doit faire cet appel à la fois dans les scripts de post-installation et
ceux de post-désinstallation.</item>
            <item>
Les paquets qui fournissent un ou plusieurs de ces fichiers
<tt>fonts.alias</tt> dont on vient de parler, doivent déclarer une dépendance
de version pour <tt>xutils (&gt;=4.0.2)</tt> et doivent
appeler, dans les scripts de post-installation et ceux de post-désinstallation
, <tt>update-fonts-alias</tt> pour chaque répertoire où est installée
une fonte.</item>
            <item>
Les paquets ne doivent pas proposer, pour les noms des fontes qu'ils
fournissent, des alias qui entrent en conflit avec les alias déjà utilisés
par des fontes d'autres paquets.</item>
<item>
Les paquets ne doivent pas fournir des fontes qui ont le même nom pour
l'enregistrement XLFD que celui donné par une fonte déjà en usage.</item>
          </enumlist>
        </p>
	<p>
Les fichiers «&nbsp;<em>application defaults</em>&nbsp;» doivent être 
installés dans le répertoire <tt>/usr/X11R6/lib/X11/app-defaults/</tt> 
(on peut utiliser un répertoire particulier dans <tt>/etc/X11/</tt>
comme l'indique le manuel 
<em>X Toolkit Intrinsics - C Language Interface</em>).
On ne les déclarera pas comme des <em>conffile</em>s et on ne les
traitera pas non plus comme des fichiers de configuration.
Pour les programmes qui ne sont pas liés avec la bibliothèque Xt (X Toolkit),
un fichier, dont le nom sera le même que celui du paquet et qui sera mis dans 
le répertoire <tt>/etc/X11/Xresources/</tt>, pourra assurer le paramétrage 
des ressources X d'un paquet ; il doit être déclaré comme <em>conffile</em> 
ou géré comme un fichier de configuration. <em>Important :</em> les paquets 
qui installent des fichiers dans le répertoire <tt>/etc/X11/Xresources/</tt> 
<em>doivent</em> déclarer un conflit avec le paquet <tt>xbase 
(&lt;&lt;3.3.2.3a-2)</tt> ; si ce n'est pas fait, le paquet peut détruire un 
<em>fichier</em> <tt>/etc/X11/Xresources</tt> préexistant qui a pu être
paramétré par l'administrateur système<footnote><p>
Argument : cela clarifie le langage pour s'adresser au responsable
de paquet et non pas à l'administrateur système pour savoir comment gérer
/etc/X11/Xresources.</p>
          </footnote>.
       </p>
<p><em>Les paquets qui utilisent le système X Window s'en tiendront autant que 
possible au «&nbsp;FHS&nbsp;»</em>. Ils installeront autant que possible les 
binaires, les bibliothèques, les pages de manuel ou d'autres fichiers aux 
endroits demandés par le «&nbsp;FHS&nbsp;». Cela signifie qu'on ne doit pas 
installer de fichiers dans <tt>/usr/X11R6/bin/</tt>, <tt>/usr/X11R6/lib/</tt>,
ou <tt>/usr/X11R6/man/</tt> à moins que le fonctionnement correct d'un paquet 
ne l'exige. On placera les fichiers de configuration des gestionnaires de
fenêtres et des gestionnaires d'affichage dans un sous-répertoire de
<tt>/etc/X11/</tt> correspondant au nom du paquet ; cela est dû à 
l'interpénétration étroite de ces programmes et du mécanisme du système
X Window. Les programmes applicatifs utiliseront le répertoire <tt>/etc/</tt>
sauf si cette charte impose autre chose. L'installation de fichiers dans des 
sous-répertoires de <tt>/usr/X11R6/include/X11/</tt> et de 
<tt>/usr/X11R6/lib/X11/</tt> est autorisée mais déconseillée ; les 
responsables de paquet détermineront s'ils peuvent utiliser des sous-
répertoires de <tt>/usr/lib/</tt> et de <tt>/usr/share/</tt>. (On encourage
l'usage de liens symboliques des répertoires de X11R6 vers des endroits
conformes au «&nbsp;FHS&nbsp;» si les programmes ne sont pas facilement
configurables pour chercher ailleurs leurs fichiers.) Les paquets ne
doivent pas fournir -- ou  y installer des fichiers -- les répertoires
<tt>/usr/bin/X11/</tt>, <tt>/usr/include/X11/</tt> ou
<tt>/usr/lib/X11/</tt>. Les fichiers d'un paquet feront cependant
référence à ces répertoires plutôt qu'à leurs homologues de X11R6, 
<tt>/usr/X11R6/bin/</tt>, <tt>/usr/X11R6/include/X11/</tt> et
<tt>/usr/X11R6/lib/X11/</tt> quand les ressources qui sont référencées
n'ont pas été placées dans des endroits conformes au «&nbsp;FHS&nbsp;».</p>

 	<p>
<em>Les programmes qui demandent la bibliothèque «&nbsp;OSF-Motif&nbsp;»,
bibliothèque non conforme aux «&nbsp;DFSG&nbsp;»</em>, seront compilés et 
testés avec «&nbsp;LessTif&nbsp;» (une libre ré-implémentation de 
«&nbsp;Motif&nbsp;»). Quand le responsable du paquet juge que 
le programme ne fonctionne pas suffisamment bien avec «&nbsp;LessTif&nbsp;»
pour être distribué et supporté, mais qu'il fonctionne correctement quand
il est compilé avec «&nbsp;Motif&nbsp;», il créera alors deux versions du
paquet ; l'une qui sera liée de façon statique à «&nbsp;Motif&nbsp;» et
dont le nom sera étiqueté «&nbsp;-smotif&nbsp;», et l'autre qui sera liée
de façon dynamique à «&nbsp;Motif&nbsp;» et dont le nom sera étiqueté 
«&nbsp;-dmotif&nbsp;». Les deux versions liées à «&nbsp;Motif&nbsp;» sont
dépendantes de logiciels non conformes aux «&nbsp;DFSG&nbsp;» et donc ne
peuvent être mis dans la section «&nbsp;main&nbsp;» de la distribution ; si 
le logiciel lui-même est conforme aux «&nbsp;DFSG&nbsp;»  il peut être mis 
dans la section «&nbsp;contrib&nbsp;».Toutes les versions connues de
«&nbsp;OSF-Motif&nbsp;» autorisent la redistribution sans restrictions de 
binaires liés de façon statique ou dynamique à cette bibliothèque, mais 
c'est au responsable de paquet de déterminer si la licence  
de la version de «&nbsp;OSF-Motif&nbsp;» qu'il possède le permet.
	</p>
      </sect>
	  
	  
<sect>
<heading>Les programmes et modules Perl</heading>
<p>
Les programmes et modules Perl suivront la norme actuelle pour Perl telle
qu'elle est définie dans le fichier
<ftpsite>ftp.debian.org</ftpsite> 
<ftppath>/debian/doc/package-developer/perl-policy.txt.gz</ftppath>, ou
sur votre miroir local. De plus, ce fichier fait partie du paquet
<tt>debian-policy</tt>.</p>
      </sect>
     <sect>
	<heading>Les programmes emacs lisp</heading>
	  
	<p>
Veuillez consulter le «&nbsp;Debian Emacs Policy&nbsp;» (documenté dans
<tt>debian-emacs-policy.gz</tt> du paquet <prgn>emacsen-common</prgn>)
pour les détails concernant la création de paquets de programmes
emacs lisp.
</p>
</sect>
	  
	  
      <sect>
	<heading>Les jeux</heading>
	  
	<p>
Les permissions de <tt>/var/lib/games</tt> sont 755 <tt>root.root</tt>.</p>
	  
	<p>
Chaque jeu décide de ses propres règles de sécurité.
</p>
	  
	<p>
Les jeux qui demandent des accès privilégiés et protégés à des
fichiers de scores, de sauvegardes de parties, etc., peuvent appartenir
à <tt>root.games</tt> et être exécutables par le groupe <tt>games</tt> 
(mode 2755) et doivent utiliser des fichiers et des répertoires avec
des permissions appropriées (770 <tt>root.games</tt> par exemple).
Ils ne doivent pas être exécutable par un utilisateur (set-user-id),
car cela entraîne des problèmes de sécurité. (Si un attaquant arrive
à corrompre un jeu «&nbsp;set-user-id&nbsp;», il peut alors remplacer 
l'exécutable d'autres utilisateurs, forçant les autres joueurs de ces jeux à 
exécuter un cheval de Troie. Avec un programme «&nbsp;set-group-id&nbsp;»,
l'attaquant n'a accès qu'à des données de jeu moins 
importantes. S'il veut accéder aux comptes des autres joueurs, cela lui 
demandera des efforts beaucoup plus importants).
</p>
	  
	<p>
Certains paquets, comme les programmes «&nbsp;fortune&nbsp;», sont configurés
par leurs auteurs originaux pour interdire la lecture de leurs fichiers
de données ou d'autres informations statiques,
de manière qu'ils ne puissent être accessibles que par les programmes 
«&nbsp;set-id&nbsp;» fournis. Vous ne ferez pas de même dans un paquet 
Debian : n'importe qui peut télécharger le fichier <tt>.deb</tt> et y lire 
les données, cela n'a donc pas de sens d'avoir des fichiers non lisibles. 
Créer des fichiers accessibles en lecture implique aussi que vous n'avez pas 
à construire des programmes «&nbsp;set-id&nbsp;», ce qui réduit le risque de 
trous de sécurité.
</p>
	<p>
	  Conformément au «&nbsp;FHS&nbsp;», les binaires des jeux seront
installés dans le répertoire <tt>/usr/games</tt>. Cela s'applique
aussi aux jeux utilisant le système <em>X Window</em>. On installera les 
pages de manuel des jeux («&nbsp;X&nbsp;» et «&nbsp;non-X&nbsp;») dans
<tt>/usr/share/man/man6</tt>.
</p>
</sect>
</chapt>
      
    <chapt id="13"><heading>La documentation</heading>
	
      
      <sect>
	<heading>Les pages du manuel</heading>
	  
	<p>
On installera les pages de manuel sous la forme d'un source
<prgn>nroff</prgn>, à l'emplacement approprié dans <tt>/usr/share/man</tt>.
Vous utiliserez uniquement les sections 1 à 9 (voir le FHS pour
plus de détails). Vous ne devez pas installer de
pages «&nbsp;cat&nbsp;» préformatées.
</p>
<p>
Chaque programme, utilitaire ou fonction aura une page de manuel associée
dans le même paquet. On suggère aussi que chaque fichier de configuration
ait une page de manuel associée.
</p>	  
	<p>
Quand il n'y a pas de page de manuel pour un programme, un utilitaire, une 
fonction particulière ou un fichier de configuration  et qu'un bogue a été 
rapporté sur «&nbsp;debian-bugs&nbsp;», on créera un lien symbolique de cette 
page vers la page de manuel <manref name="undocumented" section="7">. Ce lien 
symbolique peut être créé à partir de <tt>debian/rules</tt> comme suit :
	  <example>
	    ln -s ../man7/undocumented.7.gz \
	    debian/tmp/usr/share/man/man[1-9]/the_requested_manpage.[1-9].gz
	  </example> 
Cette page de manuel indique que l'absence de page de manuel a déjà
été signalée comme un bogue, ainsi vous ne pouvez faire le lien que si tel
est le cas (vous pouvez le rapporter vous-même si vous le souhaitez).
Ne fermez pas le rapport de bogue tant qu'une page de manuel adéquate
n'est pas disponible.
</p>
	  
	<p>
Vous pouvez faire suivre une plainte concernant l'absence d'une page du manuel
aux auteurs originaux, et signaler qu'un rapport de bogue a été envoyé au 
système Debian de suivi des bogues. Même si le projet GNU ne considère pas en
général l'absence d'une page du manuel comme un bogue, nous oui. S'ils vous
répondent qu'ils ne considèrent pas cela comme un bogue, laissez quand même 
le bogue ouvert dans notre système de suivi.
</p>
	  
	<p>
Les pages de manuel seront installées comprimées via <tt>gzip -9</tt>.
</p>
	<p>
Si une page de manuel doit être accessible via différents noms, il est
préférable d'utiliser un lien symbolique plutôt que la fonctionnalité
<tt>.so</tt>, mais il est inutile de bricoler les parties
incriminées dans les sources originaux pour changer les <tt>.so</tt>
en liens symboliques (à moins que ce soit trivial).
Ne créez pas de lien physique dans les répertoires des pages du manuel
et ne mettez pas de chemin absolu dans les directives <tt>.so</tt>.
Le nom du fichier dans le <tt>.so</tt> d'une page du manuel sera
relatif à la racine des pages (habituellement <tt>/usr/share/man</tt>).
</p>
</sect>
	  
      <sect>
	<heading>Les documents «&nbsp;Info&nbsp;»</heading>
	  
	<p>

On installera les documents «&nbsp;Info&nbsp;» dans <tt>/usr/share/info</tt>.
Ils seront comprimés avec <tt>gzip -9</tt>.
</p>
	<p>
Votre paquet appellera <prgn>install-info</prgn> dans son script d'installation
pour mettre à jour le fichier <tt>dir</tt> de «&nbsp;Info&nbsp;» :
	  <example>
	    install-info --quiet --section Development Development \
	    /usr/share/info/foobar.info
	  </example></p>
	  
	<p>
Il est judicieux de spécifier une section pour l'emplacement de votre
programme ; cela se fait avec l'option <tt>--section</tt>.
Pour déterminer la section à utiliser, vous devez consulter
<tt>/usr/share/info/dir</tt> sur votre système et choisir la plus adéquate
(ou créer une nouvelle section si aucune des sections actuelles n'est
adaptée). Notez que l'option <tt>--section</tt> prend deux arguments ;
le premier est une expression régulière pour rechercher une section
existante (indépendamment de la casse), le second est utilisé pour la création
d'une nouvelle section.
</p>
	<p>
Vous retirerez les entrées dans le script de pré-désinstallation :
	  <example>
	    install-info --quiet --remove /usr/share/info/foobar.info
	  </example></p>
	  
	<p>
Si <prgn>install-info</prgn> ne trouve pas une entrée descriptive dans
le fichier Info, vous devrez en fournir une. Voir
<manref name="install-info" section="8"> pour plus de détails.
</p>
</sect>
      
      <sect>
	<heading>Documentations supplémentaires</heading>
	
	<p>
Le responsable d'un paquet peut installer toute documentation supplémentaire 
qui vient avec ce paquet. Les documents texte seront placés dans le 
répertoire <tt>/usr/share/doc/<var>package</var></tt>,
et comprimés avec <tt>gzip -9</tt> à moins qu'ils soient petits.
</p>
	
	<p>
Si un paquet contient une importante documentation dont la majorité des
utilisateurs du paquet n'a pas besoin, vous la mettrez dans un paquet binaire
distinct. Ainsi elle ne prendra pas d'espace disque sur
les machines d'utilisateurs qui n'en ont pas besoin ou qui ne veulent
pas l'installer.
</p>

	
	<p>
Il est souvent judicieux de mettre les fichiers texte d'informations
(<tt>README</tt>, changelogs et autres) provenant du paquet source
dans <tt>/usr/share/doc/<var>package</var></tt> au sein des paquets binaires.
Bien entendu, vous n'avez pas besoin de fournir les instructions
de compilation et d'installation.
</p>

<p>
Aucun programme ne renverra à des fichiers de <tt>/usr/share/doc</tt>, et
l'administrateur système pourra les supprimer sans «&nbsp;planter&nbsp;»
un programme. Tout fichier référencé par un programme et qui est utile
en tant que documentation indépendante utile sera installé dans 
<tt>/usr/share/&lt;package&gt;/</tt> et lié symboliquement avec
<tt>/usr/share/doc/&lt;package$gt;/</tt>.
	</p>

</sect>
 
      <sect id="usrdoc">
      <heading>L'accès à la documentation</heading>

       <p>
Les précédentes versions de Debian plaçaient toute la documentation 
supplémentaire dans <tt>/usr/doc/<var>package</var></tt>. Afin de migrer
en douceur vers <tt>/usr/share/doc/<var>package</var></tt>, chaque paquet
doit maintenir un lien symbolique <tt>/usr/doc/<var>package</var></tt> qui
pointe vers <tt>/usr/share/doc/<var>package</var></tt>, qui est la place réelle 
de sa documentation<footnote> Ces liens symboliques seront détruits un jour,
mais ils doivent exister pour des raisons de compatibilité jusqu'à ce que tous
les paquets aient pris en compte cette règle et que la charte debian soit
changée en conséquence.</footnote>. Le lien symbolique doit être créé au 
moment de l'installation du paquet ; il ne peut être contenu dans le paquet
lui-même à cause de problèmes avec <prgn>dpkg</prgn>. Une façon raisonnable
de faire est de mettre, dans le script <prgn>postinst</prgn>, ce qui suit :
          <example>
  if [ "$1" = "configure" ]; then
        if [ -d /usr/doc -a ! -e /usr/doc/#PACKAGE# \
            -a -d /usr/share/doc/#PACKAGE# ]; then
                ln -sf ../share/doc/#PACKAGE# /usr/doc/#PACKAGE#
        fi
  fi
          </example>
et dans le script <prgn>prerm</prgn>:
          <example>
  if [ \( "$1" = "upgrade" -o "$1" = "remove" \) \
       -a -L /usr/doc/#PACKAGE# ]; then
        rm -f /usr/doc/#PACKAGE#
  fi
          </example>
	</p>
      </sect>
     
    
  <sect>
	<heading>Les formats préférés pour la documentation </heading>
	
	<p>
L'unification de la documentation Debian se fait autour d'HTML.
</p>
	
	<p>
Si votre paquet comprend une importante documentation dans un format balisé
qui peut être converti en d'autres formats, vous livrerez
si possible la version HTML dans le paquet binaire, dans le répertoire
<tt>/usr/doc/<var>package</var></tt> ou un de ces sous-répertoires
<footnote>
 <p> 
 Le raisonnement : ce qui importe ici, c'est que les documents HTML 
 soient disponibles dans <em>certains</em> paquets, et pas
 nécessairement dans le paquet binaire principal.
 </p>
</footnote>.

</p>
	<p>
Vous pouvez fournir d'autres formats comme PostScript.
</p>
</sect>
      
      <sect id="copyrightfile">
	<heading>Les informations de copyright</heading>
	
	<p>
Chaque paquet doit être accompagné d'une copie <em>verbatim</em> de son 
copyright ainsi que de sa licence de distribution dans le fichier
<tt>/usr/share/doc/<var>package-name</var>/copyright</tt>. Ce fichier ne doit 
pas être comprimé ni être un lien symbolique.
</p>
	<p>
De plus, le fichier de copyright doit préciser où ont été obtenus
les fichiers sources originaux (s'ils existent) et expliquera brièvement 
quelles modifications ont été faites à ces fichiers dans la version Debian. Il
nommera les auteurs originaux  et le(s) responsable(s) Debian 
qui ont oeuvré à la création du paquet.
</p>

<p>
Une copie du fichier installé dans 
<tt>/usr/share/doc/<var>package</var>/copyright</tt> sera faite dans
<tt>debian/copyright</tt>.</p>

	<p>
<tt>/usr/share/doc/<var>package-name</var></tt> peut être un lien symbolique 
vers un répertoire de <tt>/usr/share/doc</tt> seulement si, de deux paquets 
provenant tous les deux de la même source, le premier possède une relation 
«&nbsp;Depends&nbsp;» avec le second. Ces règles sont importantes car 
on doit pouvoir extraire les copyrights par des moyens automatiques.
</p>
	<p>
Les paquets distribués sous la licence «&nbsp;UCB BSD&nbsp;», la licence 
«&nbsp;Artistic&nbsp;», la licence «&nbsp;GNU GPL&nbsp;» ou la licence 
«&nbsp;GNU LGPL&nbsp;» feront référence aux fichiers 
<<tt>/usr/share/common-licenses/BSD</tt>,
	  <tt>/usr/share/common-licenses/Artistic</tt>,
	  <tt>/usr/share/common-licenses/GPL</tt> et
	  <tt>/usr/share/common-licenses/LGPL</tt>
	  <footnote>
	    <p>
Pourquoi «&nbsp;licence&nbsp;» et pas «&nbsp;copyright&nbsp;» ? Parce que jusqu'à présent
<tt>/usr/doc/copyright</tt> contenait tous les fichiers de copyright, plus 
les quatre licences classiques GPL, LGPL, Artistic et BSD. Maintenant
les fichiers qui donnent aux paquets des copyrights particuliers ne sont plus
dans un répertoire commun. Une fois que <tt>/usr/doc/copyright</tt> est
presque vide, il est sensé de changer «&nbsp;copyright&nbsp;» en «&nbsp;licence&nbsp;». Pourquoi
«&nbsp;licences communes&nbsp;» et pas  «&nbsp;licences&nbsp;» ? Parce que si je mets simplement
«&nbsp;licences&nbsp;», je suis sûr de recevoir un rapport de bogue disant «&nbsp;la
licence foo n'est pas dans le répertoire des licences.&nbsp;» Il n'y a pas toutes 
les licences, seulement les plus communes. Je pourrais utiliser
/usr/share/doc/common-licenses, mais je pense que c'est trop long, et puis,
la licence GPL ne dit pas tout, c'est simplement une licence.
	    </p>
	  </footnote>.
	</p>
	
	<p>
Vous ne devez pas utiliser le fichier copyright comme un fichier 
<tt>README</tt> général. Si votre paquet possède un tel fichier, vous 
l'installerez dans <tt>/usr/doc/<var>package</var>/README</tt> ou 
<tt>README.Debian</tt> ou dans un autre endroit approprié.
</p>
</sect>

<sect>
<heading>Exemples</heading>

<p>
On installera tous les exemples (configuration, fichiers source, autres) dans 
un répertoire <tt>/usr/share/doc/<var>package</var>/examples</tt>.
Ces fichiers ne seront pas utilisés par un quelconque programme.
Ils ne sont là qu'en tant que documentation, et pour le seul bénéfice de 
l'administrateur système et des utilisateurs.
On installera les exemples concernant une architecture particulière dans un 
répertoire <tt>/usr/lib/<var>package</var>/examples</tt> et les fichiers dans
<tt>/usr/share/doc/<var>package</var>/examples</tt> seront des liens 
symboliques. Ou bien, ce dernier répertoire sera un lien vers le premier.
</p>
</sect>

<sect id="instchangelog">
<heading>Les fichiers «&nbsp;Changelog&nbsp;»</heading>

<p>
Les paquets qui ne sont pas originaires de Debian doivent contenir,
dans <tt>/usr/share/doc/<var>package</var></tt>, une copie nommée
<tt>changelog.Debian.gz</tt> du fichier <tt>debian/changelog</tt> qui est dans
l'arborescence des sources.
S'il existe un «&nbsp;changelog&nbsp;» original, il sera accessible en fichier
texte comme <tt>/usr/share/doc/<var>package</var>/changelog.gz</tt>.
Si le «&nbsp;changelog&nbsp;» original est distribué comme fichier HTML,
il sera rendu disponible en tant que
<tt>/usr/share/doc/<var>package</var>/changelog.html.gz</tt> et le
<tt>changelog.gz</tt> sera produit en utilisant p.ex.
<tt>lynx -dump -nolist</tt>.
Si le changelog original n'est pas déjà conforme 
à cette convention, alors cela peut être réalisé soit en renommant ce fichier 
soit en créant un lien symbolique, c'est à la convenance du responsable
du paquet<footnote><p> Argument : on n'a pas à chercher dans deux endroits
les «&nbsp;changelogs&nbsp;» originaux simplement parce qu'ils sont dans un
format HTML.</footnote>.
</p>

<p>
Ces fichiers seront installés comprimés par <tt>gzip -9</tt>, car 
ils grossissent avec le temps même s'ils commencent petitement.
</p>

<p>
Quand un paquet a un seul changelog, utilisé à la fois comme
changelog Debian et changelog original car le responsable principal est le même
que le responsable Debian, on appellera simplement ce changelog :
<tt>/usr/share/doc/<var>package</var>/changelog.gz</tt>. S'il y a un 
responsable principal mais pas de changelog source, on appellera toujours le 
changelog Debian : <tt>changelog.Debian.gz</tt>.
</p>
</sect>
</chapt>

</book>
</debiandoc>






