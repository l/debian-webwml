#use wml::debian::template title="Centre de traduction de Debian"
#use wml::debian::translation-check translation="1.8" translation_maintainer="Martin Quinson"

<p>Ces pages montrent le nombre de paquets Debian prêts à être traduits, et
combiens sont réellement traduits.

<p>Les pages sont générées par des scripts écrits par Martin Quinson, l'un
des traducteurs francophones pour Debian.

<p>Attention, ce processus ne représente qu'une partie de
l'internationalisation (abbrégé i18n) et de la localisation (abbrégé
l10n). Internationaliser un programme consiste à en modifier le source pour
en autoriser la traduction, et le localiser consiste à faire tout ce qu'il
faut pour que le programme soit au courant des spécificités de chaque
pays. Cela se découpe en différentes parts :

<dl compact>
 <dt>LC_COLLATE
  <dd>Comment ranger du texte dans l'ordre alphabetique.

 <dt>LC_CTYPE
  <dd>Quel jeu de caractère utiliser.

 <dt>LC_MONETARY
  <dd>Comment representer de l'argent.

 <dt>LC_NUMERIC
  <dd>Comment representer les nombres.

 <dt>LC_TIME
  <dd>Comment representer la date et l'heure.

 <dt>LC_MESSAGES
  <dd>Dans quelle langue afficher les messages.
</dl>

<p>Vous voyez donc que le fait de traduire les messages d'une application
ne représente qu'une partie de ce processus, mais c'est la seule partie que
mes scripts savent surveiller. Dans le reste de ces pages, il est possible
que j'emploie i18n ou l10n pour la partie de i18n ou l10n concernant la
traduction des messages. Je sais que c'est une erreur, mais écrire la
désignation correcte à chaque fois est bien trop long ... Désolé. :)

<p>Un programme est dit internationnalisé quand il est possible de le
traduire. Pour cela, il faut modifier son source pour qu'il puisse utiliser
des catalogues de traduction pour ses messages. Il est dit traduit en une
langue quand ces catalogues ont été traduits dans cette langue.</p>

<p>Il existe au moins deux systèmes de catalogues de messages :

<ul>
  <li>NLS : ce système est basé sur catgets() et les fonctions associées
      issues de POSIX.
  <li>GNU : ce système est basé sur gettext() et les fonctions associées 
      faites par GNU.
</ul>

<p>Sans entrer dans les détails des deux solutions, disons que même si les
scripts détectent les deux systèmes, le support est bien meilleur pour les
programmes utilisant gettext. Par exemple, je ne sais pas comment obtenir
des statistiques sur les programmes utilisant catgets.</p>

<p>De plus, les programmeurs utilisent une organisation standard pour leur
paquet. Ces scripts sont capable de détecter trois d'entre elles :

<ul>

<li>GNU : tous les fichiers po sont placées dans un répertoire nommé 'po',
et ce répertoire contient aussi le méchanisme nécessaire pour compiler
(Il s'agit de fichiers nommés `Makefile.in.in' et `POTFILES.in')

<li>NLS : tous les fichiers nls sont placés dans un répertoire 'nls' (ie, il
existe un répertoire nommé `nls')

<li>full : tout ce qui concerne l'internationalisation est stocké dans
différents répertoires, un par langue. Chacun contient les fichiers po, les
pages de manuel et d'autres informations du même ordre.
</ul>

<p>Vous en savez maintenant assez pour feuilleter le résultat du
script. Vous pouvez choisir entre différentes formes :</p>

<ul>
 <li>État de `i18n', c.a.d., quels paquets sont prêts à être traduits :
 <ul>
  <li><a href="i18n">section par section</a>
 </ul>
 <br><br>
 <li>État de `l10n', c.a.d. comment les paquets sont traduits :
 <ul>
  <li><a href="l10n">paquet par paquet, sous forme résumé</a>
  <li><a href="l10n-packages">paquet par paquet, sous forme détaillée</a>
  <li><a href="l10n-errors">par catégorie d'erreurs et avertissements</a>
  <li><a href="l10n-rank">classement entre les langues</a>
  <li><a href="l10n-lang">liste de toutes les langues, pour télécharger le matériel à traduire</a>
 </ul>
</ul>
