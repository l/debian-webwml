#use wml::debian::translation-check translation="1.3" maintainer="Jean-Pierre Giraud"
<define-tag description>Mise à jour de sécurité pour LTS</define-tag>
<define-tag moreinfo>
<ul>
 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6831">CVE-2015-6831</a>
    <p>Une vulnérabilité d'utilisation de mémoire après libération a été
    découverte dans la fonction unserialize(). Il est possible de créer une
    ZVAL et de la libérer avec Serializable::unserialize. Cependant, la
    fonction unserialize() permet encore d'utiliser R: ou r: pour créer des
    références à cette mémoire déjà libérée. Il est possible de mener une
    attaque d'utilisation de mémoire après libération et d'exécuter à
    distance du code arbitraire.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6832">CVE-2015-6832</a>
    <p>Un pointeur bancal dans la désérialisation d'objets ArrayObject.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6833">CVE-2015-6833</a>
    <p>Des fichiers extraits d'une archive peuvent être placés en dehors du
    répertoire de destination.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6834">CVE-2015-6834</a>
    <p>Une vulnérabilité d'utilisation de mémoire libération a été
    découverte dans la fonction unserialize(). Il est possible de créer une
    variable ZVAL et de la libérer avec Serializable::unserialize.
    Cependant, la fonction unserialize() permet encore d'utiliser R: ou r:
    pour créer des références à cette mémoire déjà libérée. Il est possible
    de mener une attaque d'utilisation de mémoire après libération et
    d'exécuter à distance du code arbitraire.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6836">CVE-2015-6836</a>
    <p>Une confusion de type survient dans serialize_fonction_call de SOAP
    due à une vérification insuffisante des champs d'en-tête. Dans la
    méthode __call de SoapClient, la vérification verify_soap_headers_array
    s'applique uniquement aux en-têtes récupérés par zend_parse_parameters ;
    le problème est que plusieurs lignes plus loin, soap_headers pourrait
    être mis à jour ou même remplacé par des valeurs des champs objet de
    __default_headers.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6837">CVE-2015-6837</a>
    <p>La classe XSLTProcessor ne réussit pas quelques vérifications sur
    l'entrée de la bibliothèque libxslt. L'appel de la fonction valuePop()
    est capable de renvoyer un pointeur NULL et php ne vérifie pas cela.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-6838">CVE-2015-6838</a>
    <p>La classe XSLTProcessor ne réussit pas quelques vérifications sur
    l'entrée de la bibliothèque libxslt. L'appel de la fonction valuePop()
    est capable de renvoyer un pointeur NULL et php ne vérifie pas cela.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-7803">CVE-2015-7803</a>
    <p>Un défaut déréférencement de pointeur NULL a été découvert dans la
    manière dont l'extension Phar de PHP analysait les archives Phar. Une
    archive contrefaite pour l'occasion pourrait provoquer le plantage
    de PHP.</p></li>

 <li><a href="https://security-tracker.debian.org/tracker/CVE-2015-7804">CVE-2015-7804</a>
    <p>Un défaut d'utilisation de pointeur non initialisé a été découvert
    dans la fonction phar_make_dirstream() de l'extension Phar de PHP. Un
    fichier phar contrefait pour l'occasion, de format ZIP, avec une entrée
    de répertoire avec un nom de fichier « /ZIP » pourrait provoquer le
    plantage d'une fonction d'application PHP.</p></li>
</ul>
</define-tag>

# do not modify the following line
#include "$(ENGLISHDIR)/security/2015/dla-341.data"
# $Id$
