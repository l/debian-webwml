#use wml::debian::template title="Utiliser CVS avec les paquets Debian"

#use wml::debian::translation-check translation="1.4" maintainer="Christian Couder"

<p>Ce court document est seulement destiné à donner une petite aide à
la conversion de paquets pour qu'ils puissent être gérés avec
CVS. Cela n'intéressera probablement que les quelques personnes qui ne
connaissent pas très bien CVS et la gestion des versions. Il y a aussi
un script dans <code>/usr/doc/cvs-buildpackage</code> appelé
<code>cvs-pkginit</code> (à la fois le script et la page de manuel
sont gzippées) qui affichera un résumé de ce HOWTO.

<p>Par exemple, pour convertir un paquet foo, version bar1, révision
Debian 3, essayez :
<pre>
% cvs-pkginit foo bar1 3
</pre>
et regardez le résumé.

<pre>
Oldenburg, 6/2/97                           Joey (joey@debian.org)
                                            / Martin Schulze   /
Mobile,                                     Manoj Srivastava
                                            srivasta@debian.org
</pre>

<p>Note : dans la discussion suivante, les éléments entre les signes
&lt; et &gt; doivent être remplacés suivant le contexte ; tout le reste
doit être pris littéralement. Par exemple, si vous parlez d'un paquet
dont la version originale est 2.1.82, alors « &lt;$version&gt; » doit
être remplacé par « 2.1.82 », et « upstream_version_&lt;$version | tr
. _&gt; » par « upstream_version_2_1_82 ».

<ol>
<li>Configurer CVS

<pre>
   $ CVSROOT=/où/va/se/trouver/votre/référentiel
   $ export CVSROOT
   $ cvs init
   $ mkdir $CVSROOT/debian
</pre>

   <p>Ceci permet de séparer vos paquets Debian de tout le reste
   dans votre référentiel CVS. Même si vous pensez que vous n'aurez
   pas besoin de CVS pour autre chose, c'est plus facile de ranger les
   choses correctement tout de suite plutôt que de devoir le faire
   ensuite (car c'est compliqué de déplacer des choses dans un
   référentiel).

   <p>Si plusieurs personnes doivent utiliser CVS, vous devez être
   sûr qu'elles peuvent modifier le référentiel avec CVS.  Choisissez
   un groupe (ou un ensemble de groupes) qui pourra avoir accès à une
   partie du référentiel, et mettez les permissions suivantes :

<pre>
   \# chgrp &lt;archive&gt; $CVSROOT/debian
   \# chmod g+ws    $CVSROOT/debian
</pre>

   <p>Cela garantit que les membres du groupe archive peuvent
   créer le référentiel. Maintenant vous devez faire en sorte que
   les bons groupes de personnes puissent modifier certaines parties
   du référentiel.

<pre>
   \# mkdir $CVSROOT/debian/&lt;paquet1&gt;
   \# chgrp &lt;group1&gt; $CVSROOT/debian/&lt;paquet1&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paquet1&gt;
   \# mkdir $CVSROOT/debian/&lt;paquet2&gt;
   \# chgrp &lt;group2&gt; $CVSROOT/debian/&lt;paquet2&gt;
   \# chmod g+ws     $CVSROOT/debian/&lt;paquet2&gt;
</pre>

   <p>En tant que simple utilisateur vous devriez aussi rendre votre
   répertoire CVS public, soit en utilisant <kbd>« -d
   /où/va/se/trouver/votre/référentiel »</kbd> soit en mettant dans
   votre fichier profile du code comme celui-ci :

<pre>
   $ CVSROOT=/où/va/se/trouver/votre/référentiel
   $ export CVSROOT
</pre>


<li>Utiliser les modules

<pre>
   \# cvs checkout CVSROOT
   \# cd CVSROOT
   \# vi modules
</pre>

   <p>Dans ce qui suit, &lt;paquet&gt; doit être le nom du paquet
   comme dans le fichier debian/changelog.

   <p>Ajoutez les lignes suivantes, la première étant essentielle, la
   seconde pouvant être dupliquée et s'expliquant toute seule :

<pre>
   modules   CVSROOT modules
   &lt;paquet&gt; debian/&lt;paquet&gt;
</pre>

<pre>
   \# cvs commit -m 'Definit les premiers modules'
</pre>


<li>Préparer l'utilisation de CVS

   <p>Ajoutez votre arborescence source avec les commandes suivantes
   (en supposant que vous l'avez déjà débianisée, et qu'il y a un fichier
   orig.tar.gz). Notez que les sources originales sont importées avec
   -ko (ce qui prend soin des fichiers binaires), mais pas les
   changements que nous faisons en local. Merci de noter que les
   numéros d'époque (nombre de secondes écoulées depuis 1970) sont
   ignorés lorsque l'on détermine l'étiquette CVS (ils sont
   utilisés d'habitude pour changer l'idée que se fait dpkg de l'ordre
   des paquets et ne sont généralement pas pertinents pour les
   étiquettes CVS).

   <p>Mettez vous dans le répertoire dans lequel vous avez votre
   arborescence des sources debianisées de développement, c'est ce que
   nous allons mettre sous CVS (on n'est pas encore sous CVSROOT,
   habituellement).

   <p>JE LE RÉPÈTE : Dans ce qui suit, &lt;paquet&gt; doit être le nom
   du paquet identique à celui qui se trouve dans le fichier
   debian/changelog.

<pre>
   $ cd /où/se/trouve/votre/arborescence/des/sources
   $ tar zvfx &lt;paquet&gt;_&lt;version&gt;.orig.tar.gz
   $ cd &lt;paquet&gt;_&lt;version&gt;.orig
   $ cvs import -ko -m 'Import des sources' \
       debian/&lt;paquet&gt; source-dist upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>Vous pouvez remplacer l'étiquette de branche source-dist par ce
   que vous voulez. (Le responsable de cvs-buildpackage utilise
   généralement la marque « upstream » (ce qui est un exemple de
   redondance ;-) ).

   <p>Si vous avez installé CVS en tant que root, et n'avez pas
   donné les droits d'écriture au groupe, vous devez créer
   $CVSROOT/debian/&lt;paquet&gt; en tant que root et modifier
   l'utilisateur et le groupe propriétaire dans le référentiel.
   L'import CVS affichera un avertissement disant qu'il ne peut pas
   créer le répertoire debian/&lt;paquet&gt;, mais ça ne pose pas de
   problèmes.

   <p>L'étape suivante est de récupérer l'ensemble de l'arborescence
   et d'y incorporer vos modifications.

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources
   $ cvs checkout &lt;paquet&gt;
</pre>

   <p>Si vous avez déjà créé une version debianisée mais n'avez pas
   utilisé CVS avant cela, vous pouvez lancer les commandes suivantes
   pour incorporer vos modifications. Après cela, vous devriez mettre
   une étiquette à cette version pour pouvoir la récupérer plus tard si
   nécessaire.

<pre>
   $ cd /où/se/trouve/votre/arborescence/des/sources/&lt;paquet&gt;-&lt;version&gt;
   $ diff -qrBbw . /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;/ | grep -v CVS
   $ FICHIERS_MODIFIES_LOCALEMENT="&lt;résultats de la commande ci-dessus&gt;"
   $ tar cf - $FICHIERS_MODIFIES_LOCALEMENT | \
       tar -C /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt; -xvpf -
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
</pre>

   <p>Merci de vérifier que le fichier debian/rules est bien exécutable,
   car de cette façon il sera aussi exécutable une fois exporté, et il
   n'y aura pas de problèmes au lancement de dpkg-buildpackage sur les
   sources exportées. En général, vérifiez que *tous* les fichiers ont
   les bonnes permissions avant de les ajouter au référentiel CVS.

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
   $ cvs add debian &lt;tout autre fichier à ajouter&gt;
</pre>

   <p>Merci aussi de noter que vous devez ajouter à la main tout autre
   fichier qui doit se trouver dans le référentiel, en particulier
   tous les fichiers du sous-répertoire debian. Et merci aussi de
   noter que la commande cvs add ne fonctionne pas de façon récursive,
   vous devez donc ajouter à la main tout sous-répertoire que vous
   avez. (cd debian; cvs add *)

   <p>Une bonne chose à savoir est que la commande « cvs update » vous
   montrera l'état de tous les fichiers du répertoire.

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
   $ cvs update
</pre>

   <p>Le résultat ressemble à ceci :
<pre>
       cvs update: Updating .
       M Makefile
       cvs update: Updating debian
       A rules
       ? exemple1
</pre>
   M signifie modifié (doit être committé), A signifie ajouté (doit
   être committé), ? signifie que CVS ne connaît pas ce fichier (doit
   peut-être être ajouté). Quand vous êtes satisfaits, que rien n'a
   été oublié, et que tous les fichiers ont les bonnes permissions,
   vous êtes paré à committer :

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
   $ cvs commit -m 'Modifications relatives à Debian'
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; .
</pre>

   <p>La nouvelle arborescence des sources se trouvera dans un
   répertoire qui ne contient pas le numéro de version.  Ce n'est pas
   un problème, comme nous le verrons plus tard.

   <p>Si au contraire vous créez le répertoire à partir de zéro
   (peut-être plus simple, bien que moins automatisé) :

<pre>
   $ mkdir debian
</pre>

   <p>Créez tous les fichiers Debian nécessaires et ajoutez-les dans
   l'outil de gestion des sources :

<pre>
   $ cvs add debian
   $ cd debian
   $ cvs add *
</pre>

   <p>Après cela, le prochain commit inclura tous vos fichiers :

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
   $ cvs commit -m &lt;un message&gt;
</pre>

<li>Préparer une nouvelle version

   <p>Avant de lancer les commandes Debian qui construiront un paquet,
   vous devez récupérer le module sans les autres sous-répertoires
   CVS.  Ceci est fait par la commande « export ».  Mais tout d'abord
	 vous devez enregistrer dans le référentiel CVS toutes vos
	 modifications et y apposer une marque contenant le numéro de
	 version.

<pre>
   $ cvs commit -m &lt;message&gt;
   $ cvs tag debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt;
</pre>


<li>Faire une nouvelle version

   <p>Vous pouvez soit utiliser la mécanique de cvs-buildpackage
	 (ce qui est la solution recommandée), soit un export manuel. Tout
	 d'abord testez cvs-buildpackage à blanc (soyez certain que les
	 étiquettes correspondent) comme ceci (vous devez avoir configuré
   /etc/cvsdeb.conf) :

<pre>
   $ cvs-buildpackage -d -n -rsudo
</pre>

   <p>Ensuite lancez-le pour de bon, en supposant que sudo est un
   programme avec lequel vous pouvez avoir un accès root, avec :

<pre>
   $ cvs-buildpackage -rsudo
</pre>

   <p>Ou, pour faire tout à la main :

   <p>Récupérez le paquet.

<pre>
   $ cvs export -d &lt;paquet&gt;-&lt;version&gt; \
         -r debian_version_&lt;version|tr . _&gt;-&lt;debian-revision|tr . _&gt; \
             &lt;paquet&gt;
</pre>

   <p>Maintenant vous pouvez continuer avec un simple mécanisme d'export
	 pour faire de nouvelles versions.


<hr>

   <p>Vous avez fini ! Bravo ! Voici ce que vous pouvez
	 faire sur votre arborescence de sources :

<hr>

<li>Supprimer ou renommer un fichier

   <p>La façon normale de déplacer un fichier est de copier ANCIEN
	 vers NOUVEAU, et ensuite de lancer les commandes CVS normales pour
	 supprimer ANCIEN du référentiel, et d'y ajouter NOUVEAU.  (À la
	 fois ANCIEN et NOUVEAU peuvent contenir des chemins relatifs, par
	 exemple « foo/bar.c »).

<pre>
   $ mv ANCIEN NOUVEAU
   $ cvs remove ANCIEN
   $ cvs add NOUVEAU
   $ cvs commit -m "ANCIEN renommé en NOUVEAU" ANCIEN NOUVEAU
</pre>

   <p>Ceci est la façon la plus simple de déplacer un fichier, elle
	 n'est pas sujette à erreurs, et elle préserve l'historique de ce
	 qui a été fait.  Notez que pour accéder à l'historique du fichier
	 vous devez spécifier l'ancien ou le nouveau nom, suivant la portion
	 de l'historique à laquelle vous voulez accéder.
	 Par exemple, « cvs log ANCIEN » donne l'historique jusqu'au moment
	 où le fichier a été renommé.


<li>Mettre à jour un module avec la commande « import »

   <p>Quand une nouvelle version des sources est disponible, vous
	 l'importez dans le référentiel avec la même commande « import » que
	 vous utilisez pour installer le référentiel la première fois.  La
	 seule différence est que vous spécifiez une étiquette de version
	 différente cette fois-ci, et un message différent.

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;nouveau répertoire des sources&gt;
   $ cvs import -m 'Import d'une nouvelle version' debian/&lt;paquet&gt; source-dist \
         upstream_version_&lt;version|tr . _&gt;
</pre>

   <p>Maintenant, nous devons incorporer dans la nouvelle version les
   modifications que nous avons faites. La meilleure façon de faire
   est de mettre de côté notre copie de travail (basée sur l'ancien
   code source original), et de récupérer une nouvelle copie du paquet
   *incorporant* les modifications faites dans les sources
   originales. Voici la façon de procéder :

<pre>
   $ cd /où/va/se/trouver/votre/arborescence/des/sources
   $ mv &lt;paquet&gt; &lt;paquet&gt;.old
   $ cvs checkout -jsource-dist:yesterday -jsource-dist &lt;paquet&gt;
   $ cd /où/va/se/trouver/votre/arborescence/des/sources/&lt;paquet&gt;
</pre>

   <p>La commande ci-dessus va récupérer la dernière révision du
   &lt;paquet&gt;, en fusionnant les modifications faites sur la
   branche originale « source-dist » depuis hier dans la copie de
   travail.  Si un conflict se produit pendant la fusion, il doit être
   résolu de la façon normale.  Ensuite les fichiers modifiés peuvent
   être committés.

   <p>L'utilisation d'une date, comme suggérée plus haut, suppose que
   vous n'importiez pas plus d'une version d'un produit par jour. Si
   c'est votre cas, vous pouvez toujours utiliser à la place quelque
   chose comme ceci :

<pre>
   $ cvs checkout -jupstream_version_&lt;oldversion|tr . _&gt; \
                  -jupstream_version_&lt;newversion|tr . _&gt; &lt;paquet&gt;
</pre>

   <p>Dans le cas courant, les deux commandes ci-dessus sont équivalentes.

   <p>Pour les fichiers qui n'ont pas été modifiés en local, la
   révision qui vient d'être créée devient la révision principale («
   head »).

   <p>Donc, vérifiez bien que tous les fichiers ont été correctement
   mis à jour. En particulier, n'oubliez pas de modifier le fichier
   debian/changelog !

   <p>Quand vous êtes satisfait, vous pouvez supprimer la vieille
   version du répertoire de travail. Soyez bien certain que vous
   supprimez le bon répertoire !
   
<pre>
   $ rm -rf ../&lt;paquet&gt;.old
</pre>

   <p>Maintenant vous êtes prêt à créer une nouvelle version.

<li>Supprimer l'arborescence source pour préserver de l'espace disque

   <p>Pour supprimer l'arborescence des sources courante il vous est
   conseillé de ne pas utiliser rm -rf mais d'utiliser la commande CVS
   qui vérifie s'il y a des modifications en local qui n'ont pas été
   committées.

<pre>
   $ cd /où/se/trouve/votre/arborescence/des/sources
   $ cvs release -d &lt;paquet&gt; 
</pre>


<li>Glossaire

<pre>
   Étiquettes    noms symboliques pour les révisions ( <i>« tags »</i> )
   Référentiel   archive des fichiers sources ( <i>« repository »</i> )
</pre>

<li>Appendice

 <p>A : CONVENTIONS POUR LES MARQUES CVS

<pre>
 |====================================================================================|
 | Version originale       | &lt;version&gt;                                          |
 | Révision Debian         | &lt;revision&gt;                                         |
 | Nom de fichier original | paquet_&lt;version&gt;.orig.tar.gz                       |
 | Nom de paquet Debian    | paquet_&lt;version&gt;-&lt;revision&gt;_&lt;arch&gt;.deb |
 | Étiquette CVS originale | upstream_version_&lt;version | tr . _&gt;                |
 | Étiquette CVS courante  | debian_version_&lt;revision | tr . _&gt;                 |
 |====================================================================================|
</pre>

 <p>Exemples :
<pre>
 |===========================================================================|
 |                         | sources originales     | paquet Debian          |
 |===========================================================================|
 | Version originale       | 2.76                   | 3.38                   |
 | Révision Debian         | 1.2                    |                        |
 | Nom de fichier original | make_2.76.orig.tar.gz  |                        |
 | Nom de paquet Debian    | make_2.76-1.2_i386.deb | kpkg_3.38_i386.deb     |
 | Étiquette CVS originale | upstream_version_2_76  | upstream_version_3_38  |
 | Étiquette CVS courante  | debian_version_2_76-1_2| debian_version_3_38    |
 |===========================================================================|
</pre>

 <p>Notez que les numéros d'époque sont ignorés pour déterminer le nom
 de l'étiquette CVS (ils sont généralement utilisés pour modifier l'idée
 que se fait dpkg de l'ordre des paquets, et ne sont généralement pas
 pertinents pour les marques CVS).

</ol>
