#use wml::debian::template title="Debian GNU/Hurd &ndash; Sviluppo" NOHEADER="yes"
#include "$(ENGLISHDIR)/ports/hurd/menu.inc"
#use wml::debian::translation-check translation="1.41" maintainer="Luca Monducci"

<h1>Debian GNU/Hurd</h1>

<h2>Sviluppo della distribuzione</h2>

<h3>Dischi di avvio</h3>

<p>In questo momento non si sta lavorando su dischi per l'avvio nativo,
comunque si stanno posando le loro fondamenta il che, qualche volta, comporta
il port di singoli pacchetti. Se si vuole contribuire, si aiuti il progetto
debian-installer e assicurarsi che i suoi componenti funzionino con Hurd.</p>

<h3>Port dei pacchetti Debian</h3>

<p>Se si desidera contribuire al port Debian GNU/Hurd è necessario aver
confidenza con il sistema di pacchettizzazione Debian. Una volta fatto questo
leggendo la documentazione disponibile e visitando <a href="$(HOME)/devel/">\
l'angolo degli sviluppatori</a> si dovrebbe essere in grado estrarre i
pacchetti sorgente Debian e creare un pacchetto binario Debian. Per le persone
più pigre è disponibile un corso rapido:</p>

<h3>Recuperare i sorgenti e creare i pacchetti</h3>

<p>L'estrazione di un pacchetto sorgente Debian richiede il file
<code>pacchetto_versione.dsc</code> e i file che sono elncati al suo
interno. La directory di compilazione Debian viene creata con il comando
<code>dpkg-source -x pacchetto_versione.dsc</code>.</p>

<p>La costruzione del pacchetto avviene nella directory di compilazione
Debian <code>pacchetto-versione</code> appena creata con tramite il comando
<code>dpkg-buildpackage -B -rsudo "-mMyName &lt;MyEmail&gt;"</code>. Al
posto di <code>-B</code> si può usare <code>-b</code> per compilare le
parti indipendenti dall'architettura del pacchetto. &Egrave; possibile
usare <code>-rfakeroot</code> al posto di <code>-rsudo</code> per usare
il pacchetto fakeroot. Si può tralasciare <code>-r</code> se si compila
da utente root. Infine è possibile aggiungere <code>-uc</code> per evitare di
firmare il pacchetto con la chiave GPG.</p>

<h3>Scegliere un pacchetto</h3>

<p>Quale pacchetto richiede del lavoro? Ogni pacchetto che ancora non è
stato portato e che deve essere portato. Questi cambiano continuamente
quindi o si concentra il lavoro prima sui pacchetti con molte dipendenze
inverse, che possono essere trovati nel grafico (aggiornato quotidianamente)
delle dipendenze tra pacchetti <url "http://people.debian.org/~sthibault/graph-radial.pdf">
o nell'elenco dei più ricercati <url "http://people.debian.org/~sthibault/graph-total-top.txt">,,
oppure si prende un pacchetto a caso oppure si controllano attentamente
i log del processo autobuilder sulla lista di messaggi debian-hurd-build-logs
oppure da <url "http://people.debian.org/~sthibault/failed_packages.txt.gz"/>.
</p>
<p>
Inoltre, controllare su
<url "https://alioth.debian.org/tracker/?atid=410472&amp;group_id=30628&amp;func=browse"/>,
<url "https://alioth.debian.org/tracker/?atid=411594&amp;group_id=30628&amp;func=browse"/>
e BTS che il lavoro non sia già stato fatto.
</p>


<h4>Pacchetto che non devono essere portati</h4>

<p>Alcuni di questi pacchetti, o delle loro parti, potrebbero essere
portabili in futuro ma almeno per ora sono considerati non-portabili.</p>

<ul>
    <li>
	<code>base/update</code>, perché Hurd non necessita di un demone di
	aggiornamento (i filesystem si sincronizzano da soli). Per modificare
	l'intervallo di sincronizzazione si può usare <code>fsysopts</code>
	e regolare l'opzione <code>--sync</code>. Si possono impostare valori
	diversi dell'intervallo di sincronizzazione per ogni filesystem! Per
	farlo manualmente si usi l'utilità
	<a href="hurd-doc-utils#syncfs"><code>syncfs</code></a>.</li>

    <li>
	<code>base/makedev</code>, perché Hurd dispone della propria versione
	di questo script. Il pacchetto sorgente Debian contiene solo la
	versione specifica per Linux.</li>

    <li>
	<code>base/ld.so</code>, perché Hurd non usa il linker fornito insieme
	alla libreria C GNU.</li>

    <li>
	<code>base/modconf</code> e <code>base/modutils</code>, perché i
	moduli sono un concetto specifico di Linux.</li>

    <li>
	<code>base/netbase</code>, perché le parti fornite da questo pacchetto
	non disponibili sono altamente specifiche del kernel Linux. Al suo
	posto Hurd usa <code>inetutils</code>.</li>

    <li>
	<code>base/pcmcia-cs</code>, perché Hurd non ha nessun tipo supporto
	per PCMCIA (e se lo avrà probabilmente questo pacchetto risulterà
	specifico di Linux).</li>

    <li>
	<code>base/procps</code>, perché il codice è specifico per il
	filesystem proc di Linux.</li>

    <li>
	<code>base/ppp</code> e <code>base/pppconfig</code>, perché Hurd non ha
	nussun supporto per PPP (e se lo avrà probabilmente questo pacchetto
	risulterà specifico di Linux).</li>

    <li>
	<code>base/setserial</code>, perché è specifico per il kernel Linux.
	Comunque con il port dei driver a caratteri di Linux su GNU Mach saremo
	in grado di usarlo.</li>
</ul>

<h3><a name="porting_issues">Problemi generali del port</a></h3>

<p>
<a href="http://www.gnu.org/software/hurd/hurd/porting/guidelines.html">Un
elenco dei problemi più comuni</a> è disponibile sul sito web originale.
Le seguenti problematiche sono specifiche di Debian.</p>

<ul>
    <li><code>Dipendenze di libc6 non funzionanti</code>

    <p>
    Alcuni pacchetti usano erroneamente una dipendeza da
    <code>libc6-dev</code>. Questo è sbagliato perché <code>libc6</code>
    è specifica di alcune delle architetture di GNU/Linux. Il pacchetto
    corrispondente per GNU è <code>libc0.3-dev</code> ma su altri Sistemi
    Operativi potrebbe essere diverso. È possibile trovare questo errore
    nel file <code>debian/control</code> del sorgente del pacchetto.
    Le soluzioni tipiche sono includere il riconoscimento del SO tramite
    <code>dpkg-architecture</code> e specificare il soname, o meglio usare
    un OR logico. Per esempio: <code>libc6-dev | libc6.1-dev | libc0.3-dev
    | libc0.1-dev | libc-dev</code>. Il pacchetto virtuale <code>libc-dev</code>
    funziona con qualsiasi soname ma deve essere usato solo come ultima
    risorsa.</p></li>
</ul>
