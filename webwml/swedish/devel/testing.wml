#use wml::debian::template title="Debians uttestningsutgåva" BARETITLE=true
#use wml::debian::translation-check translation="1.9"
#include "$(ENGLISHDIR)/releases/info"

<p>
För grundläggande information om uttestningsutgåvan riktad till användare,
se <a href="$(DOC)/FAQ/ch-ftparchives#s-testing">Debians frågor och svar</a>.
</p>

<p>
Det är viktigt för både vanliga användare och utvecklare av uttestningsutgåvan
att notera att säkerhetsuppdateringar för uttestningsutgåvan <strong>inte
hanteras av säkerhetsgruppen</strong>.
För ytterligare information, se
<a href="../security/faq#testing">säkerhetsgruppens frågor och svar</a>.
</p>

<p>
Denna sida täcker huvudsakligen aspekter hos uttestningsutgåvan
som är viktiga för Debianutvecklare.
</p>

<h2>Hur uttestningsutgåvan fungerar</h2>

<p>
Uttestningsutgåvan (&rdquo;<span lang="en">testing</span>&rdquo;)
genereras automatiskt.
Den skapas från den instabila utgåvan via ett antal skript vilka försöker
flytta över paket som det är rimligt att anta att de saknar allvarliga fel.
Detta görs på ett sätt som ser till att beroenden hos andra paket alltid
uppfyllda.
</p>

<p>
Ett paket (i en given version) kommer att flyttas över till uttestningsutgåvan
när det uppfyller samtliga följande kriterier:
</p>

<ol>
 <li>
  Det måste ha funnits i den instabila utgåvan under minst 10, 5 eller 2
  dagar, beroende på hur brådskande det insända paketet var;
 </li>

 <li>
  Den måste ha kompilerats och àjourförts för samtliga arkitekturer det
  tidigare har kompilerats för i den instabila utgåvan;
 </li>

 <li>
  Den måste ha färre, eller lika många, kritiska fel jämfört med den
  nuvarande version i uttestningsutgåvan (<a href="#faq">se nedan</a> för
  ytterligare information);
 </li>

 <li>
  Alla dess beroenden måste <em>antingen</em> uppfyllas av paket som redan
  finns i uttestningsutgåvan, <em>eller</em> uppfyllas av den grupp paket
  som skulle installeras samtidigt;
 </li>

 <li>
  Steget att installera paketet i uttestningsutgåvan får inte resultera i att
  andra paket som redan finns där slutar fungera.
  (<a href="#faq">Se nedan</a> för ytterligare information.)
 </li>
</ol>

<p>
Ett paket som uppfyller de tre första punkterna ovan kallas en
<q lang="en">Valid Candidate</q> (<em>giltig kandidat</em>).
</p>

<p>
Uppdateringsskripten visar när varje enskilt paket kan flyttas över från den
instabila utgåvan till uttestningsutgåvan.
Dess utdata består av två delar:
</p>

<ul>
 <li>
  <a href="http://ftp-master.debian.org/testing/update_excuses.html">
  Uppdateringsursäkterna</a>
  [<a
href="http://ftp-master.debian.org/testing/update_excuses.html.gz">gzippat</a>]:
  förtecknar samtliga kandidatpakets versioner och deras generella status på
  väg in i uttestningsutgåvan; denna är något kortare och mer lättläst än
 </li>

 <li>
  <a href="http://ftp-master.debian.org/testing/update_output.txt">
  Uppdateringsutdatat</a>
  [<a href="http://ftp-master.debian.org/testing/update_output.txt.gz">gzippat</a>]:
  den kompletta, något råa utdatan från skripten för uttestningsutgåvan när
  de rekurserar genom kandidaterna
 </li>
</ul>

<h2><a name="faq" id="faq">Ofta ställda/besvarade frågor</a></h2>

<h3><q>Vad är utgivningskritiska fel, och hur räknas de?</q></h3>

<p>
Alla fel som har en högre allvarlighetsgrad anses vara
<em><a href="http://bugs.debian.org/release-critical/">utgivningskritiskt</a></em>
(<em lang="en">release-critical</em>).
För närvarande gäller detta graderna
<strong lang="en">critical</strong> (kritiskt),
<strong lang="en">grave</strong> (gravt) och
<strong lang="en">serious</strong> (allvarligt).
</p>

<p>
Sådana fel anses ha betydelse för huruvida paketet kan ges ut i en stabil
utgåva av Debian: normalt sett kommer inte ett paket som har öppna kritiska
fel mot sig komma in i uttestningsutgåvan, och som en följd därav kommer det
inte heller in i den stabila utgåvan.
</p>

<p>
Så antalet fel i uttestningutgåvan för ett paket anses vara ungefär antalet
felrapporter vid föregående punkt på versionen i uttestningsutgåvan var
densamma som i den instabila utgåvan.
Fel som markerats med <strong><current_release_name></strong> eller
<strong><current_testing_name></strong> kommer inte att räknas.
Fel med märket <strong>sid</strong> kommer däremot att räknas.
</p>

<h3><q>Hur kan installation av ett paket i uttestningsutgåvan få andra paket
att sluta fungera?</q></h3>

<p>
Distributionsarkiven är så strukturerade att de endast kan hantera en
version av ett paket, där paket definieras av sitt namn.
Så när källkodspaketet <tt>acmefoo</tt> installeras i uttestningsutgåvan,
tillsammans med dess binärpaket <tt>acme-foo-bin</tt>,
<tt>acme-bar-bin</tt>, <tt>libacme-foo1</tt> och <tt>libacme-foo-dev</tt>
tas den gamla versionen bort.
</p>

<p>
Den gamla versionen av paketet kan dock ha erhållit ett paket med ett
gammalt so-namn för ett paket, till exempel <tt>libacme-foo0</tt>.
Om man tar bort det gamla <tt>acmefoo</tt> försvinner <tt>libacme-foo0</tt>,
vilket gör att de paket som beror på det slutar att fungera.
</p>

<p>
Uppenbarligen påverkar detta huvudsakligen paket som erhåller en föränderlig
uppsättning paket i olika versioner (vilket i sin tur huvudsakligen gäller
bibliotek).
Det kan dock även påverka paket med versionsberoenden som har deklarerats
med operatorerna ==, &lt;= eller &lt;&lt;.
</p>

<h3><q>Jag förstår fortfarande inte! Skripten för uttestningsutgåvan säger
att paketet är en giltig kandidat, men det har fortfarande inte kommit
med.</q></h3>

<p>
Detta händer oftast när paketet, direkt eller indirekt, skulle få ett annat
paket att sluta fungera.
</p>

<p>
Kom ihåg att tänka på ditt pakets beroenden.
Säg att ditt paket beror på libtool, eller libltdl<var>X</var>.
Ditt paket kommer inte in i uttestningsutgåvan förrän rätt version av
libtool är redo att komma in.
</p>

<p>
Detta i sin tur kommer inte att ske förrän installationen av libtool kan ske
utan att andra saker i uttestningsutgåvan går sönder.
Med andra ord, tills alla paket som beror på libltdl<var>Y</var> (där
<var>Y</var> är en tidigare version) har kompilerats om och deras kritiska
fel har försvunnit, osv, kommer inget av dessa paket att kommer med i
uttestningsutgåvan.
</p>

<p>
Det är här
<a href="http://ftp-master.debian.org/testing/update_output.txt">
textutdatat</a>
[<a href="http://ftp-master.debian.org/testing/update_output.txt.gz">gzippat</a>]
är användbart: de ger tips (om än korthuggna) om vilka paket som kommer
sluta fungera om en giltig kandidat kommer in i uttestningsutgåvan.
</p>

<h3><q>Varför är det ibland svårt att få paket med <kbd>Architecture:
all</kbd> in i uttestningsutgåvan?</q></h3>

<p>
Om <kbd>Architecture: all</kbd>-paketet ska kunna installeras måste det vara
möjligt att uppfylla dess beroenden på <strong>samtliga</strong>
arkitekturer.
Om den beror på ett specifikt paket som bara kompilerar på en delmängd av
Debians arkitekturer kan inte så ske.
</p>

<p>
Uttestningsutgåvan kommer dock för närvarande att ignorera
<kbd>Architecture: all</kbd> vad gäller pakets installerbarhet på
icke-i386-arkitekturer.
(&rdquo;Det är ett fult hack och jag är inte stolt över att ha utfört det,
men...&rdquo; --aj)
</p>

<h3><q>Finns det undantag? Jag är säker på att <tt>acmefoo</tt> just kom in
i uttestningsutgåvan utan att det uppfyller alla kraven.</q></h3>

<p>
Den ansvarige för utgåvorna kan åsidosätta reglerna på två sätt:
</p>

<ul>
 <li>
  Han kan bestämma att de problem som uppstår när nya paket installeras gör
  situationen bättre, inte sämre, och låta det komma in tillsammans med sin
  flottilj av beroende paket.
 </li>

 <li>
  Han kan även manuellt ta bort paket från uttestningsutgåvan som skulle
  sluta fungera, så att nya paket kan installeras.
 </li>
</ul>

<h3><q>Kan du ge ett riktigt, icke-trivialt exempel?</q></h3>

<p>
Här är ett: när källkodspaketet <tt>apache</tt> installeras i
uttestningsutgåvan tillsammans med sina binärpaket <tt>apache</tt>,
<tt>apache-common</tt>, <tt>apache-dev</tt> och <tt>apache-doc</tt> tas den
gamla versionen bort.
</p>

<p>
Alla Apachemoduler beror dock på <code>apache-common (&gt;=
<var>något</var>), apache-common (&lt;&lt; <var>något</var>)</code>, så
denna ändring förstör för samtliga dessa beroenden.
Därför måste samtliga Apachemoduler kompileras om mot den nya versionen av
Apache för att uttestningsutgåvan ska uppdateras.
</p>

<p>
Låt oss gå in på lite mer detaljer om detta: när alla moduler har uppdateras
i den instabila utgåvan så att de fungerar med Apache prövar
uttestningsskripten <tt>apache-common</tt> och upptäcker att det förstör
alla Apachemoduler eftersom de har
<code>Depends: apache-common (&lt;&lt; <var>nuvarande version</var>)</code>,
och prövar sedan <tt>libapache-<var>foo</var></tt> för att få reda på att
den inte kan installeras eftersom den har <code>Depends: apache-common
(&gt;= <var>den nya versionen</var>)</code>.
</p>

<p>
Senare kommer de dock att använda en annan sorts logik (ibland på grund av
manuellt ingripande): den kommer att ignorera det faktum att
<tt>apache-common</tt> förstör saker och fortsätta med det som fungerar; om
det fortfarande inte fungerar när vi gjort vad vi kan, så synd, men det
kanske <strong>kommer att</strong> fungera.
Senare kommer alla slumpmässiga <tt>libapache-<var>foo</var></tt>-paket att
prövas och skriptet ser att de faktiskt fungerar.
</p>

<p>
När allt har prövats kontrolleras hur många paket har förstörts, beräknar om
det är bättre eller sämre än hur det var tidigare och antingen accepterar
allt eller struntar i det.
Du ser detta i <tt>update_output.txt</tt> på raderna med
&rdquo;<code>recur:</code>&rdquo;.
</p>

<p>
Till exempel:
</p>

<pre>
     	  recur: [<var>foo</var> <var>bar</var>] <var>baz</var>
</pre>

<p>
betyder i grund och botten att <q>efter att redan ha upptäckt att
<var>foo</var> och <var>bar</var> gör situationen bättre prövar jag nu
<var>baz</var>, även om det förstör saker för att se vad som händer</q>.
Raderna i <tt>update_output.txt</tt> som börjar med
&rdquo;<code>accepted</code>&rdquo; indikerar att situationen verkar bli
bättre, och &rdquo;<code>skipped</code>&rdquo;-rader gör situationen värre.
</p>

<h3><q><tt>update_output.txt</tt>-filen är helt oläslig!</q></h3>

<p>Det är inte en fråga. ;-)</p>

<p>Låt oss ta ett exempel:</p>

<pre>
 skipped: cln (0) (150+4)
     got: 167+0: a-40:a-33:h-49:i-45
     * i386: ginac-cint, libginac-dev
</pre>

<p>
Detta betyder att om <tt>cln</tt> tas med i uttestningsutgåvan kommer
<tt>ginac-cint</tt> och <tt>libginac-dev</tt> inte att kunna installeras på
i386 i uttestningsutgåvan.
Observera att arkitekturerna kontrolleras i bokstavsordning och att bara
problem för den första arkitekturen med problem visas &ndash; det är därför
Alphaproblem förekommer så ofta.
</p>

<p>
Raden som börjar på &rdquo;got&rdquo; innehåller antalet problem i
uttestningsutgåvan för de olika arkitekturerna (fram till den första
arkitekturen där ett fel upptäcktes &ndash; se ovan).
&rdquo;i-45&rdquo; betyder att om <tt>cln</tt> tas in i uttestningsutgåvan
skulle det finnas 45 oinstallerbara paket på i386.
Några av posterna ovanför och nedanför <tt>cln</tt> visar att det fanns 43
oinstallerbara paket i uttestningsutgåvan för i386 vid den tidpunkten.
</p>

<p>
Raden &rdquo;skipped: cln (0) (150+4)&rdquo; betyder att det fortfarande
finns 150 paket att gå genom efter detta paket innan denna kontroll av
samtliga paket är färdig, och att fyra paket redan hittats som skripten inte
planerar att uppgradera eftersom de skulle förstöra beroenden.
&rdquo;(0)&rdquo; är irrelevant, så den kan du lugnt strunta i.
</p>

<p>
Observera att alla paket testas flera gånger när uttestningsskripten körs.
</p>

<p><i>Jules Bean samlade ursprungligen de ofta ställa frågorna och
svaren.</i></p>

<h2>Ytterligare information</h2>

<p>
Skripten upptäcker även fel som kan beskrivas som
hemskt-allvarliga-borde-inte-finnas-här-alls.
Alla dessa är &rdquo;bry dig inte ens om att fundera på att ta med det här
paketet&rdquo;-överträdelser, vilka förhoppningsvis alla försvinner under
frysningen och &rdquo;<span lang="en">bugsquashing</span>&rdquo;-dagarna och så
vidare.
<br>
Det finns en lista över alla sådana fel för alla tre utgåvorna:

<ul>
  <li><a href="http://ftp-master.debian.org/testing/testing_probs.html">problem  med uttestningsutgåvan</a></li>
  <li><a href="http://ftp-master.debian.org/testing/unstable_probs.html">problem med den instabila utgåvan</a></li>
  <li><a href="http://ftp-master.debian.org/testing/stable_probs.html">problem med den stabila utgåvan</a></li>
</ul>

<p>
Dessutom finns det statistik för binärpaket som inte är à jour för
<a href="http://ftp-master.debian.org/testing/testing_outdate.txt">testning</a>,
<a href="http://ftp-master.debian.org/testing/stable_outdate.txt">stabila</a>
samt
<a href="http://ftp-master.debian.org/testing/unstable_outdate.txt">instabila</a>.
</p>

<p>
Det kan vara intressant att läsa ett äldre
<a href="http://lists.debian.org/debian-devel-0008/msg00906.html">förklarande
e-brev</a>.
Dess enda stora fel är att den inte tar paketpoolerna i beaktning, då dessa
implementerades av James Troup efter att brevet skrevs.
</p>

<p>
Koden för uttestningsutgåvan är tillgänglig via anonym CVS från
<a href="http://cvs.debian.org/testing/?cvsroot=dak">cvs.debian.org</a>.
Sätt din <code>CVSROOT</code> till
<kbd>:pserver:anonymous@cvs.debian.org:/cvs/dak</kbd>, modulen
<kbd>testing</kbd>.
</p>

<p>
<i>Anthony Towns får äran för att ha implementerat uttestningsutgåvan.</i>
</p>
