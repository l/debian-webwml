#use wml::debian::template title="Nyckelbyte"
#use wml::debian::translation-check translation="1.48" maxdelta="1"

<p>
I
<a href="$(HOME)/security/2008/dsa-1571">Debians säkerhetsbulletin 1571</a>
avslöjade Debians säkerhetsgrupp en sårbarhet i slumptalsgeneratorn som
användes av OpenSSL på Debian och dess avledda versioner.
Som en följd av denna sårbarhet förekommer vissa kryptografiska nycklar
mycket oftare än de skulle, så att en angripare kunde gissa nyckeln med
ett &rdquo;brute force&rdquo;-angrepp givet grundläggande kunskap om
systemet.
Detta påverkar speciellt användningen av krypteringsnycklar i OpenSSH,
OpenVPN och SSL-certifikat.
</p>

<p>
Denna sida beskriver hur du utför en nyckelbytesprocess för paket vars
nycklar påverkas av OpenSSL-sårbarheten.
</p>

<ul>
<li><b><a href="#openssh">OpenSSH</a></b></li>
<li><b><a href="#openssl">OpenSSL: Allmänna instruktioner för att generera PEM-nycklar</a></b></li>

<li><a href="#bincimap">bincimap</a></li>
<li><a href="#boxbackup">boxbackup</a></li>
<li><a href="#cryptsetup">cryptsetup</a></li>
<li><a href="#dropbear">dropbear</a></li>
<li><a href="#ekg">ekg</a></li>
<li><a href="#ftpd-ssl">ftpd-ssl</a></li>
<li><a href="#gforge">gforge</a></li>
<li><a href="#kerberos">MIT Kerberos (krb5)</a></li>
<li><a href="#nessus">Nessus</a></li>
<li><a href="#openswan">OpenSWAN / StrongSWAN</a></li>
<li><a href="#openvpn">OpenVPN</a></li>
<li><a href="#proftpd">Proftpd</a></li>
<li><a href="#puppet">puppet</a></li>
<li><a href="#sendmail">sendmail</a></li>
<li><a href="#ssl-cert">ssl-cert</a></li>
<li><a href="#telnetd-ssl">telnetd-ssl</a></li>
<li><a href="#tinc">tinc</a></li>
<li><a href="#tor">tor</a></li>
<li><a href="#xrdp">xrdp</a></li>
</ul>

<p>
Det finns ytterligare programvaror som använder kryptografiska nycklar men
som <a href="notvuln">inte påverkas</a> eftersom OpenSSL inte använts för
att generera eller kommunicera dess nycklar.
</p>

<ul>
<li><a href="notvuln#ckermit">ckermit</a></li>
<li><a href="notvuln#gnupg">GnuPG</a></li>
<li><a href="notvuln#iceweasel">Iceweasel</a></li>
<li><a href="notvuln#mysql">MySQL</a></li>
</ul>

<p>
För instruktioner om hur du byter nycklar för annan programvara kan du se
användarinsänd information på <url http://wiki.debian.org/SSLkeys>.
</p>

<h1><a name="openssh">OpenSSH</a></h1>

<p>
Ett uppdaterat paket har släppts genom
<a href="$(HOME)/security/2008/dsa-1576">DSA-1576</a>,
vilket förenklar uppdatering av nycklar.
</p>

<p>1. Installera säkerhetsuppdateringarna i DSA-1576</p>

<p>
Denna uppdatering innehåller ett beroende på openssl-uppdateringen och
kommer automatiskt installera en rättad version av libssl0.9.8-paketet, samt
det nya paketet openssh-blacklist.
</p>

<p>
När uppdateringen har installerats kommer svaga användarnycklar automatiskt
att avvisas när så är möjligt (även om de inte alltid kan identifieras).
Om du använder sådana nycklar för autentisering av användare kommer de
omedelbart att sluta fungera och måste ersättas (se steg 3).
</p>

<p>
OpenSSH-värdnycklar kan omskapas automatiskt när
OpenSSH-säkerhetsuppdateringen installeras.
Uppdateringen kommer be dig om bekräftelse innan den gör det.
</p>

<p>2. Uppdatera OpenSSH:s known_hosts-filer</p>

<p>
När värdnyckeln omskapas kommer det att göra så att en varning visas när du
ansluter till systemet med SSH fram till att värdnyckeln uppdaterats i filen
known_hosts på klienten.
Varningen ser ut som följer:
</p>

<pre lang="en">
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that the RSA host key has just been changed.
</pre>


<p>
I det här fallet har nyckeln helt enkelt ändrats, och du bör uppdatera
motsvarande known_hosts-fil, enligt beskrivningen i varningsmeddelandet.
</p>

<p>
Vi rekommenderar att du använder en betrodd kanal för att hämta
servernyckeln.
Nyckeln finns i filen /etc/ssh/ssh_host_rsa_key.pub på severn; dess
fingeravtryck kan skrivas ut med kommandot:
</p>

      <p>ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub</p>

<p>
Förutom användarspecifika known_hosts-filer kan det finnas en systemglobal
fil som heter /etc/ssh/ssh_known_hosts.
Denna fil används både av ssh-klienten och av sshd för
hosts.equiv-funktionalitet.
Även denna fil behöver uppdateras.
</p>

<p>3. Kontrollera samtliga OpenSSH-användarnycklar</p>

<p>
Den mest säkra lösningen är att skapa alla OpenSSH-användarnycklar på nytt,
förutom när det är möjligt att med tillräckligt hög sannolikhet avgöra att
nyckeln har
skapats på ett system som inte påverkats av problemet.
</p>

<p>
Se om din nyckel påverkas genom att köra verktyget ssh-vulnkey, vilket
medföljer denna säkerhetsuppdatering.
Som standard kommer ssh-vulnkey att se på standardplatsen för
användarnycklar (~/.ssh/id_rsa, ~/.ssh/id_dsa och ~/.ssh/identity), din
authorized_keys-fil (~/.ssh/authorized_keys och ~/.ssh/authorized_keys2),
samt systemets värdnycklar (/etc/ssh/ssh_host_dsa_key och
/etc/ssh/ssh_host_rsa_key).
</p>

<p>
För att kontrollera alla dina egna nycklar, förutsatt att de finns på
standardplatser (~/.ssh/id_rsa, ~/.ssh/id_dsa, eller ~/.ssh/identity):
</p>

     <p>ssh-vulnkey</p>

<p>
För att kontrollera alla nycklar på ditt system:
</p>

     <p>sudo ssh-vulnkey -a</p>

<p>
För att kontrollera en nyckel på en icke-standardiserad plats:
</p>

     <p>ssh-vulnkey /sökväg/till/nyckel</p>

<p>
Om ssh-vulnkey säger <q>Unknown (no blacklist information)</q> (okänd
&ndash; svartlisteinformation saknas) så saknas information om huruvida
nyckeln påverkas.
Om du är osäker kan du ta bort nyckeln och skapa en ny.
</p>

<p>4. Omskapa eventuella påverkade användarnycklar</p>

<p>
OpenSSH-nycklar som används för användarautentisering måste skapas om
manuellt, och det gäller även de som har överförts till ett annat system
efter att de skapades.
</p>

<p>
Nya nycklar kan skapas med ssh-keygen, t.ex:</p>

<pre lang="en">
   $ ssh-keygen
   Generating public/private rsa key pair.
   Enter file in which to save the key (/home/användare/.ssh/id_rsa):
   Enter passphrase (empty for no passphrase):
   Enter same passphrase again:
   Your identification has been saved in /home/användare/.ssh/id_rsa.
   Your public key has been saved in /home/användare/.ssh/id_rsa.pub.
   The key fingerprint is:
   00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 användare@värd
</pre>

<p>5. Uppdatera authorized_keys-filer (om nödvändigt)</p>

<p>
När användarnycklarna har omskapats måste de relevanta öppna nycklarna
kopieras till alla authorized_keys-filer (och authorized_keys2-filer, om de
behövs) på fjärrsystem.
Se till att ta bort de nycklar som påverkas från dessa filer.
</p>
   
<h1><a name="openssl">OpenSSL: Allmänna instruktioner för att generera PEM-nycklar</a></h1>

<p>
Det här är bara en påminnelse till de som (om)skapar PEM-kodade certifikat.
Din server har troligtvis en annan policy på plats för hur du hanterar
nycklar som du bör följa.
Dessutom kan du behöva få certifikaten signerade på nytt av ett
tredjepartscertifieringsorgan, snarare än att använda ett självsignerat
certifikat, vilket är vad som beskrivs här:
</p>

<pre>
cd /etc/ssl/private
openssl genrsa 1024 &gt; minserver.pem
cd /etc/ssl/certs
openssl req -new -key ../private/minserver.pem -x509 -days 9999 -out minserver.pem
</pre>
  
<h1><a name="bincimap">bincimap</a></h1>

<p>
Paketet bincimap skapar ett självsignerat certifikat för
bincimap-ssl-tjänsten automatiskt, med hjälp av openssl-programmet, och
lägger det i /etc/ssl/certs/imapd.pem.
För att skapa ett nytt, kör:
</p>

<pre>
rm -f /etc/ssl/certs/imapd.pem
dpkg-reconfigure bincimap
</pre>

<h1><a name="boxbackup">boxbackup</a></h1>

<p>
Boxbackup finns inte i Debians stabila utgåva, bara i
uttestningsutgåvan/Lenny.
</p>

<p>
Uppströmsförfattarna har publicerats en första konsekvensanalys för
nyckelmaterial som skapats på system där slumptalsgeneratorn inte är
tillräckligt slumpmässig.
<a href="http://lists.warhead.org.uk/pipermail/boxbackup/2008-May/004476.html">Se
detaljerna här</a>.
</p>

<p>
Om slumptalsgeneratorn för din OpenSSL inte var tillräckligt slumpmässig
måste du:
</p>

<ul>
<li>Skapa om alla påverkade certifikat, vilka har skapats eller signerats på
ett påverkat system</li>
<li>Skapa om alla datanycklar (*-FileEncKeys.raw)</li>
<li>Förstör data lagrad på dina servrar med tillräcklig hög säkerhet (skriv
åtminstone över med nollor, mer om du är paranoid)</li>
<li>Sänd in allting igen</li>
<li>Vidta lämpliga åtgärder under förutsättningen att du har lagrat dina data
i klartext på en öppen server utan autentisering (dvs., starta från början,
ta bort alla spår av säkerhetskopierade data, och vidta andra åtgärder för
att minska exponeringen av dina hemligheter)</li>
</ul>

<h1><a name="cryptsetup">cryptsetup</a></h1>

<p>
Cryptsetup använder i sig självt inte openssl för kryptering (gäller både
LUKS- och dm-crypt-enheter).
</p>

<p>
<em>Om</em> cryptsetup har konfigurerats att använda SSL-krypterade
nyckelfiler (en icke-standardinställning som måste konfigureras explicit av
användaren), och nyckelfilen genererades av en trasig version av openssl, är
krypteringen av nyckelfilen svagare än förväntad (eftersom saltet inte är
verkligt slumpmässig).
</p>

<p>
Lösningen är antingen att kryptera nyckelfilen på nytt (om du är
tillräckligt säker på att den krypterade nyckeln inte har tillhandahållits
till några tredjeparter) eller att ta bort och ominstallera påverkade
partitioner med en ny nyckel.
</p>

<p>
Instruktioner för att kryptera en nyckelfil på nytt:
</p>

<p>
Utför följande steg på varje SSL-krypterad nyckelfil, men ersätt
&lt;sökväg_till_sslkrypterad_nyckel&gt; med den faktiska sökvägen till
nyckelfilen:
</p>

<pre>
tmpkey=\$(tempfile)
openssl enc -aes-256-cbc -d -salt -in &lt;sökväg_till_sslkrypterad_nyckel&gt; -out "$tmpkey"
shred -uz &lt;sökväg_till_sslkrypterad_nyckel&gt;
openssl enc -aes-256-cbc -e -salt -in "$tmpkey" -out &lt;sökväg_till_sslkrypterad_nyckel&gt;
shred -uz "$tmpkey"
</pre>

<h1><a name="dropbear">dropbear</a></h1>

<p>
Om du har nycklar i /etc/ssh/*host* tar du antingen bort dem, eller följer
<a href="#openssh">instruktionerna för openssh</a> först, innan du
uppdaterar dropbears filer.
</p>

<p>
Dropbears postinst konverterar openssh-nycklar till dropbear-format om den
inte hittar dropbear-värdnycklar.
</p>

<pre>
rm /etc/dropbear/*_host_key
dpkg-reconfigure dropbear
</pre>

<p>
Observera att nycklar som har skapats av Dropbear självt inte är sårbara
(det använder libtomcrypt istället för OpenSSL).
</p>

<h1><a name="ekg">ekg</a></h1>

<p>
Användare av programmen ekg och ekg2 (det sistnämnda endast i den
experimentella utgåvan), som använder
<q>SIM</q>-krypteringsfunktionaliteten, och som har skapat ett nyckelpar med
kommandot <q>/key [-g|--generate]</q> (som använder libssl för att göra sitt
jobb) bör skapa nya nycklar efter att ha uppgraderat libssl och startat om
programmet.
</p>

<p>
Uppströmsutvecklarna har publicerat information på sin webbplats:
<a href="http://ekg.chmurka.net/index.php">http://ekg.chmurka.net/index.php</a>
</p>

<p>
Om du behöver ytterligare hjälp, fråga på ekg-users@lists.ziew.org eller
ekg2-users@lists.ziew.org (både på engelska och polska).
</p>

<h1><a name="ftpd-ssl">ftpd-ssl</a></h1>

<pre>
rm -f /etc/ftpd-ssl/ftpd.pem /etc/ssl/certs/ftpd.pem
dpkg-reconfigure ftpd-ssl
</pre>

<p>
Detta täcker standardkonfigurationen.
Om administratören lokalt har konfigurerat en SSL-infrastruktur utöver detta
måste även dessa skapas på nytt.
</p>

<h1><a name="gforge">gforge</a></h1>

<p>
Paketet gforge-web-apache2 package i Sid och Lenny ställer in webbplatsen
med ett fuskcertifikat om det inte hittar ett riktigt certifikat.
Användarna rekommenderas sedan att ersätta det med ett <q>riktigt</q>
certifikat.
Fuskcertifikatet i fråga är det från Snake Oil, så det bör redan vara känt
som svagt (även utan SSL-felet), men en del användare kanske godtar det utan
att tänka efter.
</p>

<h1><a name="kerberos">MIT Kerberos (krb5)</a></h1>

<p>
Inga delar av MIT Kerberos i Debian 4.0 (<q>Etch</q>) använder OpenSSL, och
därför påverkas inte Kerberos i Debian 4.0 överhuvudtaget.
</p>

<p>
I Lenny använder det separata binärpaketet krb5-pkinit OpenSSL.
MIT Kerberos självt genererar inte nyckelpar som skall användas över en
längre tid, även om PKINIT-insticksprogrammet används, så eventuella
nyckelpar tänkta att användas över längre tid har skapats utanför själva MIT
Kerberos-programvaran.
PKINIT-insticksprogrammet bara refererar till befintliga nyckelpar och
ansvarar inte för nyckelhantering.
</p>
<p>
Nyckelpar som används med PKINIT över en längre tid kan vara påverkade om de
skapats på ett påverkat Debiansystem, men alla sådana nycklar är utanför MIT
Kerberos kontroll.
</p>
<p>
OpenSSL:s slumptalsfunktioner används dock för DH-utbyte när
PKINIT-autentisering används, vilket betyder att angriparen kanske kan
använda sig av en &rdquo;brute force&rdquo;-teknik för att få tillgång till
KDC-svaret till en PKINIT-autentisering, och därefter få tillgång till alla
sessioner som använder tjänstebiljetter från denna autentisering.
</p>
<p>
Alla KDC:er som använder PKINIT-insticksprogrammet från Lenny bör uppdatera
sitt libssl0.9.8-paket omedelbart och starta om Kerberos KDC med:
</p>
<pre>
/etc/init.d/krb5-kdc restart
</pre>
<p>
Alla Kerberos biljetterbjudande biljetter (TGT, <span
lang="en">ticket-granting tickets</span>) eller krypterade sessioner som
kommer från en PKINIT-autentisering med en Kerberos-KDC med den påverkade
libssl bör ses på som misstänkt; det är möjligt att angripare med
paketfångare kan kompromettera de nycklarna och sessionerna.
</p>

<h1><a name="nessus">Nessus</a></h1>

<p>
Nessus-serverpaketets (nessusd) skript som körs efter installationen skapar
ett par SSL-nycklar för säker kommunikation mellan en Nessus-server och
-klient. Denna kommunikationskanal är att anse som komprometterad eftersom
en illasinnad användare skulle kunna fånga informationen som sänds mellan
servern och klienten (vilket innehåller information om sårbarheter på andra
värdar) och möjligen sända kommandon som den inloggade användaren.
</p>

<p>
Om administratören dessutom har skapat antingen en Nessus-CA-nyckel eller
ett användarcertifikat (med nessus-mkcert-client) för fjärrautentisering på
en server där en version av OpenSSL som påverkas av detta säkerhetsproblem
är installerat bör dessa nycklar anses vara komprometterade.
Observera att användare utifrån med tillgång till Nessus-servern kan starta
angrepp mot servrar de har tillgång till att angripa, samt, om ativerat i
den lokala konfigurationen (i Debian är standardvärdet <q>nej</q>) sända in
insticksprogram som exekveras på Nessus-servern med rootbehörighet.
</p>

<p>
Paketskripten kommer att skapa nya OpenSSL-certifikat under konfigureringen
om de inte hittar dem.
Du måste ta bort de gamla certifikaten och skapa nya med:
</p>

<pre>
rm -f /var/lib/nessus/CA/cacert.pem
rm -f /var/lib/nessus/CA/servercert.pem
rm -f /var/lib/nessus/private/CA/cakey.pem
rm -f /var/lib/nessus/private/CA/serverkey.pem
dpkg-reconfigure nessusd
</pre>

<p>
När detta är gjort måste du ta bort gamla användarnycklar i
/var/lib/nessus/users/ANVÄNDARNAMN/auth och skapa dem på nytt med
nessus-mkcert-client.
Gamla nycklar kommer att vara ogiltiga så fort CA-nyckeln har tagits bort.
</p>

<p>
Efter att CA-nyckeln har skapats på nytt måste du även distribuera den nya
CA_nyckeln till dina användare, och dina användare måste godta det nya
certifikatet från Nessus-servern när de ansluter till den på nytt.
Certifikatinställningar för den gamla servern bör tas bort automatiskt, men
du kan även ta bort dem manuellt genom att redigera filen
<code>.nessusrc.cert</code> (om du använder Nessus-klienten) eller
<code>.openvasrc.cert</code> (om du använder OpenVAS-klienten).
</p>


<h1><a name="openswan">OpenSWAN / StrongSWAN</a></h1>

<pre>
rm /etc/ipsec.d/private/`hostname`Key.pem /etc/ipsec.d/certs/`hostname`Cert.pem
dpkg-reconfigure (open|strong)swan
/etc/init.d/ipsec restart
</pre>

<p>
Varning: När du startar om ipsec-tjänsterna så avslutas alla öppna
IPSec-anslutningar, vilka kanske behöver omstartas från andra sidan.
</p>

<h1><a name="openvpn">OpenVPN</a></h1>

<p>
Säkerhetskopiera dina hemliga nyckelfiler. Även om nyckelnamnen är
godtyckliga kan de upptäckas genom att köra
</p>
<pre>grep secret /etc/openvpn/*.conf</pre>

<p>
Skapa dem på nytt med
</p>
<pre>openvpn --genkey --secret HEMLIG_FILNAMN</pre>

<p>
Kopiera därefter de delade hemliga nycklarna till fjärrvärdarna och starta
om VPN:et på varje värd med
</p>
<pre>/etc/init.d/openvpn force-reload</pre>

<h1><a name="proftpd">Proftpd</a></h1>

<p>
Debianpaketet innehåller inte skapande av nycklar, så stegen som följer bör
endast vara nödvändiga om SSL-nycklar har skapats externt.
</p>

<p>
En kommande proftpd-insändning till den instabila utgåvan kommer innehålla
en tls.conf-mall med kommentaren nedan.
<p>

<p>
Observera att en lite annan procedur används för att skapa självsignerade
certifikat än vad som beskrivs i den allmänna openssl-sektionen, för att
undvika att använda ett explicit lösenord när servern startar.
</p>

<p>
Du kan skapa (på nytt) ett självsignerat certifikat med kommandoraden:
</p>
<pre>
 openssl req -x509 -newkey rsa:1024 \
         -keyout /etc/ssl/private/proftpd.key -out /etc/ssl/certs/proftpd.crt \
         -nodes -days 365
</pre>

<p>
De båda filerna måste vara läsbara endast av root. Filsökvägen kan
kontrolleras/konfigureras genom följande konfigurationsdirektiv:
</p>
<pre>
TLSRSACertificateFile                   /etc/ssl/certs/proftpd.crt
TLSRSACertificateKeyFile                /etc/ssl/private/proftpd.key
TLSCACertificateFile                    /etc/ssl/certs/CA.pem
TLSOptions                              NoCertRequest
</pre>

<h1><a name="puppet">puppet</a></h1>

<p>
Det finns två sätt att hantera certifikat i puppet, ett är via capistrano,
det andra är manuellt.
</p>

<p>
Information om hur du nygenererar Puppet SSL-certifikat med capistrano
beskrivs på
<a href="http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL">http://reductivelabs.com/trac/puppet/wiki/RegenerateSSL</a>
</p>

<p>
De manuella stegen är som följer:
</p>

<ol>
<li>Du måste ta bort och skapa om din CA-information:
<pre>
/etc/init.d/puppetmaster stop
rm -rf $vardir/ssl/*
/etc/init.d/puppetmaster start
</pre>
<p>
Om du använder mongrel måste du dock, istället för att starta puppetmaster
från init-skriptet, först stoppa webblyssnarskalet (apache, nginx, osv.) och
sedan göra följande:
</p>
<pre>
puppetmasterd --daemonize ; sleep 30 ; pkill -f 'ruby /usr/sbin/puppetmasterd'
</pre>
<p>
Steget ovan behövs eftersom puppet som körs med mongrel av någon anledning
inte komer att omgenerera sin CA.
</p>
</li>
<li>Ta bort alla klientcertifikat
<pre>
/etc/init.d/puppet stop
rm $vardir/ssl/*
</pre> 
</li>
<li>Be varje klient hämta ett nytt certifikat:
<pre>
puppetd --onetime --debug --ignorecache --no-daemonize
</pre> 
</li>
<li>När alla anrop har kommit in, kan du signera dem alla på en gång:
<pre>
puppetca --sign --all
</pre> 
</li>
<li>Starta dina puppet-klienter:
<pre>
/etc/init.d/puppet start
</pre>
</li>
</ol>

<p>
Du kan även tillfälligt slå på autosign, om du tycker att det är ok.
</p>

<h1><a name="sendmail">sendmail</a></h1>

<p>
Sendmail (i både Etch och Lenny) skapar standard-OpenSSL-certifikat om man
väljer det under installationen.
</p>

<p>
Det är enkelt att skapa nya nycklar:
</p>
<pre>
/usr/share/sendmail/update_tls new
</pre>

<p>
Om du har ändrat i mallarna i /etc/mail/tls kommer dessa värden att
återanvändas för att skapa de nya certifikaten.
</p>

<h1><a name="ssl-cert">ssl-cert</a></h1>

<p>
Snakeoil-certifikatet /etc/ssl/certs/ssl-cert-snakeoil.pem kan skapas på
nytt med:
</p>

<pre>make-ssl-cert generate-default-snakeoil --force-overwrite</pre>

<h1><a name="telnetd-ssl">telnetd-ssl</a></h1>

<pre>
rm -f /etc/telnetd-ssl/telnetd.pem /etc/ssl/certs/telnetd.pem
dpkg-reconfigure telnetd-ssl
</pre>

<p>
Detta täcker standardkonfigurationen.
Om administratören lokalt har konfigurerat en SSL-infrastruktur utöver detta
måste även dessa skapas på nytt.
</p>

<h1><a name="tinc">tinc</a></h1>

<p>
Ta bort alla misstänkta öppna och hemliga nyckelfiler:
</p>
<ol>
<li>Ta bort rsa_key.priv.</li>
<li>Redigera alla filer i hosts/-katalogen och ta bort blocken för öppen
nyckel.</li>
</ol>

<p>
Skapa ett nytt öppen/hemlig-nyckelpar:
</p>
<pre>
tincd -n &lt;netname&gt; -K
</pre>

<p>
Distribuera din värdkonfigurationsfil med din nya öppna nyckel till andra
medlemmar på ditt VPN.
Glöm inte att starta om dina tinc-servrar.
</p>

<h1><a name="tor">tor</a></h1>

<p>
Tor finns inte i den stabila utgåvan, men påverkas i Lenny.
</p>

<p>
Klienter som kör 0.1.2.x påverkas inte. Tor-noder eller dolda
tjänsteleverantörer som kör alla versioner, samt alla på 0.2.0.x påverkas.
</p>

<p>
Se
<a href="http://archives.seul.org/or/announce/May-2008/msg00000.html">sårbarhetsbulletinen</a>
på Tors sändlista.
</p>

<p>
Vi rekommenderar att du uppgraderar till 0.1.2.19-3 (finns i
uttestningsutgåvan, den instabila utgåvan, på backports.org och i det
vanliga
<a href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org-arkivet</a>)
eller 0.2.0.26-rc-1 (finns i den experimentella utgåvan och i det vanliga
<a href="https://wiki.torproject.org/noreply/TheOnionRouter/TorOnDebian">noreply.org-arkivet</a>)
repository</a>). Om du kör ett relä kommer dessa versioner tvinga fram att
nya servernycklar (/var/lib/tor/keys/secret_*) skapas.
</p>

<p>
Om du kör en Tor-nod utan att använda paketets infrastruktur
(debian-tor-användare, /var/lib/tor som DataDirectory osv.) måste du
manuellt ta bort dåliga nycklar.
Se bulletinlänken som finns ovan.
</p>

<p>
Om du är en dold tjänsteleverantör och har skapat din nyckel under den
påverkade tidsramen med ett trasigt libssl-paket, bör du ta bort din dolda
tjänsts hemliga nyckel. Detta kommer att ändra din dolda tjänsts värdnamn
och kan kräva att dina servrar konfigureras om.
</p>

<p>
Om du kör 0.2.0.x rekommenderas en uppgradering å det bestämdaste &ndash;
tre av de sex v3-auktoritetsservrarna har komprometterade nycklar.
Gamla 0.2.0.x-versioner kommer sluta fungera om en eller ett par veckor.
</p>

<h1><a name="xrdp">xrdp</a></h1>

<p>
xrdp använder genererade nycklar. De flesta klienter kontrollerar inte dessa
nycklar som standard, därför är det inga problem att byta dem. Allt du
behöver göra är:
</p>

<pre>
rm /etc/xrdp/rsakeys.ini
/etc/init.d/xrdp restart
</pre>

<p>
xrdp finns inte i den stabila utgåvan.
</p>
