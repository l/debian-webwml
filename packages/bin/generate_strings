#!/usr/bin/perl
#
# Copyright (C) 2004 Frank Lichtenheld <djpig@debian.org>
#
# This script reads one or more .pot files and generates a
# Perl module with a (exportable) get_string($msgid,$lang) function
# that replaces the gettext call with a simple hash lookup.
#
# I use this approach in scripts that generate static output files
# in many languages and would otherwise need many, many calls to
# setlocale() which is very ineffective.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# $Id$
#
# TODO:
#  - check return values of close() calls
#  - document generated class
#  - make generated class' name configurable

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin";

use File::Basename;
use Getopt::Long;
use Locale::gettext;
use POSIX;
use Data::Dumper;

use Packages::I18N::Locale;

# clean up env
delete $ENV{'LANGUAGE'};
delete $ENV{'LANG'};
delete $ENV{'LC_ALL'};
delete $ENV{'LC_MESSAGES'};

my %config = (
	      'langs' => undef,
	      'quiet' => undef,
	      'output' => undef,
	      'locales' => undef,
	      'component' => '',
	      'verbose' => 0,
	      );

my %options = (
	       'langs=s' => \$config{langs},
	       'locales=s' => \$config{locales},
	       "output=s" => \$config{output},
	       'verbose+' => \$config{verbose},
	       'quiet' => \$config{quiet},
	       'help' => \&help,
	       );

sub usage {
    my $usage = "Usage: $0 [options] <potfile> [<potfile> ...]\n";
    $usage   .= "Commandline options:\n";
    foreach my $opt (sort keys %options) {
	$usage .= "  --$opt\n";
    }
    $usage .= "The --langs option is mandatory.\n";
    return $usage;
}

sub help
{
    print usage();
    exit 0;
}

# Parse commandline options
#
GetOptions (%options);

unless ($config{langs}) {
    warn "Error: --langs argument missing\n";
    print STDERR usage();
    exit 2;
}
unless (@ARGV) {
    warn "Error: no input files given\n";
    print STDERR usage();
    exit 2;
}

sub parse_pot {
    my ($file) = @_;
    my @ids;

    print "processing .pot file $file\n" if $config{verbose};

    open POT, '<', $file or do {
	warn "Warning: Couldn't open $file: $!\n";
	return;
    };
    
    my $in_msgid = 0;
    my $msgid;
    while (<POT>) {
	chomp;
	next if /^#/;
	next if /^\s*$/;

	if ($in_msgid) {
	    if (/^msgstr\b/) {
		$in_msgid = 0;
		if ($msgid) {
#		    $msgid =~ s/\\\\/\\/go;
		    $msgid =~ s/@/\\@/go;
		    my $msgid_e = eval("\"$msgid\"");
		    die "Error: error while processing $msgid" unless $msgid_e;
		    push @ids, $msgid_e;
		}
	    } elsif (/^\s*"(.*)"\s*$/) {
		$msgid .= $1;
	    } else {
		die "Error: dubious line in $file: $_";
	    }
	} elsif (/^msgid\s*"(.*)"\s*$/) {
	    $in_msgid = 1;
	    $msgid = $1;
	}
    }
    close POT;

    return @ids;
}

my @langs = split /\s+/, $config{langs};
my %result;

foreach my $pot (@ARGV) {
    my $domain = basename($pot,".pot");

    bindtextdomain ( $domain, $config{locales} );
    textdomain( $domain );

    my @ids = parse_pot($pot);
    unless (@ids) {
	warn "Warning: no msgids found in $pot\n";
	next;
    }

    foreach my $lang ( @langs ) {
	my $locale = get_locale($lang);
	print "processing language $lang (locale $locale)\n"
	    if $config{verbose};
	setlocale ( LC_ALL, $locale )
	    or do { warn "Warning: couldn't set locale $locale, using default\n"
			unless $config{quiet};
		    setlocale( LC_ALL, get_locale() ) 
			or do {
			    warn "Warning: couldn't set default locale either\n"
				unless $config{quiet};
			    next if ($lang ne 'en');
			    setlocale( LC_ALL, "C" );
			};
		};

	foreach my $msgid (@ids) {
	    print "processing msgid: $msgid\n" if $config{verbose} > 1;

	    my $msgstr = gettext( $msgid );
	    $msgid =~ s/\\@/@/go;
	    print "got msgstr ($lang): $msgstr\n" if $config{verbose} > 1;
	    $result{$lang}{$msgid} = $msgstr;
	}
    }
}

if ($config{output}) {
    open STRINGS, '>', $config{output} or
	die "Error: couldn't open $config{output}: $!";
} else {
    open STRINGS, '>&', \*STDOUT or die "Error: can't dup STDOUT: $!";
}

print STRINGS <<'SUB';
use strict;
use warnings;
package Generated::Strings;
use Exporter;
our @ISA = qw( Exporter );
our @EXPORT_OK = qw( get_string string_lang gettext dgettext );

my $lang = 'en';
my $strings = {};

sub get_string {
    my ( $string, $lang ) = @_;
    my $ret = $strings->{$lang}{$string};
    return $string unless defined($ret);
    return $ret;
}

sub string_lang {
    $lang = $_[0] if $_[0];
    return $lang;
}

sub gettext {
    return get_string( $_[0], $lang );
}

sub dgettext {
    return get_string( $_[1], $lang );
}
    
SUB
    ;

print STRINGS Data::Dumper->Dump( [ \%result ] , [ 'strings' ] );

print STRINGS "1;\n";
close STRINGS;
