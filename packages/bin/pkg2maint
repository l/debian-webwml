#! /usr/bin/perl

#   pkg2maint - convert Packages file to maintainer address
#   Copyright (c) 1996-9  Martin Schulze <joey@debian.org>

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# $Id$

#
#   This program is a little helper for packages.debian.org.  It reads
#   one package name (e.g. cfinged) from its commandline and does
#   lookups in its maintainer database, generated by pkg-convert.  If a
#   package could be found the resulting address
#   (e.g. joey@debian.org) is checked against an existing account on
#   master.debian.org.  If there is one and there is a .qmail-package
#   file (e.g. ~joey/.qmail-cfingerd) the address will be expanded to
#   that (e.g. joey-cfingerd@debian.org).  Otherwise the address from
#   the most recent fulfilled test is returned.
#

# Who is the administrative owner of this domain
#
$owner = "joey\@debian.org";

# Where shall mails to unknown addresses go
#
$unknown_prefix = "unknown-";
$unknown_postfix = "\@packages.debian.org";

$maintainerdb = "/debian/home/joey/etc/maintainerdb";
#$maintainerdb = "/home/users/joey/tmp/debian/home/etc/maintainerdb";
$maintainerdb = "/org/packages.debian.org/maintainerdb";

# These addresses are mandatory and will checked first
#
%mandatory = ("root", "joey\@debian.org",
	      "admin", "joey\@debian.org",
	      "sysop", "joey\@debian.org",
	      "info", "debian\@debian.org",
	      "debian", "debian\@debian.org",
	      "postmaster", "joey\@debian.org",
	      "MAILER-DAEMON", "joey\@debian.org",
	      "usenet", "joey\@debian.org",
	      "news", "joey\@debian.org",
	      "newsmaster", "joey\@debian.org",
	      "joey", "joey\@debian.org",
	      "netgod", "johnie\@debian.org",
	      "submit", "submit\@bugs.debian.org");

# prefix for /home directories
#
$home = "/debian/home";

# check if the address is somewhat mandatory
#
sub lookup_mandatory
{
    local ($addr) = $_[0];

    for $user (keys(%mandatory)) {
	if ($user eq $addr) {
	    return $mandatory{$user};
n	}
    }
}

# lookup the address in the maintainer database
#
sub lookup_package
{
    my $pkg = shift;
    my $short;
    my ($pack,$maint);

    if ( open (DB, "$maintainerdb") ) {
	while (<DB>) {
	    next unless (/^($pkg)/);
	    chop;
	    ($pack,$maint) = split(/:/);
	    $package{$pack} = $maint;
	}
	close (DB);
    }
    return $package{$pkg} if (exists ($package{$pkg}));
    $short = $pkg;
    $short =~ s/\d$//;
    $short =~ s/\+/\\+/g;
    return $package{$short} if (exists ($package{$short}));
    return "";
}

# If it is an address on master, let's check if there's a special
# forward file
#
sub lookup_alias
{
    local ($pkg) = $_[0];
    local ($addr) = $_[1];
    local ($user);

    if ($addr =~ /(.*)@(master\.)?debian\.org/) {
	$user = $1;
	if ( -f "$home/$user/.qmail-$pkg" ) {
	    $addr = "$user-$pkg\@master.debian.org";
	} elsif ( -f "$home/$user/.forward-$pkg" ) {
	    $addr = "$user-$pkg\@master.debian.org";
	} 
    }
    return $addr;
}

# 
# Main program
#
$opt_verbose = 0;
if ($#ARGV < 0) {
    printf "%s\n", $unknown_prefix . "info" . $unknown_postfix;
} else {

    if ($ARGV[0] eq "-v") {
	$opt_verbose = 1;
	if ($#ARGV < 1) {
	    printf "%s\n", $unknown_prefix . "info" . $unknown_postfix;
	    exit (0);
	} else {
	    $addr = $ARGV[1];
	}
    } else {
	$addr = $ARGV[0];
    }
    $addr =~ s/^-//;

    $xaddr = &lookup_mandatory($addr);
    $xaddr = &lookup_package($addr) if (! length($xaddr) );

    if ( length($xaddr) ) {
	$address = "";
	foreach $maint (split(/ /,$xaddr)) {
	    $address .= &lookup_alias ($addr, $maint) . " ";
	}
    } else {
	$address = $unknown_prefix . $addr . $unknown_postfix;
    }

    print "$address\n";
}

