#! /usr/bin/perl

#   flatten-db - Convert a Packages/Sources file
#   Copyright (c) 2004  Martin Schulze <joey@debian.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# $Id$

use strict;
use Getopt::Long;

my %config = (
	      'db' => undef,
	      'output' => undef,
	      'verbose' => 0,
	      );

my %options = (
	       'db=s' => \$config{db},
	       'output=s' => \$config{output},
	       'verbose+' => \$config{verbose},
	       'help' => \&help,
	       );

sub help
{
    printf "Commandline options:\n";
    foreach my $opt (sort keys %options) {
	printf "  --%s\n", $opt;
    }
    exit 0;
}

sub strip
{
    my $text = shift;

    $text =~ s/[.:;_&,+\*\/-]//g;
}

# Parse commandline options
#
GetOptions (%options);

do {
    printf "Error: Supply a Packages/Sources file with --db foo\n";
    exit 1;
} if (!$config{db});

if ($config{db} =~ /\.gz$/) {
    open (DB, "zcat $config{db}|") || die "Can't open $config{db}, $!";
} elsif ($config{db} =~ /\.bz2$/) {
    open (DB, "bzcat $config{db}|") || die "Can't open $config{db}, $!";
} else {
    open (DB, "$config{db}") || die "Can't open $config{db}, $!";
}

if ($config{output}) {
    open (OUT, ">$config{output}") || die "Can't open $config{output} for writing, $!";
} else {
    open (OUT, ">-");
}

my %info = ();
my $foo;
while (<DB>) {
    chomp;

    if (/^Package: (.*)$/) {
	$foo = $1;
	if ($info{Package}) {
	    printf OUT "%s %s %s %s \n", $info{Package}, $info{Section}, $info{Version}, strip ($info{Description});
	    %info = ();
	}
	$info{Package} = $foo;
    }

    $info{Section} = $1 if (/^Section: (.*)$/);
    $info{Version} = $1 if (/^Version: (.*)$/);
    $info{Description} = $1 if (/^Description: (.*)$/);
    if ($info{Description} && !/^Description:/) {
	$info{Description} .= " " . $_;
    }
}
printf OUT "%s %s %s %s \n", $info{Package}, $info{Section}, $info{Version}, strip ($info{Description}) if ($info{Package});

close (DB);
close (OUT);
