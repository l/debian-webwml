#! /usr/bin/perl

#   flatten-db - Convert a Packages/Sources file
#   Copyright (c) 2004  Martin Schulze <joey@debian.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# $Id$

use strict;
use Getopt::Long;
use DB_File;

my %config = (
	      'db' => undef,
	      'output' => undef,
	      'descr' => undef,
	      'sections' => undef,
	      'packages' => undef,
	      'sources' => undef,
	      'verbose' => 0,
	      );

my %options = (
	       'db=s' => \$config{db},
	       'output=s' => \$config{output},
	       'descriptions=s' => \$config{descr},
	       'sections=s' => \$config{sections},
	       'packages=s' => \$config{packages},
	       'sources=s' => \$config{sources},
	       'verbose+' => \$config{verbose},
	       'help' => \&help,
	       );

sub help
{
    printf "Commandline options:\n";
    foreach my $opt (sort keys %options) {
	printf "  --%s\n", $opt;
    }
    exit 0;
}

sub strip
{
    my $text = shift;

    $text =~ s/[.:;_&,+\*\/-]//g;
    return $text;
}

# Parse commandline options
#
GetOptions (%options);

do {
    printf "Error: Supply a Packages/Sources file with --db foo\n";
    exit 1;
} if (!$config{db});

if ($config{db} =~ /\.gz$/) {
    open (DB, "zcat $config{db}|") || die "Can't open $config{db}, $!";
} elsif ($config{db} =~ /\.bz2$/) {
    open (DB, "bzcat $config{db}|") || die "Can't open $config{db}, $!";
} else {
    open (DB, "$config{db}") || die "Can't open $config{db}, $!";
}

if ($config{output}) {
    open (OUT, ">$config{output}") || die "Can't open $config{output} for writing, $!";
} else {
    open (OUT, ">-");
}

my ( %descr, %sections, %packages, %sources );
if ($config{descr}) {
    tie %descr, 'DB_File', $config{descr} or die "Couldn't tie description db $config{descr}: $!";
}
if ($config{sections}) {
    tie %sections, 'DB_File', $config{sections} or die "Couldn't tie sections db $config{sections}: $!";
}
if ($config{packages}) {
    tie %packages, 'DB_File', $config{packages} or die "Couldn't tie packages db $config{packages}: $!";
}
if ($config{sources}) {
    tie %sources, 'DB_File', $config{sources} or die "Couldn't tie sources db $config{sources}: $!";
}

sub store_info {
    my ($info, $descr) = shift;

    if ($info->{Binary}) {
	my $info_str = sprintf( "%s %s %s %s\n", $info->{Package},
				$info->{Section},  $info->{Version},
				$info->{Binary} );
	$sources{$info->{Package}} = $info_str;
	print OUT $info_str;
    } else {
	my $info_str = sprintf( "%s %s %s %s %s\n", $info->{Package},
				$info->{Section}, $info->{Version},
				$info->{Architecture},
				strip($info->{Description}) );
	$packages{$info->{Package}} = $info_str;
	print OUT $info_str;
	$descr{$info->{Package}} = $descr if $config{descr};
	$sections{$info->{Package}} = $info->{Section} if $config{sections};
    }
}

my %info = ();
my $foo;
my $descr;
while (<DB>) {
    chomp;

    if (/^Package: (.*)$/) {
	$foo = $1;
	if ($info{Package}) {
	    store_info \%info, $descr;
	    %info = ();
	}
	$info{Package} = $foo;
    }

    $info{Section} = $1 if (/^Section:\s*(.*)$/);
    $info{Version} = $1 if (/^Version:\s*(.*)$/);
    $info{Binary} = $1 if (/^Binary:\s*(.*)$/);
    $info{Architecture} = $1 if (/^Architecture:\s*(.*)$/);
    if (/^Description:\s*(.*)$/) {
	$info{Description} = "$1";
	$descr = "$1";
    }
    if ($info{Description} && !/^Description:/) {
	$info{Description} .= " " . $_;
    }
}

if ($info{Package}) {
    store_info \%info, $descr;
}

close (DB);
close (OUT);
