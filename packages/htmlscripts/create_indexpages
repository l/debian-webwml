#!/usr/bin/perl

# $Id$
#
# Copyright (c) 2003 Frank Lichtenheld
# Based on the original packages scripts
#   Copyright 1998 James Treacy

require 5.006;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin";

use Getopt::Long;
use Locale::gettext;
use Pod::Usage;
use POSIX;

use Packages::HTML;
use Packages::I18N::Locale;
require('sections.pl');
my %sections = create_sections();

my $revision = '$Revision$';

# ********************
# * Option handling  *
# ********************

my ( $version, $languages, $html_root,
     $experimental, $help, $sections_file,
     $distribution, $quiet, $md5_file,
     $locale_dir, $verbose );

my %opthash = (
	       "experimental|e!" => \$experimental,
	       "distribution|d=s" => \$distribution,
	       "locales|l=s" => \$locale_dir,
	       "langs=s" => \$languages,
	       "sections|s=s" => \$sections_file,
	       "html_root|h=s" => \$html_root,
	       "md5sums|m=s" => \$md5_file,

	       "verbose|v" => \$verbose,
	       "quiet|q" => \$quiet,
	       "version" => \$version,
	       "help" => \$help,
	       );

Getopt::Long::config('no_getopt_compat', 'no_auto_abbrev');

GetOptions(%opthash) or 
    pod2usage(-exitval => 2, -verbose => 0, 
	      -message => "E: error parsing options");

pod2usage(-exitval => 0, -verbose => 1) if $help;
if ($version) {
    print <<EOV;
create_indexpages $revision
Copyright (C) 2003 Frank Lichtenheld
Based on the original packages scripts
    Copyright 1998 James Treacy
EOV
    exit;
}

my $opt_err = 3;
my $opt_verb = 0;
if (! defined $html_root) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "E: No --html_root option given\n");
}
if (! defined $md5_file) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "E: No --md5sums option given\n");
}
if (! defined $sections_file) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "E: No --sections option given\n");
}
$experimental ||= 0; $verbose ||= 0; 
$quiet ||= 0; $distribution ||= "";
$locale_dir ||= "../locale";

$quiet &&= ! $verbose;

my %md5s = %{ read_md5_hash( $md5_file ) };

bindtextdomain ( "pdo", $locale_dir );
bindtextdomain ( "sections", $locale_dir );
textdomain( "pdo" );

my $num_sections = 0;
open SECTIONS, "<", $sections_file or die "E: couldn't open $sections_file: $!";
while (<SECTIONS>) {
    next if /^\s*$/o;
    next if /^(nonfree|contrib)/o;
    $_ = 'non-US' if /^non-US/o;
    chomp;
    if ( exists( $sections{$_} ) 
	 && ! $sections{$_}[2] ) {
	$sections{$_}[2]++;
	$num_sections++;
    }
}
close SECTIONS or do {
    warn "W: couldn't close $sections_file: $!\n" unless $quiet;
};

my @langs = split /\s+/, $languages;
foreach my $lang ( @langs ) {
    my $locale = get_locale($lang);
    print "processing language $lang (locale $locale)\n" if $verbose;
    setlocale ( LC_ALL, $locale )
	or do { warn "W: couldn't set locale $locale, using default\n" 
		    unless $quiet;
		setlocale( LC_ALL, get_locale() ) 
		    or next; 
	    };
    my $title = sprintf( gettext( "Software Packages in &ldquo;%s&rdquo;" ), 
			 $distribution );
    my $index_page = header( $title, '../..', '../..', $lang );
    if ($experimental) {
	$index_page .= gettext( "<p>Warning: The <font color=\"red\">experimental</font> distribution contains software that is likely unstable or buggy and may even cause data loss. If you ignore this warning and install it nevertheless, you do it on your own risk.</p>" );
    }
    $index_page .= "<table summary=\"\"><tr><td width=\"50%\" valign=\"top\"><dl>\n";
    my $i = 0;
    foreach my $s (sort keys %sections) {
	if ($sections{$s}[2]) {
	    $index_page .= "<dt><a href=\"$s\">".dgettext( 'sections', $sections{$s}[0] )."</a></dt><dd>".dgettext( 'sections', $sections{$s}[1] )."</dd>\n";
	    $i++;
	    if ($i eq ceil($num_sections/2)) {
		$index_page .= "</dl><td width=\"50%\" valign=\"top\"><dl>\n";
	    }
	}
    }
    $index_page .= "</dl></table>\n";
    $index_page .= "<center><a href=\"allpackages\" title=\"".
	gettext( "List of all packages" ) ."\">".
	gettext( "All packages" ) ."</a><br /><small>(<a href=\"allpackages.$lang.txt.gz\">".
	gettext( "compact compressed textlist" )."</a>)</small></center>\n";
    $index_page .= trailer( '../..', 'index', $lang, @langs );
    my $dest_dir = "$html_root/$distribution";
    if(file_changed(\%md5s, "$dest_dir/index.$lang.html", $index_page)) {
	sysopen(FILEH, "$dest_dir/index.$lang.html", 
		O_WRONLY | O_TRUNC | O_CREAT, 0664)
	    || die "E: Can\'t open $dest_dir/index.$lang.html: $!";
	my $now_time = time_stamp();
	$index_page =~ s/LAST_MODIFIED_DATE/$now_time/g;
	print FILEH $index_page;
	close FILEH;
    }
}

write_md5_hash( $md5_file, \%md5s );

__END__

=head1 NAME

create_indexpages -- 

=head1 SYNOPSIS

B<create_indexpages> I<options> [I<optional_options>]

B<create_indexpages> B<--help>

B<create_indexpages> B<--version>

For allowed options see the L<"OPTIONS"> section.

=head1 OPTIONS

=head2 Required Options

=over 4

=item B<--html_root>=I<DIR>, B<-h>

    Directory in which the HTML files are to be stored.

=item B<--locales>=I<DIR>, B<-l>

    Directory where the gettext files can be found.

=item B<--md5file>=I<FILE>, B<-m>

    File in which the md5sums of the current HTML files are stored.
    The file will be updated by the script.

=item B<--sections>=I<FILE>, B<-s>

=back

=head2 Optional Options

=over 4

=item B<--distribution>=I<NAME>

The distribution for which to generate the pages. It is
currently not possible to generate more that one distribution
with one call.

=item B<--experimental>, B<-e>

If set, warnings about the nature of the experimental
distribution will be added to all pages.

=item B<--langs>=I<LIST>

=item B<--quiet>, B<-q>

If set, the script will report only fatal errors.
Overrides B<--progress>.

=item B<--verbose>, B<-v>

If set, the script will be more verbose about what it is doing.
Overrides B<--quiet>.

=back

=head2 Special Options

=over 4

=item B<--help>

Output a the SYNOPSIS and OPTIONS section of the documentation and exit.

=item B<--version>

Output the version number and a copyright notice and exit.

=back
