#! /usr/bin/perl

#   newpkg - Generate a list of new packages
#   Copyright (c) 2004  Martin Schulze <joey@debian.org>
#   Copyright (c) 2004  Frank Lichtenheld <djpig@debian.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# $Id$

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin";

use Getopt::Long;
use File::Basename;
use POSIX;
use DB_File;
use XML::RSS;

use Packages::HTML;
use Packages::I18N::Locale;
use Generated::Strings qw( string_lang gettext );

my %config = (
	      'old' => undef,
	      'new' => undef,
	      'descr' => undef,
	      'sections' => undef,
	      'langs' => 'en',
	      'quiet' => undef,
	      'output' => undef,
	      'locales' => undef,
	      'component' => '',
	      'verbose' => 0,
	      );

my %options = (
	       'old=s' => \$config{old},
	       'new=s' => \$config{new},
	       'descriptions=s' => \$config{descr},
	       'sections=s' => \$config{sections},
	       'component=s' => \$config{component},
	       'langs=s' => \$config{langs},
	       'locales=s' => \$config{locales},
	       "output=s" => \$config{output},
	       'verbose+' => \$config{verbose},
	       "quiet" => \$config{quiet},
	       'help' => \&help,
	       );

sub help
{
    printf "Commandline options:\n";
    foreach my $opt (sort keys %options) {
	printf "  --%s\n", $opt;
    }
    exit 0;
}

# Parse commandline options
#
GetOptions (%options);

if (! defined $config{old} || !defined $config{new}) {
    printf STDERR "Need old (--old) and new (--new) files.\n";
    exit 1;
}
if (! defined $config{output}) {
    printf STDERR "Need an output file.\n";
    exit 1;
}

my $fname = '';
if ($config{output} =~ m,/[^/]+,) {
    $fname = basename $config{output};
} else {
    printf STDERR "Need an output filename base.\n";
    exit 1;
}

my @parts = ('main','contrib','non-free');


open (DIFF, "diff -u $config{old} $config{new}|") or die "E: Couldn't open diff, $!";

my @newpkg;
while (<DIFF>) {
    next unless (/^\+([^+].*)$/);
    push (@newpkg, $1);
}
close (DIFF);

my %db = ( section => {}, description => {} );
tie %{$db{description}}, 'DB_File', $config{descr}, O_RDONLY
    or die "Error while loading descriptions database $config{descr}: $!";
tie %{$db{section}}, 'DB_File', $config{sections}, O_RDONLY
    or die "Error while loading sections database $config{sections}: $!";

sub norm_section {
    my $section = shift || '';

    $section =~ s,^(non-free|contrib)/,,;
    $section =~ s,^non-US.*$,non-US,,;

    return $section;
}

my @langs = split /\s+/, $config{langs};
foreach my $lang ( @langs ) {
    my $locale = get_locale($lang);
    print "processing language $lang (locale $locale)\n" if $config{verbose};
    string_lang($lang);

    my $title = sprintf( gettext( "New Packages in \"%s\"" ), 
			 $config{component} );
    my $page = header( title => $title,
		       title_keywords => "ubuntu, dapper, new packages, $config{component}",
		       meta => "<link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"newpkg_$config{component}.$lang.rdf\">",
		       lang => $lang,
		       print_title_below => 1 );
    my ( $rss_link, $rss_description, $rss_date );
    if ($config{component} eq 'main') {
	$page .= "<p>"
	    . sprintf( gettext ( "The following packages were added to the %s Ubuntu archive during the last 7 days." ), 'dapper' )
	    . "<p>".sprintf( gettext ( "This information is also available as an <a href=\"newpkg_%s.%s.rdf\">RSS feed</a>." ), 'main', $lang )
	    ." <a href=\"newpkg_main.$lang.rdf\"><img src=\"http://planet.debian.org/rss10.png\" alt=\"[RSS 1.0 Feed]\"></a></p>";
	$rss_description = sprintf( gettext ( "Packages that were added to the %s Ubuntu archive during the last 7 days." ), 'dapper' );
    } else {
	$page .= "<p>"
	    . sprintf ( gettext ( "The following packages were added to the \"%s\" component next to the Ubuntu main archive during the last 7 days." ), $config{component} )
	    . "<p>".sprintf( gettext ( "This information is also available as an <a href=\"newpkg_%s.%s.rdf\">RSS feed</a>." ), $config{component}, $lang )
	    ." <a href=\"newpkg_$config{component}.$lang.rdf\"><img src=\"http://planet.debian.org/rss10.png\" alt=\"[RSS 1.0 Feed]\"></a></p>";
	$rss_description = sprintf( gettext ( "Packages that were added to the \"%s\" component next to the Ubuntu main archive during the last 7 days." ),  $config{component} );
    }
    $page .= "\n<ul>\n" if @newpkg;
    
    # ($date_sec,$date_min,$date_hour,$date_mday,$date_mon,$date_year,$date_wday,$date_isdst)
    (my @date)= gmtime();
    my $now_time = strftime ("%B %d, %Y", @date);
    my $rss_time = strftime ("%Y-%m-%dT%H:%M+00:00", @date);

    my $rss = new XML::RSS (version => '1.0');
    $rss_link = "http://packages.ubuntu.com/dapper/$fname";
    $rss->channel(
		  title        => "New Ubuntu Packages",
		  link         => $rss_link,
		  description  => $rss_description,
		  dc => {
		      date       => $rss_time,
		      publisher  => 'frank@lichtenheld.de',
		      language   => $lang,
		  },
		  syn => {
		      updatePeriod     => "weekly",
		      updateFrequency  => "2",
#		      updateBase       => "1901-01-01T00:00+00:00",
		  } );
    
    foreach my $pkg (sort @newpkg) {
    	my $section = $db{section}{$pkg} || 'unknown';
	$page .= sprintf ("<li><a href=\"%s/%s\">%s</a>\n    -- %s",
			  norm_section($section), $pkg, $pkg,
			  $db{description}{$pkg} || '');
	$rss->add_item(
		       title       => $pkg,
		       link        => "http://packages.ubuntu.com/dapper/$section/$pkg",
		       description => $db{description}{$pkg},
		       dc => {
			   subject  => $section,
		       } );
    }
    $page .= "\n</ul>\n" if @newpkg;
       
    my $clist = '';
    foreach my $c (('main','universe','multiverse','restricted')) {
	$clist .= ", " if ($clist);
	$clist .= $config{component} eq $c ? $c : sprintf ("<a href=\"newpkg_%s\">%s</a>", $c, $c);
    }

    $page .= '<p class="psmallcenter"><a href="allpackages" title="'.
	gettext( "List of all packages" ) ."\">".
	gettext( "All packages" ) ."</a><br>(<a href=\"allpackages.$lang.txt.gz\">".
	gettext( "compact compressed textlist" )."</a>)<br>".
	sprintf ( gettext ( "New packages in %s" ), $clist ).
	"</p>\n";
    $page .= trailer( '..', $fname, $lang, @langs );

    print "Write to $config{output}.$lang.html\n" if $config{verbose};
    sysopen(FILEH, "$config{output}.$lang.html",
	    O_WRONLY | O_TRUNC | O_CREAT, 0664)
	|| die "E: Can\'t open $config{output}.$lang.html: $!";
    print "Write to $config{output}.$lang.rdf\n" if $config{verbose};
    $rss->save("$config{output}.$lang.rdf");

    $page =~ s/LAST_MODIFIED_DATE/$now_time/g;
    print FILEH $page;
    close FILEH;

    print "Write to $config{output}.$lang.rdf\n" if $config{verbose};
    $rss->save("$config{output}.$lang.rdf");
}
