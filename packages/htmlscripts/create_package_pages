#!/usr/bin/perl

# $Id$
#
# Copyright (c) 2003 Frank Lichtenheld
# after the original create_package_pages
#   Copyright 1998 James Treacy

require 5.006;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";
use lib "$FindBin::Bin";

use Getopt::Long;
use Locale::gettext;
use Pod::Usage;
use Packages::DB;
use POSIX;

my $revision = '$Revision$';

require('pages.pl');

# ********************
# * Option handling  *
# ********************

my ( $debian_site, $nonus_site, $security_site, $version,
     $html_root, $md5file, $experimental, $debug, $help,
     $distribution, $indices_dir, $quiet, $parts,
     $locale_dir, $progress, $verbose, $languages, $subdists, $archs );

my %opthash = (
	       "debian_site|d=s" => \$debian_site,
	       "nonus_site|n=s" => \$nonus_site,
	       "security_site|s=s" => \$security_site,
	       "html_root|h=s" => \$html_root,
	       "md5file|m=s" => \$md5file,
	       "experimental|e!" => \$experimental,
	       "debug!" => \$debug,
	       "verbose|v" => \$verbose,
	       "quiet|q" => \$quiet,
	       "progress!" => \$progress,
	       "distribution=s" => \$distribution,
	       "indices=s" => \$indices_dir,
	       "locales=s" => \$locale_dir,
	       "langs=s" => \$languages,
	       "subdists=s" => \$subdists,
	       "archs=s" => \$archs,
	       "parts=s" => \$parts,
	       "version" => \$version,
	       "help" => \$help,
	       );

Getopt::Long::config('no_getopt_compat', 'no_auto_abbrev');

GetOptions(%opthash) or 
    pod2usage(-exitval => 2, -verbose => 0, 
	      -message => "error parsing options");

pod2usage(-exitval => 0, -verbose => 1) if $help;
if ($version) {
    print <<EOV;
create_packages_pages $revision
Copyright (C) 2003 Frank Lichtenheld
after the original create_package_pages.pl
    Copyright 1998 James Treacy
EOV
    exit;
}

my $opt_err = 3;
my $opt_verb = 0;
if (! defined $md5file) {
        pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --md5file option given\n");
}
if (! defined $debian_site) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --debian_site option given\n");
}
if (! defined $nonus_site) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --nonus_site option given\n");
}
if (! defined $security_site) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --security_site option given\n");
}
if (! defined $html_root) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --html_root option given\n");
}
if (! defined $indices_dir) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --indices option given\n");
}
if (! defined $locale_dir) {
	pod2usage(-exitval => $opt_err, -verbose => $opt_verb, 
		  -message =>  "Error: No --locales option given\n");
}
$experimental ||= 0; $debug ||= 0; $verbose ||= 0; 
$quiet ||= 0; $progress ||= 0; $distribution ||= "";
$subdists ||= ""; $archs ||= ""; $languages ||= "";
$parts ||= "";

$verbose ||= $debug;
$quiet &&= ! $verbose;
$progress &&= ! $quiet;

my @subdists = split /\s+/, $subdists;
my @archs = split /\s+/, $archs;
my @langs = split /\s+/, $languages;
my @parts = split /\s+/, $parts;

sub tofile ($) {
    my $name = shift;
    $name =~ s,/,_,go;
    return $name;
}

# ********************
# *     "Main"       *
# ********************

my $db = Packages::DB->init( { debug => $debug, verbose => $verbose } );
my %langs = ( "en" => 1 );
my %archs = ( "i386" => 1 );
my %subdists = ( );
my %parts = ( "main" => 1 );

foreach (@langs) { $langs{$_}++ }
foreach (@archs) { $archs{$_}++ }
foreach (@subdists) { $subdists{$_}++ }
foreach (@parts) { $parts{$_}++ }

print "Read data files for distribution $distribution..." if $verbose;
foreach my $p ( keys %parts ) {
    print "\n{$p...[binary]..." if $verbose;
    foreach my $a ( keys %archs ) {
	$db->read_file( "$indices_dir/".tofile( "$distribution\_us_$p\_$a\_Packages" ),
			{ distribution => $distribution,
			  archive => $p,
			  noDepends => 1 } );
    }
    print "[sources]..." if $verbose;
    $db->read_file( "$indices_dir/".tofile( "$distribution\_us_$p\_Sources" ),
		    { distribution => $distribution,
		      archive => $p,
		      type => "source",
		      noDepends => 1 } );
    print "[translations]..." if $verbose;
    foreach my $l ( keys %langs ) {
	next if $l eq 'en';
	$db->read_file( "$indices_dir/".tofile( "$distribution\_us_$p\_$l\_Translations" ),
			{ distribution => $distribution,
			  archive => $p,
			  type => "trans",
			  noDepends => 1 } );
    }
    foreach my $sd ( keys %subdists ) {
	print "{$p/$sd...[binary]..." if $verbose;
	foreach my $a ( keys %archs ) {
	    $db->read_file( "$indices_dir/"
			    .tofile( "$distribution\_$sd\_$p\_$a\_Packages" ),
			    { distribution => $distribution,
			      subdistribution => $sd,
			      archive => $p,
			      noDepends => 1 } );
	}
	print "[sources]..." if $verbose;
	$db->read_file( "$indices_dir/".tofile( "$distribution\_$sd\_$p\_Sources" ),
			{ distribution => $distribution,
			  archive => $p,
			  subdistribution => $sd,
			  type => "source",
			  noDepends => 1 } );
	print "}..." if $verbose;
    }
    print "}..." if $verbose;
}
print "done\n" if $verbose;

$db->calculate_depends();
#print $db->get_stats;

bindtextdomain ( "pdo", $locale_dir );
bindtextdomain ( "sections", $locale_dir );
textdomain( "pdo" );

write_pages( $db, { html_root => $html_root,
		    debian_site => $debian_site,
		    nonus_site => $nonus_site,
		    security_site => $security_site,
		    md5file => $md5file, quiet => $quiet,
		    debug => $debug, verbose => $verbose, 
		    progress => $progress }, $distribution, \@archs, \@langs );

$| = 1; # autoflush on
print "FINISHED\n" unless $quiet;

POSIX::_exit(0); # avoid calling destructors

__END__

=head1 NAME

create_package_pages -- script that generates the packages.debian.org pages

=head1 SYNOPSIS

B<create_package_pages> I<options> [I<optional_options>]

B<create_package_pages> B<--help>

B<create_package_pages> B<--version>

For allowed options see the L<"OPTIONS"> section.

=head1 OPTIONS

=head2 Required Options

=over 4

=item B<--debian_site>=I<URL>, B<-d>

    URL of the Debian archiv site.

=item B<--dist_file>=I<FILE>

    File where the distribution information is stored.

=item B<--html_root>=I<DIR>, B<-h>

    Directory in which the HTML files are to be stored.

=item B<--indices>=I<DIR>

    Directory where the data files (Packages, Sources, Translations)
    are stored.

=item B<--locales>=I<DIR>

    Directory where the gettext files can be found.

=item B<--md5file>=I<FILE>, B<-m>

    File in which the md5sums of the current HTML files are stored.
    The file will be updated by the script.

=item B<--nonus_site>=I<URL>, B<-n>

    URL of the Debian non-US archiv site.

=item B<--security_site>=I<URL>, B<-s>

    URL of the Debian security archiv site.

=back

=head2 Optional Options

=over 4

=item B<--debug>

If set, the script will be very, very verbose.
Implies B<--verbose> and B<--progress> and overrides 
B<--quiet>.

=item B<--distribution>=I<NAME>

The distribution for which to generate the pages. It is
currently not possible to generate more that one distribution
with one call.

=item B<--experimental>, B<-e>

If set, warnings about the nature of the experimental
distribution will be added to all pages.

=item B<--progress>

If set, the script will output a progress indicator while
creating the pages. Not usefull if your logging the output.

=item B<--quiet>, B<-q>

If set, the script will report only fatal errors.
Overrides B<--progress>.

=item B<--verbose>, B<-v>

If set, the script will be more verbose about what it is doing.
Overrides B<--quiet>.

=back

=head2 Special Options

=over 4

=item B<--help>

Output a the SYNOPSIS and OPTIONS section of the documentation and exit.

=item B<--version>

Output the version number and a copyright notice and exit.

=back
