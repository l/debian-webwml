#!/usr/bin/python

# Show all people or only those whose entries have changed
# Copyright (C) 2002, 2003  Martin Michlmayr <tbm@cyrius.com>
# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import pg, string, sys
import utils, gpg_utils
import apt_pkg

def help():
    print """Usage: gpg_show
Show all people or only those whose entries have changed

  -c, --changed             Show those whose entries have changed
  -o, --offers              Show those who offer key signings
  -r, --requests            Show those who request key signings
  -u, --url                 Show URLs

"""
    sys.exit(1)

def parse_args():
    global Cnf

    apt_pkg.init()
    Cnf = apt_pkg.newConfiguration()
    apt_pkg.ReadConfigFileISC(Cnf, "gpg.conf")

    Arguments = [("h", "help", "Show::Options::Help"),
                 ("c", "changed", "Show::Options::Changed"),
                 ("o", "offers", "Show::Options::Offers"),
                 ("r", "requests", "Show::Options::Requests"),
                 ("u", "url", "Show::Options::URL")]
    for i in ["Help", "Changed", "Offers", "Requests", "URL"]:
        if not Cnf.has_key("Show::Options::%s" % i):
            Cnf["Show::Options::%s" % i] = ""

    apt_pkg.ParseCommandLine(Cnf, Arguments, sys.argv)

    if Cnf["Show::Options::Help"]:
        help()


# main

parse_args()
db = pg.connect(Cnf["MyDB"])

# Generate the WHERE part of the SQL query
Options = Cnf.SubTree("Show::Options")
selection = []
if Options["Changed"]:
    selection.append("age('now', last_update::datetime) < '2 day'::timespan")
if Options["Offers"] and not Options["Requests"]:
    selection.append("offer = 't'")
if Options["Requests"] and not Options["Offers"]:
    selection.append("offer = 'f'")
if selection:
    where = " WHERE " + string.join(selection, " AND ")
else:
    where = ""

q = db.query("SELECT email, offer, url FROM people %s ORDER BY offer, UPPER(surname)" % where)
if not q.getresult():
    sys.exit(0)

if Options["Changed"]:
    Subst = {}
    print utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/gpg_show.changed"),

gpg_utils.cache_names(db)
gpg_utils.cache_places(db)
previous = ""
for email, offer, url in q.getresult():
    if offer != previous:
        print
        if offer == 't':
            print "Key signing offers:"
        else:
            print "Key signing requests:"
    previous = offer
    print
    if Options["URL"] and url:
        print "  %s <%s> [%s]" % (gpg_utils.get_fullname(db, email), email, url)
    else:
        print "  %s <%s>" % (gpg_utils.get_fullname(db, email), email)

    print gpg_utils.print_all_places(db, email, Options["URL"], " "*6)

# vim:set ts=4:
# vim:set expandtab:
# vim:set shiftwidth=4:
