#!/usr/bin/python

# Reset the password of a user
# Copyright (C) 2002, 2003  Martin Michlmayr <tbm@cyrius.com>
# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import crypt, pg, string, sys, whrandom
import utils, gpg_utils
import apt_pkg

def help():
    print """Usage: gpg_reset_passwd [OPTION] EMAIL...
Reset the password of a user

Options:
  -s, --no-mail             Don't send any mail
"""
    sys.exit(1)

def parse_args():
    global Cnf

    apt_pkg.init()
    Cnf = apt_pkg.newConfiguration()
    apt_pkg.ReadConfigFileISC(Cnf, "gpg.conf")

    Arguments = [("h", "help", "ResetPasswd::Options::Help"),
                 ("s", "no-mail", "ResetPasswd::Options::No-Mail")]
    for i in ["Help", "No-Mail"]:
        if not Cnf.has_key("ResetPasswd::Options::%s" % i):
            Cnf["ResetPasswd::Options::%s" % i] = ""

    to_reset = apt_pkg.ParseCommandLine(Cnf, Arguments, sys.argv)

    if Cnf["ResetPasswd::Options::Help"]:
        help()
    if not to_reset: # not user given
        print "No user given!"
        help()
    return to_reset

# Generate a random password
# Taken from the Python Cookbook, Random Password Generation, by Devin Leung
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/59873
def gen_passwd(length=8, chars=string.letters + string.digits):
    return "".join([whrandom.choice(chars) for i in range(length)])

# Reset the password of a user
def reset_passwd(db, email):
    print "Reseting password of user %s..." % email
    salt = "$1$" + gen_passwd(4)
    passwd = gen_passwd()
    crypt.crypt(passwd, salt)
    db.query("UPDATE people SET passwd = '%s' WHERE email = '%s'" % (crypt.crypt(passwd, salt), email))
    if not Cnf["ResetPasswd::Options::No-Mail"]:
        Subst = {}
        Subst["__FROM__"] = "%s <%s>" % (Cnf["MyFromName"], Cnf["MyEmailAddress"])
        Subst["__CC__"] = "Cc: %s" % Cnf["MyEmailAddress"]
        Subst["__WHOAMI__"] = Cnf["MyAdminName"]
        Subst["__MY_EMAIL__"] = Cnf["MyEmailAddress"]
        Subst["__URL__"] = Cnf["MyURL"]
        Subst["__PASSWD__"] = passwd
        if gpg_utils.find_name(db, email):
            firstname = gpg_utils.get_firstname(db, email)
            lastname = gpg_utils.get_lastname(db, email)
            Subst["__TO__"] = '"%s %s" <%s>' % (firstname, lastname, email)
            Subst["__FIRSTNAME__"] = firstname
        else:
            Subst["__TO__"] = email
            Subst["__FIRSTNAME__"] = "you"
        mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/gpg_reset_passwd.changed")
        utils.send_mail(mail_message)


# main

to_reset = parse_args()
db = pg.connect(Cnf["MyDB"])
for email in to_reset:
    if gpg_utils.find_email(db, email):
        reset_passwd(db, email)
    else:
        print "No user with the email address %s" % email

# vim:set ts=4:
# vim:set expandtab:
# vim:set shiftwidth=4:
