#!/usr/bin/python

# Take the GPG verified advocate mail and process it
# Copyright (C) 2002, 2003  Martin Michlmayr <tbm@cyrius.com>
# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import os, pg, re, string, sys, time
import utils
import apt_pkg

# A valid authentication key consists of the string "nmauth" followed by
# a md5 hash (i.e. a 32-character hexadecimal number).
re_auth_key = re.compile(r"(nmauth[a-f\d]{32})")

# Read the mail from stdin
input = sys.stdin.readlines()

# Read the configuration file
apt_pkg.init()
Cnf = apt_pkg.newConfiguration()
apt_pkg.ReadConfigFileISC(Cnf, "nm.conf")

Subst = {}
Subst["__LDAP_EMAIL__"] = os.environ["LDAP_EMAIL"] # passed to us by gpgwrapper
Subst["__FROM__"] = "%s <%s>" % (Cnf["MyFromName"], Cnf["MyEmailAddress"])
Subst["__ORIG_MESSAGE__"] = string.join(["> " + line for line in input], "")
Subst["__LDAP_UID__"] = os.environ["LDAP_UID"] # passed to us by gpgwrapper
Subst["__BCC__"] = "Bcc: %s" % Cnf["MyEmailAddress"]
Subst["__ADMIN_NAME__"] = Cnf["MyAdminName"]
Subst["__MY_EMAIL__"] = Cnf["MyEmailAddress"]

# Search for a valid authentication key
for line in input:
    result = re_auth_key.search(line)
    # Found one, stop
    if result:
        auth_key = result.group(1)
        break
else:
    # Couldn't find an auth key
    mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/auth_check.no_auth_key")
    utils.send_mail(mail_message)
    sys.exit(0)

# Search for the applicant with this auth key
nm = pg.connect(Cnf["MyDB"])
q = nm.query("SELECT forename, surname, email, advocate FROM applicant WHERE advocate_key = '%s'" % auth_key)
ql = q.getresult()
if not ql:
    # No applicant with such an auth key was found
    Subst["__AUTH_KEY__"] = auth_key
    mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/auth_check.no_applicant")
    utils.send_mail(mail_message)
    sys.exit(0)

(forename, surname, email, advocate) = ql[0]
Subst["__APPLICANT__"] = "%s %s" % (forename, surname)
Subst["__APPLICANT_EMAIL__"] = email

# Check if the person who signed the mail is the advocate
if (advocate != os.environ["LDAP_UID"]):
    Subst["__ADVOCATE__"] = advocate
    mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/auth_check.not_signed_by_advocate")
    utils.send_mail(mail_message)
    sys.exit(0)

# Everything is ok; mark the advocate check as done and send a mail
q = nm.query("UPDATE applicant SET advocate_ok = 't' WHERE email = '%s'" % email)
today = time.strftime("%Y-%m-%d")
q = nm.query("UPDATE applicant SET advocate_checked = '%s' WHERE email = '%s'" % (today, email))

mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/auth_check.success")
utils.send_mail(mail_message)

# Exit successfully (for gpgwrapper)
sys.exit(0)

# vim: ts=4:expandtab:shiftwidth=4:
