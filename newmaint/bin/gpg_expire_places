#!/usr/bin/python

# Remove expired place entries
# Copyright (C) 2002, 2003  Martin Michlmayr <tbm@cyrius.com>
# $Id$

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import pg, sys
import utils, gpg_utils
import apt_pkg

def help():
    print """Usage: gpg_expire_places [OPTION]
Remove expired place entries

Options:
  -s, --no-mail             Don't send any mail
"""
    sys.exit(1)

def parse_args():
    global Cnf

    apt_pkg.init()
    Cnf = apt_pkg.newConfiguration()
    apt_pkg.ReadConfigFileISC(Cnf, "gpg.conf")

    Arguments = [("h", "help", "ExpirePlaces::Options::Help"),
                 ("s", "no-mail", "ExpirePlaces::Options::No-Mail")]
    for i in ["Help", "No-Mail"]:
        if not Cnf.has_key("ExpirePlaces::Options::%s" % i):
            Cnf["ExpirePlaces::Options::%s" % i] = ""

    apt_pkg.ParseCommandLine(Cnf, Arguments, sys.argv)

    if Cnf["ExpirePlaces::Options::Help"]:
        help()

# Remove a place entry and inform the user
def expire_place(db, place):
    Subst = {}
    Subst["__FROM__"] = "%s <%s>" % (Cnf["MyFromName"], Cnf["MyEmailAddress"])
    Subst["__CC__"] = "Cc: %s" % Cnf["MyEmailAddress"]
    Subst["__ADMIN_NAME__"] = Cnf["MyAdminName"]
    Subst["__MY_EMAIL__"] = Cnf["MyEmailAddress"]
    Subst["__URL__"] = Cnf["MyURL"]

    email = gpg_utils.get_owner(db, place)
    Subst["__ENTRY__"] = gpg_utils.print_place(db, place)
    gpg_utils.remove_place(db, place)

    if gpg_utils.find_name(db, email):
        firstname = gpg_utils.get_firstname(db, email)
        lastname = gpg_utils.get_lastname(db, email)
        Subst["__TO__"] = '"%s %s" <%s>' % (firstname, lastname, email)
        Subst["__FIRSTNAME__"] = firstname
    else:
        Subst["__TO__"] = email
        Subst["__FIRSTNAME__"] = "you"
    mail_message = utils.TemplateSubst(Subst, Cnf["Dir::Templates"]+"/gpg_expire_places.inform")
    if Cnf["ExpirePlaces::Options::No-Mail"]:
        print "Not sending the following the following message:"
        print mail_message
    else:
        utils.send_mail(mail_message)


# main

to_move = parse_args()
db = pg.connect(Cnf["MyDB"])
q = db.query("SELECT id FROM places WHERE finish < CURRENT_TIMESTAMP")
for place in q.getresult():
    expire_place(db, place)

# While we are it, also set begin fields that have gone by to null.
# This is useful so a entry like "from 2002-11-26 to 2005-03-12"
# appears as "until 2005-03-12" after 2002-11-26.
db.query("UPDATE places SET begin = NULL WHERE begin <= CURRENT_TIMESTAMP")

# vim: ts=4:expandtab:shiftwidth=4:
